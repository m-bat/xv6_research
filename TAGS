
sleep1.p,0

plocal.asm,6902
_plocal:     file format elf32-i386_plocal2,1
Disassembly of section .text:Disassembly5,39
int main(int argc, char *argv[])int12,143
   a:	55                   	push   %ebpa17,326
   b:	89 e5                	mov    %esp,%ebpb18,366
   d:	51                   	push   %ecxd19,411
   e:	83 ec 04             	sub    $0x4,%espe20,451
  os = s;os43,1057
intint64,1741
intint85,2478
intint94,2659
intint115,3313
uintuint133,3784
  a0:	55                   	push   %ebpa0136,3807
  a1:	89 e5                	mov    %esp,%ebpa1137,3847
  a3:	8b 4d 08             	mov    0x8(%ebp),%ecxa3138,3892
  a6:	80 39 00             	cmpb   $0x0,(%ecx)a6142,3976
  a9:	74 12                	je     bd <strlen+0x1d>a9143,4023
  ab:	31 d2                	xor    %edx,%edxab144,4075
  ad:	8d 76 00             	lea    0x0(%esi),%esiad145,4120
  b0:	83 c2 01             	add    $0x1,%edxb0146,4170
  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)b3147,4215
  b7:	89 d0                	mov    %edx,%eaxb7148,4269
  b9:	75 f5                	jne    b0 <strlen+0x10>b9149,4314
  bb:	5d                   	pop    %ebpbb153,4386
  bc:	c3                   	ret    bc154,4426
uintuint155,4462
  bd:	31 c0                	xor    %eax,%eaxbd161,4519
  bf:	5d                   	pop    %ebpbf165,4584
  c0:	c3                   	ret    c0166,4624
  c1:	eb 0d                	jmp    d0 <memset>c1167,4660
  c3:	90                   	nopc3168,4707
  c4:	90                   	nopc4169,4739
  c5:	90                   	nopc5170,4771
  c6:	90                   	nopc6171,4803
  c7:	90                   	nopc7172,4835
  c8:	90                   	nopc8173,4867
  c9:	90                   	nopc9174,4899
  ca:	90                   	nopca175,4931
  cb:	90                   	nopcb176,4963
  cc:	90                   	nopcc177,4995
  cd:	90                   	nopcd178,5027
  ce:	90                   	nopce179,5059
  cf:	90                   	nopcf180,5091
  d0:	55                   	push   %ebpd0187,5185
  d1:	89 e5                	mov    %esp,%ebpd1188,5225
  d3:	57                   	push   %edid3189,5270
  d4:	8b 55 08             	mov    0x8(%ebp),%edxd4190,5310
static inline voidstatic193,5363
  d7:	8b 4d 10             	mov    0x10(%ebp),%ecxd7197,5455
  da:	8b 45 0c             	mov    0xc(%ebp),%eaxda198,5506
  dd:	89 d7                	mov    %edx,%edidd199,5556
  df:	fc                   	cld    df200,5601
  e0:	f3 aa                	rep stos %al,%es:(%edi)e0201,5637
  e2:	89 d0                	mov    %edx,%eaxe2205,5725
  e4:	5f                   	pop    %edie4206,5770
  e5:	5d                   	pop    %ebpe5207,5810
  e6:	c3                   	ret    e6208,5850
  e7:	89 f6                	mov    %esi,%esie7209,5886
  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edie9210,5931
  f0:	55                   	push   %ebpf0217,6047
  f1:	89 e5                	mov    %esp,%ebpf1218,6087
  f3:	53                   	push   %ebxf3219,6132
  f4:	8b 45 08             	mov    0x8(%ebp),%eaxf4220,6172
  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebxf7221,6222
  fa:	0f b6 10             	movzbl (%eax),%edxfa223,6289
  fd:	84 d2                	test   %dl,%dlfd224,6336
  ff:	74 1d                	je     11e <strchr+0x2e>ff225,6379
    cc = read(0, &c, 1);cc270,7713
    cc = read(0, &c, 1);cc284,7984
    cc = read(0, &c, 1);cc303,8656
intint383,10812
  fd = open(n, O_RDONLY);fd393,11034
  r = fstat(fd, st);r403,11406
  fd = open(n, O_RDONLY);fd426,12183
intint438,12475
  n = 0;n447,12686
    n = n*10 + *s++ - '0';n456,13073
  n = 0;n464,13290
    n = n*10 + *s++ - '0';n470,13525
  dst = vdst;dst493,14176
  src = vsrc;src494,14190
  dst = vdst;dst507,14617
  src = vsrc;src508,14631
  name: \name521,14973
static voidstatic674,18950
  neg = 0;neg688,19345
    neg = 1;neg697,19716
    x = -xx;x698,19729
  neg = 0;neg703,19812
    neg = 1;neg705,19844
    x = -xx;x707,19909
    x = xx;x711,20025
  i = 0;i714,20042
    x = xx;x729,20642
  i = 0;i732,20659
static voidstatic751,21362
  neg = 0;neg780,22309
    neg = 1;neg782,22341
    x = -xx;x783,22354
    x = xx;x785,22378
  neg = 0;neg792,22521
voidvoid802,22810
  state = 0;state813,23085
  ap = (uint*)(void*)&fmt + 1;ap814,23098
voidvoid820,23269
  state = 0;state827,23385
  ap = (uint*)(void*)&fmt + 1;ap828,23398
voidvoid834,23568
  state = 0;state841,23688
  ap = (uint*)(void*)&fmt + 1;ap842,23701
    c = fmt[i] & 0xff;c853,24199
        state = '%';state858,24360
  state = 0;state860,24427
  ap = (uint*)(void*)&fmt + 1;ap861,24440
    c = fmt[i] & 0xff;c863,24498
static voidstatic869,24633
  state = 0;state886,25178
  ap = (uint*)(void*)&fmt + 1;ap887,25191
    c = fmt[i] & 0xff;c892,25396
  state = 0;state897,25497
  ap = (uint*)(void*)&fmt + 1;ap898,25510
    c = fmt[i] & 0xff;c900,25568
        state = '%';state906,25772
          s = "(null)";s927,26492
static voidstatic942,26899
  state = 0;state964,27663
  ap = (uint*)(void*)&fmt + 1;ap965,27676
static voidstatic970,27804
      state = 0;state980,28032
  state = 0;state985,28126
  ap = (uint*)(void*)&fmt + 1;ap986,28139
      state = 0;state992,28322
      state = 0;state1025,29414
        s = (char*)*ap;s1039,29897
          s = "(null)";s1046,30150
static voidstatic1058,30606
          s = "(null)";s1067,30831
static voidstatic1074,30982
        s = (char*)*ap;s1082,31191
          s = "(null)";s1085,31248
      state = 0;state1096,31613
static voidstatic1103,31854
static voidstatic1125,32531
static Header base;static1143,33137
static Header *freep;static1144,33157
voidvoid1146,33180
  bp = (Header*)ap - 1;bp1152,33261
static Header base;static1155,33390
static Header *freep;static1156,33410
voidvoid1158,33433
  bp = (Header*)ap - 1;bp1168,33689
voidvoid1172,33870
  bp = (Header*)ap - 1;bp1177,33911
static Header base;static1189,34486
static Header *freep;static1190,34506
voidvoid1192,34529
  bp = (Header*)ap - 1;bp1198,34615
  bp = (Header*)ap - 1;bp1207,34877
  freep = p;freep1238,36104
  bp = (Header*)ap - 1;bp1246,36361
  freep = p;freep1270,37254
  freep = p;freep1284,37675
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1309,38272
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1318,38516
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1343,39628
      freep = prevp;freep1356,40094
    nu = 4096;nu1367,40355
  p = sbrk(nu * sizeof(Header));p1368,40370
  hp = (Header*)p;hp1377,40720
      freep = prevp;freep1388,41079
      freep = prevp;freep1418,42117
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1446,42945

printf.c,136
putc(int fd, char c)putc6,68
printint(int fd, int xx, int base, int sgn)printint12,126
printf(int fd, char *fmt, ...)printf40,558

elf.h,989
#define ELF_MAGIC ELF_MAGIC3,37
struct elfhdr {elfhdr6,114
  uint magic;  // must equal ELF_MAGICmagic7,130
  uchar elf[12];elf8,169
  ushort type;type9,186
  ushort machine;machine10,201
  uint version;version11,219
  uint entry;entry12,235
  uint phoff;phoff13,249
  uint shoff;shoff14,263
  uint flags;flags15,277
  ushort ehsize;ehsize16,291
  ushort phentsize;phentsize17,308
  ushort phnum;phnum18,328
  ushort shentsize;shentsize19,344
  ushort shnum;shnum20,364
  ushort shstrndx;shstrndx21,380
struct proghdr {proghdr25,429
  uint type;type26,446
  uint off;off27,459
  uint vaddr;vaddr28,471
  uint paddr;paddr29,485
  uint filesz;filesz30,499
  uint memsz;memsz31,514
  uint flags;flags32,528
  uint align;align33,542
#define ELF_PROG_LOAD ELF_PROG_LOAD37,587
#define ELF_PROG_FLAG_EXEC ELF_PROG_FLAG_EXEC40,653
#define ELF_PROG_FLAG_WRITE ELF_PROG_FLAG_WRITE41,687
#define ELF_PROG_FLAG_READ ELF_PROG_FLAG_READ42,721

bootmain.c,207
#define SECTSIZE SECTSIZE13,355
bootmain(void)bootmain18,418
waitdisk(void)waitdisk51,1181
readsect(void *dst, uint offset)readsect60,1319
readseg(uchar* pa, uint count, uint offset)readseg79,1764

exec.c,42
exec(char *path, char **argv)exec11,153

mkfs.c,976
#define stat stat8,119
#define static_assert(static_assert15,274
#define NINODES NINODES18,358
int nbitmap = FSSIZE/(BSIZE*8) + 1;nbitmap23,475
int ninodeblocks = NINODES / IPB + 1;ninodeblocks24,511
int nlog = LOGSIZE;nlog25,549
int nmeta;    // Number of meta blocks (boot, sb, nlog, inode, bitmap)nmeta26,569
int nblocks;  // Number of data blocksnblocks27,640
int fsfd;fsfd29,680
struct superblock sb;sb30,690
char zeroes[BSIZE];zeroes31,712
uint freeinode = 1;freeinode32,732
uint freeblock;freeblock33,752
xshort(ushort x)xshort46,1030
xint(uint x)xint56,1135
main(int argc, char *argv[])main68,1269
wsect(uint sec, void *buf)wsect171,3642
winode(uint inum, struct dinode *ip)winode184,3845
rinode(uint inum, struct dinode *ip)rinode198,4066
rsect(uint sec, void *buf)rsect211,4269
ialloc(ushort type)ialloc224,4470
balloc(int used)balloc238,4688
#define min(min253,5024
iappend(uint inum, void *xp, int n)iappend256,5072

sleeplock.c,234
initsleeplock(struct sleeplock *lk, char *name)initsleeplock14,201
acquiresleep(struct sleeplock *lk)acquiresleep23,346
releasesleep(struct sleeplock *lk)releasesleep35,527
holdingsleep(struct sleeplock *lk)holdingsleep45,658

ps.c,43
int main(int argc, char *argv[])main6,75

file.h,1127
struct file {file1,0
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_NONE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_PIPE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_INODE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;type2,14
  int ref; // reference countref3,58
  char readable;readable4,88
  char writable;writable5,105
  struct pipe *pipe;pipe6,122
  struct inode *ip;ip7,143
  uint off;off8,163
struct inode {inode13,210
  uint dev;           // Device numberdev14,225
  uint inum;          // Inode numberinum15,264
  int ref;            // Reference countref16,302
  struct sleeplock lock; // protects everything below herelock17,343
  int valid;          // inode has been read from disk?valid18,402
  short type;         // copy of disk inodetype20,459
  short major;major21,503
  short minor;minor22,518
  short nlink;nlink23,533
  uint size;size24,548
  uint addrs[NDIRECT+1];addrs25,561
struct devsw {devsw30,650
  int (*read)(struct inode*, char*, int);read31,665
  int (*write)(struct inode*, char*, int);write32,707
#define CONSOLE CONSOLE37,784

sh.asm,50292
_sh:     file format elf32-i386_sh2,1
Disassembly of section .text:Disassembly5,35
intint11,98
       a:	55                   	push   %ebpa17,275
       b:	89 e5                	mov    %esp,%ebpb18,319
       d:	51                   	push   %ecxd19,368
       e:	83 ec 04             	sub    $0x4,%espe20,412
intint56,1763
  pid = fork();pid61,1793
intint95,3048
  pid = fork();pid100,3078
      a1:	e8 ba 00 00 00       	call   160 <panic>a1108,3385
      a6:	83 ec 0c             	sub    $0xc,%espa6115,3670
      a9:	68 60 18 00 00       	push   $0x1860a9116,3719
      ae:	e8 ad 0a 00 00       	call   b60 <strlen>ae117,3766
      b3:	c7 04 24 63 18 00 00 	movl   $0x1863,(%esp)b3119,3845
      ba:	c6 80 5f 18 00 00 00 	movb   $0x0,0x185f(%eax)ba126,4133
      c1:	e8 cc 0c 00 00       	call   d92 <chdir>c1128,4217
      c6:	83 c4 10             	add    $0x10,%espc6129,4268
      c9:	85 c0                	test   %eax,%eaxc9130,4318
      cb:	79 9a                	jns    67 <main+0x67>cb131,4367
      cd:	50                   	push   %eaxcd133,4465
      ce:	68 63 18 00 00       	push   $0x1863ce134,4509
      d3:	68 49 12 00 00       	push   $0x1249d3135,4556
      d8:	6a 02                	push   $0x2d8136,4603
      da:	e8 a1 0d 00 00       	call   e80 <printf>da137,4647
      df:	83 c4 10             	add    $0x10,%espdf138,4699
      e2:	eb 83                	jmp    67 <main+0x67>e2139,4749
      e4:	83 ec 0c             	sub    $0xc,%espe4146,4944
      e7:	50                   	push   %eaxe7147,4993
      e8:	e8 5d 0c 00 00       	call   d4a <close>e8148,5037
      ed:	83 c4 10             	add    $0x10,%esped150,5101
      f0:	e9 72 ff ff ff       	jmp    67 <main+0x67>f0151,5151
      f5:	e8 28 0c 00 00       	call   d22 <exit>f5158,5287
      fa:	83 ec 0c             	sub    $0xc,%espfa165,5480
      fd:	68 60 18 00 00       	push   $0x1860fd166,5529
intint176,5802
voidvoid223,7503
voidvoid242,8079
    pcmd = (struct pipecmd*)cmd;pcmd269,8870
intint278,9279
  pid = fork();pid283,9309
    pcmd = (struct pipecmd*)cmd;pcmd290,9519
intint296,9722
  pid = fork();pid301,9752
intint340,10918
  pid = fork();pid345,10948
    bcmd = (struct backcmd*)cmd;bcmd354,11181
  default:default359,11398
    ecmd = (struct execcmd*)cmd;ecmd363,11444
    rcmd = (struct redircmd*)cmd;rcmd387,12419
    bcmd = (struct backcmd*)cmd;bcmd404,13085
intint410,13314
  pid = fork();pid415,13344
    lcmd = (struct listcmd*)cmd;lcmd424,13588
  default:default439,14060
  pid = fork();pid447,14253
    rcmd = (struct redircmd*)cmd;rcmd455,14466
    pcmd = (struct pipecmd*)cmd;pcmd469,14937
intint525,16992
  pid = fork();pid533,17164
  pid = fork();pid546,17487
  cmd = malloc(sizeof(*cmd));cmd567,18011
  cmd = malloc(sizeof(*cmd));cmd577,18272
  cmd = malloc(sizeof(*cmd));cmd605,19227
  cmd = malloc(sizeof(*cmd));cmd615,19547
  cmd = malloc(sizeof(*cmd));cmd628,19966
  cmd = malloc(sizeof(*cmd));cmd666,21292
  cmd = malloc(sizeof(*cmd));cmd676,21583
  cmd = malloc(sizeof(*cmd));cmd689,21998
  cmd = malloc(sizeof(*cmd));cmd718,22955
  cmd = malloc(sizeof(*cmd));cmd728,23246
  cmd = malloc(sizeof(*cmd));cmd741,23661
  cmd = malloc(sizeof(*cmd));cmd770,24601
  cmd = malloc(sizeof(*cmd));cmd780,24875
  cmd = malloc(sizeof(*cmd));cmd793,25291
char whitespace[] = " \t\r\n\v";char807,25734
char symbols[] = "<|>&;()";char808,25767
intint810,25796
  s = *ps;s822,26150
char whitespace[] = " \t\r\n\v";char824,26215
char symbols[] = "<|>&;()";char825,26248
intint827,26277
  s = *ps;s835,26466
  s = *ps;s848,26874
  ret = *s;ret866,27625
    ret = 'a';ret877,28123
  ret = *s;ret932,30089
  ret = *s;ret956,30654
  default:default965,30925
    ret = 'a';ret966,30936
  default:default984,31678
    ret = 'a';ret985,31689
      ret = '+';ret997,32283
  default:default1001,32328
    ret = 'a';ret1002,32339
  ret = *s;ret1013,32739
      ret = '+';ret1024,33093
      ret = '+';ret1032,33230
  ret = *s;ret1040,33481
    ret = 'a';ret1046,33723
intint1076,34667
  s = *ps;s1089,35105
  s = *ps;s1103,35588
    tok = gettoken(ps, es, 0, 0);tok1168,38145
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd1196,39428
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd1199,39518
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd1211,40008
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd1214,40098
    tok = gettoken(ps, es, 0, 0);tok1219,40344
      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);cmd1224,40495
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd1230,40802
    tok = gettoken(ps, es, 0, 0);tok1246,41268
  ret = execcmd();ret1285,42576
  cmd = (struct execcmd*)ret;cmd1287,42648
  argc = 0;argc1289,42679
  ret = parseredirs(ret, ps, es);ret1290,42691
  ret = execcmd();ret1297,42850
  cmd = (struct execcmd*)ret;cmd1300,42974
  argc = 0;argc1302,43005
  ret = parseredirs(ret, ps, es);ret1303,43017
  ret = execcmd();ret1313,43432
  cmd = (struct execcmd*)ret;cmd1314,43451
  argc = 0;argc1316,43482
    ret = parseredirs(ret, ps, es);ret1325,43782
  ret = execcmd();ret1333,44169
  cmd = (struct execcmd*)ret;cmd1334,44188
  argc = 0;argc1336,44219
  ret = parseredirs(ret, ps, es);ret1337,44231
    ret = parseredirs(ret, ps, es);ret1400,46773
    ret = parseredirs(ret, ps, es);ret1419,47437
  ret = parseredirs(ret, ps, es);ret1434,47976
  cmd = parseexec(ps, es);cmd1463,48887
  cmd = parseexec(ps, es);cmd1474,49196
    cmd = pipecmd(cmd, parsepipe(ps, es));cmd1485,49669
  cmd = parseexec(ps, es);cmd1501,50171
    cmd = pipecmd(cmd, parsepipe(ps, es));cmd1509,50481
  cmd = parseexec(ps, es);cmd1528,51184
    cmd = pipecmd(cmd, parsepipe(ps, es));cmd1531,51264
  cmd = parsepipe(ps, es);cmd1552,51909
  cmd = parsepipe(ps, es);cmd1563,52222
    cmd = backcmd(cmd);cmd1574,52698
  cmd = parsepipe(ps, es);cmd1583,52978
    cmd = backcmd(cmd);cmd1594,53454
    cmd = listcmd(cmd, parseline(ps, es));cmd1606,53928
    cmd = backcmd(cmd);cmd1620,54414
    cmd = listcmd(cmd, parseline(ps, es));cmd1629,54725
    cmd = backcmd(cmd);cmd1647,55436
    cmd = listcmd(cmd, parseline(ps, es));cmd1651,55517
  cmd = parseline(ps, es);cmd1687,56815
  cmd = parseline(ps, es);cmd1700,57243
  cmd = parseredirs(cmd, ps, es);cmd1717,57978
  cmd = parseline(ps, es);cmd1741,58814
    lcmd = (struct listcmd*)cmd;lcmd1781,60054
    bcmd = (struct backcmd*)cmd;bcmd1793,60565
    ecmd = (struct execcmd*)cmd;ecmd1807,60889
     a00:	8b 4b 04             	mov    0x4(%ebx),%ecxa001809,60955
     a03:	8d 43 2c             	lea    0x2c(%ebx),%eaxa031810,61009
     a06:	85 c9                	test   %ecx,%ecxa061811,61064
     a08:	74 15                	je     a1f <nulterminate+0x5f>a081812,61113
     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia0a1813,61176
     a10:	8b 10                	mov    (%eax),%edxa101815,61257
     a12:	83 c0 04             	add    $0x4,%eaxa121816,61308
     a15:	c6 02 00             	movb   $0x0,(%edx)a151817,61357
    ecmd = (struct execcmd*)cmd;ecmd1822,61457
     a18:	8b 50 d8             	mov    -0x28(%eax),%edxa181824,61523
     a1b:	85 d2                	test   %edx,%edxa1b1825,61579
     a1d:	75 f1                	jne    a10 <nulterminate+0x50>a1d1826,61628
     a1f:	89 d8                	mov    %ebx,%eaxa1f1833,61768
    bcmd = (struct backcmd*)cmd;bcmd1834,61817
     a21:	8b 5d fc             	mov    -0x4(%ebp),%ebxa211840,61910
     a24:	c9                   	leave  a241841,61965
     a25:	c3                   	ret    a251842,62005
     a26:	8d 76 00             	lea    0x0(%esi),%esia261843,62045
     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia291844,62099
    bcmd = (struct backcmd*)cmd;bcmd1849,62216
     a30:	83 ec 0c             	sub    $0xc,%espa301851,62278
     a33:	ff 73 04             	pushl  0x4(%ebx)a331852,62327
     a36:	e8 85 ff ff ff       	call   9c0 <nulterminate>a361853,62376
     a3b:	89 d8                	mov    %ebx,%eaxa3b1855,62445
     a3d:	83 c4 10             	add    $0x10,%espa3d1856,62494
     a40:	8b 5d fc             	mov    -0x4(%ebp),%ebxa401860,62564
     a43:	c9                   	leave  a431861,62619
     a44:	c3                   	ret    a441862,62659
     a45:	8d 76 00             	lea    0x0(%esi),%esia451863,62699
    rcmd = (struct redircmd*)cmd;rcmd1868,62806
     a48:	83 ec 0c             	sub    $0xc,%espa481870,62869
     a4b:	ff 73 04             	pushl  0x4(%ebx)a4b1871,62918
     a4e:	e8 6d ff ff ff       	call   9c0 <nulterminate>a4e1872,62967
     a53:	8b 43 0c             	mov    0xc(%ebx),%eaxa531874,63047
     a56:	83 c4 10             	add    $0x10,%espa561876,63112
    rcmd = (struct redircmd*)cmd;rcmd1880,63188
     a59:	c6 00 00             	movb   $0x0,(%eax)a591883,63273
     a5c:	89 d8                	mov    %ebx,%eaxa5c1885,63335
    bcmd = (struct backcmd*)cmd;bcmd1886,63384
     a5e:	8b 5d fc             	mov    -0x4(%ebp),%ebxa5e1892,63477
     a61:	c9                   	leave  a611893,63532
     a62:	c3                   	ret    a621894,63572
     a63:	90                   	nopa631895,63612
     a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esia641896,63648
     a68:	31 c0                	xor    %eax,%eaxa681903,63812
     a6a:	eb 8d                	jmp    9f9 <nulterminate+0x39>a6a1904,63861
     a6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esia6c1905,63924
     a70:	55                   	push   %ebpa701914,64117
     a71:	89 e5                	mov    %esp,%ebpa711915,64161
     a73:	56                   	push   %esia731916,64210
     a74:	53                   	push   %ebxa741917,64254
  es = s + strlen(s);es1921,64330
     a75:	8b 5d 08             	mov    0x8(%ebp),%ebxa751922,64352
     a78:	83 ec 0c             	sub    $0xc,%espa781923,64406
     a7b:	53                   	push   %ebxa7b1924,64455
     a7c:	e8 df 00 00 00       	call   b60 <strlen>a7c1925,64499
  cmd = parseline(&s, es);cmd1926,64551
     a81:	59                   	pop    %ecxa811927,64578
  es = s + strlen(s);es1933,64674
     a82:	01 c3                	add    %eax,%ebxa821934,64696
  cmd = parseline(&s, es);cmd1935,64745
     a84:	8d 45 08             	lea    0x8(%ebp),%eaxa841936,64772
     a87:	5e                   	pop    %esia871937,64826
     a88:	53                   	push   %ebxa881938,64870
     a89:	50                   	push   %eaxa891939,64914
     a8a:	e8 01 fe ff ff       	call   890 <parseline>a8a1940,64958
     a8f:	89 c6                	mov    %eax,%esia8f1941,65013
     a91:	8d 45 08             	lea    0x8(%ebp),%eaxa911943,65082
     a94:	83 c4 0c             	add    $0xc,%espa941944,65136
     a97:	68 b9 11 00 00       	push   $0x11b9a971945,65185
     a9c:	53                   	push   %ebxa9c1946,65232
     a9d:	50                   	push   %eaxa9d1947,65276
     a9e:	e8 4d fb ff ff       	call   5f0 <peek>a9e1948,65320
     aa3:	8b 45 08             	mov    0x8(%ebp),%eaxaa31950,65385
     aa6:	83 c4 10             	add    $0x10,%espaa61951,65439
     aa9:	39 c3                	cmp    %eax,%ebxaa91952,65489
     aab:	75 12                	jne    abf <parsecmd+0x4f>aab1953,65538
     aad:	83 ec 0c             	sub    $0xc,%espaad1958,65680
     ab0:	56                   	push   %esiab01959,65729
     ab1:	e8 0a ff ff ff       	call   9c0 <nulterminate>ab11960,65773
     ab6:	8d 65 f8             	lea    -0x8(%ebp),%espab61963,65847
     ab9:	89 f0                	mov    %esi,%eaxab91964,65902
     abb:	5b                   	pop    %ebxabb1965,65951
     abc:	5e                   	pop    %esiabc1966,65995
     abd:	5d                   	pop    %ebpabd1967,66039
     abe:	c3                   	ret    abe1968,66083
  es = s + strlen(s);es1970,66124
  cmd = parseline(&s, es);cmd1971,66146
     abf:	52                   	push   %edxabf1975,66245
     ac0:	50                   	push   %eaxac01976,66289
     ac1:	68 32 12 00 00       	push   $0x1232ac11977,66333
     ac6:	6a 02                	push   $0x2ac61978,66380
     ac8:	e8 b3 03 00 00       	call   e80 <printf>ac81979,66424
     acd:	c7 04 24 f6 11 00 00 	movl   $0x11f6,(%esp)acd1981,66497
     ad4:	e8 87 f6 ff ff       	call   160 <panic>ad41982,66551
     ad9:	66 90                	xchg   %ax,%axad91983,66602
     adb:	66 90                	xchg   %ax,%axadb1984,66649
     add:	66 90                	xchg   %ax,%axadd1985,66696
     adf:	90                   	nopadf1986,66743
     ae0:	55                   	push   %ebpae01995,66868
     ae1:	89 e5                	mov    %esp,%ebpae11996,66912
     ae3:	53                   	push   %ebxae31997,66961
     ae4:	8b 45 08             	mov    0x8(%ebp),%eaxae41998,67005
     ae7:	8b 4d 0c             	mov    0xc(%ebp),%ecxae71999,67059
  os = s;os2002,67126
     aea:	89 c2                	mov    %eax,%edxaea2004,67164
     aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esiaec2005,67213
     af0:	83 c1 01             	add    $0x1,%ecxaf02006,67274
     af3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxaf32007,67323
     af7:	83 c2 01             	add    $0x1,%edxaf72008,67378
     afa:	84 db                	test   %bl,%blafa2009,67427
     afc:	88 5a ff             	mov    %bl,-0x1(%edx)afc2010,67474
     aff:	75 ef                	jne    af0 <strcpy+0x10>aff2011,67528
     b01:	5b                   	pop    %ebxb012015,67606
     b02:	5d                   	pop    %ebpb022016,67650
     b03:	c3                   	ret    b032017,67694
     b04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esib042018,67734
     b0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edib0a2019,67788
intint2023,67863
     b10:	55                   	push   %ebpb102026,67906
     b11:	89 e5                	mov    %esp,%ebpb112027,67950
     b13:	56                   	push   %esib132028,67999
     b14:	53                   	push   %ebxb142029,68043
     b15:	8b 55 08             	mov    0x8(%ebp),%edxb152030,68087
     b18:	8b 4d 0c             	mov    0xc(%ebp),%ecxb182031,68141
     b1b:	0f b6 02             	movzbl (%edx),%eaxb1b2033,68219
     b1e:	0f b6 19             	movzbl (%ecx),%ebxb1e2034,68270
     b21:	84 c0                	test   %al,%alb212035,68321
     b23:	75 1e                	jne    b43 <strcmp+0x33>b232036,68368
     b25:	eb 29                	jmp    b50 <strcmp+0x40>b252037,68425
     b27:	89 f6                	mov    %esi,%esib272038,68482
     b29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib292039,68531
     b30:	83 c2 01             	add    $0x1,%edxb302041,68606
intint2044,68658
     b33:	0f b6 02             	movzbl (%edx),%eaxb332048,68725
     b36:	8d 71 01             	lea    0x1(%ecx),%esib362050,68790
intint2053,68847
     b39:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxb392057,68914
     b3d:	84 c0                	test   %al,%alb3d2058,68968
     b3f:	74 0f                	je     b50 <strcmp+0x40>b3f2059,69015
     b41:	89 f1                	mov    %esi,%ecxb412060,69072
     b43:	38 d8                	cmp    %bl,%alb432061,69121
     b45:	74 e9                	je     b30 <strcmp+0x20>b452062,69168
     b47:	29 d8                	sub    %ebx,%eaxb472065,69271
     b49:	5b                   	pop    %ebxb492067,69322
     b4a:	5e                   	pop    %esib4a2068,69366
     b4b:	5d                   	pop    %ebpb4b2069,69410
     b4c:	c3                   	ret    b4c2070,69454
     b4d:	8d 76 00             	lea    0x0(%esi),%esib4d2071,69494
intint2074,69551
     b50:	31 c0                	xor    %eax,%eaxb502078,69618
     b52:	29 d8                	sub    %ebx,%eaxb522081,69713
     b54:	5b                   	pop    %ebxb542083,69764
     b55:	5e                   	pop    %esib552084,69808
     b56:	5d                   	pop    %ebpb562085,69852
     b57:	c3                   	ret    b572086,69896
     b58:	90                   	nopb582087,69936
     b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esib592088,69972
uintuint2092,70054
     b60:	55                   	push   %ebpb602095,70077
     b61:	89 e5                	mov    %esp,%ebpb612096,70121
     b63:	8b 4d 08             	mov    0x8(%ebp),%ecxb632097,70170
     b66:	80 39 00             	cmpb   $0x0,(%ecx)b662101,70258
     b69:	74 12                	je     b7d <strlen+0x1d>b692102,70309
     b6b:	31 d2                	xor    %edx,%edxb6b2103,70366
     b6d:	8d 76 00             	lea    0x0(%esi),%esib6d2104,70415
     b70:	83 c2 01             	add    $0x1,%edxb702105,70469
     b73:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)b732106,70518
     b77:	89 d0                	mov    %edx,%eaxb772107,70576
     b79:	75 f5                	jne    b70 <strlen+0x10>b792108,70625
     b7b:	5d                   	pop    %ebpb7b2112,70702
     b7c:	c3                   	ret    b7c2113,70746
uintuint2114,70786
     b7d:	31 c0                	xor    %eax,%eaxb7d2120,70843
     b7f:	5d                   	pop    %ebpb7f2124,70912
     b80:	c3                   	ret    b802125,70956
     b81:	eb 0d                	jmp    b90 <memset>b812126,70996
     b83:	90                   	nopb832127,71048
     b84:	90                   	nopb842128,71084
     b85:	90                   	nopb852129,71120
     b86:	90                   	nopb862130,71156
     b87:	90                   	nopb872131,71192
     b88:	90                   	nopb882132,71228
     b89:	90                   	nopb892133,71264
     b8a:	90                   	nopb8a2134,71300
     b8b:	90                   	nopb8b2135,71336
     b8c:	90                   	nopb8c2136,71372
     b8d:	90                   	nopb8d2137,71408
     b8e:	90                   	nopb8e2138,71444
     b8f:	90                   	nopb8f2139,71480
     b90:	55                   	push   %ebpb902146,71578
     b91:	89 e5                	mov    %esp,%ebpb912147,71622
     b93:	57                   	push   %edib932148,71671
     b94:	8b 55 08             	mov    0x8(%ebp),%edxb942149,71715
static inline voidstatic2152,71772
     b97:	8b 4d 10             	mov    0x10(%ebp),%ecxb972156,71864
     b9a:	8b 45 0c             	mov    0xc(%ebp),%eaxb9a2157,71919
     b9d:	89 d7                	mov    %edx,%edib9d2158,71973
     b9f:	fc                   	cld    b9f2159,72022
     ba0:	f3 aa                	rep stos %al,%es:(%edi)ba02160,72062
     ba2:	89 d0                	mov    %edx,%eaxba22164,72154
     ba4:	5f                   	pop    %ediba42165,72203
     ba5:	5d                   	pop    %ebpba52166,72247
     ba6:	c3                   	ret    ba62167,72291
     ba7:	89 f6                	mov    %esi,%esiba72168,72331
     ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%ediba92169,72380
     bb0:	55                   	push   %ebpbb02176,72500
     bb1:	89 e5                	mov    %esp,%ebpbb12177,72544
     bb3:	53                   	push   %ebxbb32178,72593
     bb4:	8b 45 08             	mov    0x8(%ebp),%eaxbb42179,72637
     bb7:	8b 5d 0c             	mov    0xc(%ebp),%ebxbb72180,72691
     bba:	0f b6 10             	movzbl (%eax),%edxbba2182,72762
     bbd:	84 d2                	test   %dl,%dlbbd2183,72813
     bbf:	74 1d                	je     bde <strchr+0x2e>bbf2184,72860
     bc1:	38 d3                	cmp    %dl,%blbc12186,72933
     bc3:	89 d9                	mov    %ebx,%ecxbc32187,72980
     bc5:	75 0d                	jne    bd4 <strchr+0x24>bc52188,73029
     bc7:	eb 17                	jmp    be0 <strchr+0x30>bc72189,73086
     bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esibc92190,73143
     bd0:	38 ca                	cmp    %cl,%dlbd02191,73204
     bd2:	74 0c                	je     be0 <strchr+0x30>bd22192,73251
     bd4:	83 c0 01             	add    $0x1,%eaxbd42199,73366
     bd7:	0f b6 10             	movzbl (%eax),%edxbd72200,73415
     bda:	84 d2                	test   %dl,%dlbda2201,73466
     bdc:	75 f2                	jne    bd0 <strchr+0x20>bdc2202,73513
     bde:	31 c0                	xor    %eax,%eaxbde2206,73621
     be0:	5b                   	pop    %ebxbe02208,73672
     be1:	5d                   	pop    %ebpbe12209,73716
     be2:	c3                   	ret    be22210,73760
     be3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esibe32211,73800
     be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edibe92212,73854
     bf0:	55                   	push   %ebpbf02219,73967
     bf1:	89 e5                	mov    %esp,%ebpbf12220,74011
     bf3:	57                   	push   %edibf32221,74060
     bf4:	56                   	push   %esibf42222,74104
     bf5:	53                   	push   %ebxbf52223,74148
     bf6:	31 f6                	xor    %esi,%esibf62228,74241
    cc = read(0, &c, 1);cc2229,74290
     bf8:	8d 7d e7             	lea    -0x19(%ebp),%edibf82230,74315
     bfb:	83 ec 1c             	sub    $0x1c,%espbfb2237,74419
     bfe:	eb 29                	jmp    c29 <gets+0x39>bfe2242,74518
    cc = read(0, &c, 1);cc2243,74573
     c00:	83 ec 04             	sub    $0x4,%espc002244,74598
     c03:	6a 01                	push   $0x1c032245,74647
     c05:	57                   	push   %edic052246,74691
     c06:	6a 00                	push   $0x0c062247,74735
     c08:	e8 2d 01 00 00       	call   d3a <read>c082248,74779
     c0d:	83 c4 10             	add    $0x10,%espc0d2250,74844
     c10:	85 c0                	test   %eax,%eaxc102251,74894
     c12:	7e 1d                	jle    c31 <gets+0x41>c122252,74943
     c14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eaxc142255,75029
     c18:	8b 55 08             	mov    0x8(%ebp),%edxc182256,75085
     c1b:	89 de                	mov    %ebx,%esic1b2257,75139
     c1d:	3c 0a                	cmp    $0xa,%alc1d2259,75219
    cc = read(0, &c, 1);cc2262,75293
     c1f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)c1f2266,75364
     c23:	74 1b                	je     c40 <gets+0x50>c232268,75456
     c25:	3c 0d                	cmp    $0xd,%alc252269,75511
     c27:	74 17                	je     c40 <gets+0x50>c272270,75559
     c29:	8d 5e 01             	lea    0x1(%esi),%ebxc292277,75690
     c2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebxc2c2278,75744
     c2f:	7c cf                	jl     c00 <gets+0x10>c2f2279,75798
     c31:	8b 45 08             	mov    0x8(%ebp),%eaxc312286,75949
     c34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)c342287,76003
     c38:	8d 65 f4             	lea    -0xc(%ebp),%espc382290,76077
     c3b:	5b                   	pop    %ebxc3b2291,76132
     c3c:	5e                   	pop    %esic3c2292,76176
     c3d:	5f                   	pop    %edic3d2293,76220
     c3e:	5d                   	pop    %ebpc3e2294,76264
     c3f:	c3                   	ret    c3f2295,76308
     c40:	8b 45 08             	mov    0x8(%ebp),%eaxc402302,76444
     c43:	89 de                	mov    %ebx,%esic432309,76574
     c45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)c452316,76719
     c49:	8d 65 f4             	lea    -0xc(%ebp),%espc492319,76793
     c4c:	5b                   	pop    %ebxc4c2320,76848
     c4d:	5e                   	pop    %esic4d2321,76892
     c4e:	5f                   	pop    %edic4e2322,76936
     c4f:	5d                   	pop    %ebpc4f2323,76980
     c50:	c3                   	ret    c502324,77024
     c51:	eb 0d                	jmp    c60 <stat>c512325,77064
     c53:	90                   	nopc532326,77114
     c54:	90                   	nopc542327,77150
     c55:	90                   	nopc552328,77186
     c56:	90                   	nopc562329,77222
     c57:	90                   	nopc572330,77258
     c58:	90                   	nopc582331,77294
     c59:	90                   	nopc592332,77330
     c5a:	90                   	nopc5a2333,77366
     c5b:	90                   	nopc5b2334,77402
     c5c:	90                   	nopc5c2335,77438
     c5d:	90                   	nopc5d2336,77474
     c5e:	90                   	nopc5e2337,77510
     c5f:	90                   	nopc5f2338,77546
intint2342,77601
     c60:	55                   	push   %ebpc602345,77638
     c61:	89 e5                	mov    %esp,%ebpc612346,77682
     c63:	56                   	push   %esic632347,77731
     c64:	53                   	push   %ebxc642348,77775
  fd = open(n, O_RDONLY);fd2352,77839
     c65:	83 ec 08             	sub    $0x8,%espc652353,77865
     c68:	6a 00                	push   $0x0c682354,77914
     c6a:	ff 75 08             	pushl  0x8(%ebp)c6a2355,77958
     c6d:	e8 f0 00 00 00       	call   d62 <open>c6d2356,78007
     c72:	83 c4 10             	add    $0x10,%espc722358,78070
     c75:	85 c0                	test   %eax,%eaxc752359,78120
     c77:	78 27                	js     ca0 <stat+0x40>c772360,78169
  r = fstat(fd, st);r2362,78239
     c79:	83 ec 08             	sub    $0x8,%espc792363,78260
     c7c:	ff 75 0c             	pushl  0xc(%ebp)c7c2364,78309
     c7f:	89 c3                	mov    %eax,%ebxc7f2365,78358
     c81:	50                   	push   %eaxc812366,78407
     c82:	e8 f3 00 00 00       	call   d7a <fstat>c822367,78451
     c87:	89 c6                	mov    %eax,%esic872368,78502
     c89:	89 1c 24             	mov    %ebx,(%esp)c892370,78564
     c8c:	e8 b9 00 00 00       	call   d4a <close>c8c2371,78615
     c91:	83 c4 10             	add    $0x10,%espc912373,78678
     c94:	89 f0                	mov    %esi,%eaxc942374,78728
     c96:	8d 65 f8             	lea    -0x8(%ebp),%espc962376,78779
     c99:	5b                   	pop    %ebxc992377,78834
     c9a:	5e                   	pop    %esic9a2378,78878
     c9b:	5d                   	pop    %ebpc9b2379,78922
     c9c:	c3                   	ret    c9c2380,78966
     c9d:	8d 76 00             	lea    0x0(%esi),%esic9d2381,79006
  fd = open(n, O_RDONLY);fd2385,79080
     ca0:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxca02388,79134
     ca5:	eb ef                	jmp    c96 <stat+0x36>ca52389,79190
     ca7:	89 f6                	mov    %esi,%esica72390,79245
     ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edica92391,79294
intint2397,79388
     cb0:	55                   	push   %ebpcb02400,79414
     cb1:	89 e5                	mov    %esp,%ebpcb12401,79458
     cb3:	53                   	push   %ebxcb32402,79507
     cb4:	8b 4d 08             	mov    0x8(%ebp),%ecxcb42403,79551
  n = 0;n2406,79615
     cb7:	0f be 11             	movsbl (%ecx),%edxcb72408,79656
     cba:	8d 42 d0             	lea    -0x30(%edx),%eaxcba2409,79707
     cbd:	3c 09                	cmp    $0x9,%alcbd2410,79763
     cbf:	b8 00 00 00 00       	mov    $0x0,%eaxcbf2411,79811
     cc4:	77 1f                	ja     ce5 <atoi+0x35>cc42412,79860
     cc6:	8d 76 00             	lea    0x0(%esi),%esicc62413,79915
     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edicc92414,79969
    n = n*10 + *s++ - '0';n2415,80030
     cd0:	8d 04 80             	lea    (%eax,%eax,4),%eaxcd02416,80057
     cd3:	83 c1 01             	add    $0x1,%ecxcd32417,80115
     cd6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxcd62418,80164
  n = 0;n2423,80259
     cda:	0f be 11             	movsbl (%ecx),%edxcda2425,80300
     cdd:	8d 5a d0             	lea    -0x30(%edx),%ebxcdd2426,80351
     ce0:	80 fb 09             	cmp    $0x9,%blce02427,80407
     ce3:	76 eb                	jbe    cd0 <atoi+0x20>ce32428,80455
    n = n*10 + *s++ - '0';n2429,80510
     ce5:	5b                   	pop    %ebxce52432,80551
     ce6:	5d                   	pop    %ebpce62433,80595
     ce7:	c3                   	ret    ce72434,80639
     ce8:	90                   	nopce82435,80679
     ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esice92436,80715
     cf0:	55                   	push   %ebpcf02443,80845
     cf1:	89 e5                	mov    %esp,%ebpcf12444,80889
     cf3:	56                   	push   %esicf32445,80938
     cf4:	53                   	push   %ebxcf42446,80982
     cf5:	8b 5d 10             	mov    0x10(%ebp),%ebxcf52447,81026
     cf8:	8b 45 08             	mov    0x8(%ebp),%eaxcf82448,81081
     cfb:	8b 75 0c             	mov    0xc(%ebp),%esicfb2449,81135
  dst = vdst;dst2452,81209
  src = vsrc;src2453,81223
     cfe:	85 db                	test   %ebx,%ebxcfe2455,81254
     d00:	7e 14                	jle    d16 <memmove+0x26>d002456,81303
     d02:	31 d2                	xor    %edx,%edxd022457,81361
     d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esid042458,81410
     d08:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecxd082460,81492
     d0c:	88 0c 10             	mov    %cl,(%eax,%edx,1)d0c2461,81550
     d0f:	83 c2 01             	add    $0x1,%edxd0f2462,81607
  dst = vdst;dst2466,81678
  src = vsrc;src2467,81692
     d12:	39 da                	cmp    %ebx,%edxd122469,81723
     d14:	75 f2                	jne    d08 <memmove+0x18>d142470,81772
     d16:	5b                   	pop    %ebxd162474,81868
     d17:	5e                   	pop    %esid172475,81912
     d18:	5d                   	pop    %ebpd182476,81956
     d19:	c3                   	ret    d192477,82000
  name: \name2480,82058
     d1a:	b8 01 00 00 00       	mov    $0x1,%eaxd1a2486,82145
     d1f:	cd 40                	int    $0x40d1f2487,82194
     d21:	c3                   	ret    d212488,82239
     d22:	b8 02 00 00 00       	mov    $0x2,%eaxd222492,82311
     d27:	cd 40                	int    $0x40d272493,82360
     d29:	c3                   	ret    d292494,82405
     d2a:	b8 03 00 00 00       	mov    $0x3,%eaxd2a2498,82477
     d2f:	cd 40                	int    $0x40d2f2499,82526
     d31:	c3                   	ret    d312500,82571
     d32:	b8 04 00 00 00       	mov    $0x4,%eaxd322504,82643
     d37:	cd 40                	int    $0x40d372505,82692
     d39:	c3                   	ret    d392506,82737
     d3a:	b8 05 00 00 00       	mov    $0x5,%eaxd3a2510,82809
     d3f:	cd 40                	int    $0x40d3f2511,82858
     d41:	c3                   	ret    d412512,82903
     d42:	b8 10 00 00 00       	mov    $0x10,%eaxd422516,82977
     d47:	cd 40                	int    $0x40d472517,83027
     d49:	c3                   	ret    d492518,83072
     d4a:	b8 15 00 00 00       	mov    $0x15,%eaxd4a2522,83146
     d4f:	cd 40                	int    $0x40d4f2523,83196
     d51:	c3                   	ret    d512524,83241
     d52:	b8 06 00 00 00       	mov    $0x6,%eaxd522528,83313
     d57:	cd 40                	int    $0x40d572529,83362
     d59:	c3                   	ret    d592530,83407
     d5a:	b8 07 00 00 00       	mov    $0x7,%eaxd5a2534,83479
     d5f:	cd 40                	int    $0x40d5f2535,83528
     d61:	c3                   	ret    d612536,83573
     d62:	b8 0f 00 00 00       	mov    $0xf,%eaxd622540,83645
     d67:	cd 40                	int    $0x40d672541,83694
     d69:	c3                   	ret    d692542,83739
     d6a:	b8 11 00 00 00       	mov    $0x11,%eaxd6a2546,83813
     d6f:	cd 40                	int    $0x40d6f2547,83863
     d71:	c3                   	ret    d712548,83908
     d72:	b8 12 00 00 00       	mov    $0x12,%eaxd722552,83984
     d77:	cd 40                	int    $0x40d772553,84034
     d79:	c3                   	ret    d792554,84079
     d7a:	b8 08 00 00 00       	mov    $0x8,%eaxd7a2558,84153
     d7f:	cd 40                	int    $0x40d7f2559,84202
     d81:	c3                   	ret    d812560,84247
     d82:	b8 13 00 00 00       	mov    $0x13,%eaxd822564,84319
     d87:	cd 40                	int    $0x40d872565,84369
     d89:	c3                   	ret    d892566,84414
     d8a:	b8 14 00 00 00       	mov    $0x14,%eaxd8a2570,84488
     d8f:	cd 40                	int    $0x40d8f2571,84538
     d91:	c3                   	ret    d912572,84583
     d92:	b8 09 00 00 00       	mov    $0x9,%eaxd922576,84657
     d97:	cd 40                	int    $0x40d972577,84706
     d99:	c3                   	ret    d992578,84751
     d9a:	b8 0a 00 00 00       	mov    $0xa,%eaxd9a2582,84821
     d9f:	cd 40                	int    $0x40d9f2583,84870
     da1:	c3                   	ret    da12584,84915
     da2:	b8 0b 00 00 00       	mov    $0xb,%eaxda22588,84991
     da7:	cd 40                	int    $0x40da72589,85040
     da9:	c3                   	ret    da92590,85085
     daa:	b8 0c 00 00 00       	mov    $0xc,%eaxdaa2594,85157
     daf:	cd 40                	int    $0x40daf2595,85206
     db1:	c3                   	ret    db12596,85251
     db2:	b8 0d 00 00 00       	mov    $0xd,%eaxdb22600,85325
     db7:	cd 40                	int    $0x40db72601,85374
     db9:	c3                   	ret    db92602,85419
     dba:	b8 0e 00 00 00       	mov    $0xe,%eaxdba2606,85495
     dbf:	cd 40                	int    $0x40dbf2607,85544
     dc1:	c3                   	ret    dc12608,85589
     dc2:	b8 16 00 00 00       	mov    $0x16,%eaxdc22612,85659
     dc7:	cd 40                	int    $0x40dc72613,85709
     dc9:	c3                   	ret    dc92614,85754
     dca:	b8 17 00 00 00       	mov    $0x17,%eaxdca2618,85830
     dcf:	cd 40                	int    $0x40dcf2619,85880
     dd1:	c3                   	ret    dd12620,85925
     dd2:	66 90                	xchg   %ax,%axdd22621,85965
     dd4:	66 90                	xchg   %ax,%axdd42622,86012
     dd6:	66 90                	xchg   %ax,%axdd62623,86059
     dd8:	66 90                	xchg   %ax,%axdd82624,86106
     dda:	66 90                	xchg   %ax,%axdda2625,86153
     ddc:	66 90                	xchg   %ax,%axddc2626,86200
     dde:	66 90                	xchg   %ax,%axdde2627,86247
static voidstatic2633,86339
     de0:	55                   	push   %ebpde02636,86397
     de1:	89 e5                	mov    %esp,%ebpde12637,86441
     de3:	57                   	push   %edide32638,86490
     de4:	56                   	push   %eside42639,86534
     de5:	53                   	push   %ebxde52640,86578
     de6:	89 c6                	mov    %eax,%eside62641,86622
     de8:	83 ec 3c             	sub    $0x3c,%espde82642,86671
  neg = 0;neg2647,86762
     deb:	8b 5d 08             	mov    0x8(%ebp),%ebxdeb2649,86794
     dee:	85 db                	test   %ebx,%ebxdee2650,86848
     df0:	74 7e                	je     e70 <printint+0x90>df02651,86897
     df2:	89 d0                	mov    %edx,%eaxdf22652,86956
     df4:	c1 e8 1f             	shr    $0x1f,%eaxdf42653,87005
     df7:	84 c0                	test   %al,%aldf72654,87055
     df9:	74 75                	je     e70 <printint+0x90>df92655,87102
    neg = 1;neg2656,87161
    x = -xx;x2657,87174
     dfb:	89 d0                	mov    %edx,%eaxdfb2658,87187
  neg = 0;neg2662,87261
    neg = 1;neg2664,87293
     dfd:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)dfd2665,87306
    x = -xx;x2666,87362
     e04:	f7 d8                	neg    %eaxe042667,87375
     e06:	89 75 c0             	mov    %esi,-0x40(%ebp)e062668,87419
    x = xx;x2670,87486
  i = 0;i2673,87503
     e09:	31 ff                	xor    %edi,%edie092674,87512
     e0b:	8d 5d d7             	lea    -0x29(%ebp),%ebxe0b2675,87561
     e0e:	89 ce                	mov    %ecx,%esie0e2676,87617
     e10:	eb 08                	jmp    e1a <printint+0x3a>e102677,87666
     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esie122678,87725
     e18:	89 cf                	mov    %ecx,%edie182681,87818
     e1a:	31 d2                	xor    %edx,%edxe1a2682,87867
     e1c:	8d 4f 01             	lea    0x1(%edi),%ecxe1c2683,87916
     e1f:	f7 f6                	div    %esie1f2684,87970
     e21:	0f b6 92 90 12 00 00 	movzbl 0x1290(%edx),%edxe212685,88014
     e28:	85 c0                	test   %eax,%eaxe282687,88099
    x = xx;x2688,88148
  i = 0;i2691,88165
     e2a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)e2a2694,88213
     e2d:	75 e9                	jne    e18 <printint+0x38>e2d2696,88298
     e2f:	8b 45 c4             	mov    -0x3c(%ebp),%eaxe2f2698,88367
     e32:	8b 75 c0             	mov    -0x40(%ebp),%esie322699,88423
     e35:	85 c0                	test   %eax,%eaxe352700,88479
     e37:	74 08                	je     e41 <printint+0x61>e372701,88528
     e39:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)e392703,88607
     e3e:	8d 4f 02             	lea    0x2(%edi),%ecxe3e2704,88671
     e41:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edie412705,88725
     e45:	8d 76 00             	lea    0x0(%esi),%esie452706,88788
     e48:	0f b6 07             	movzbl (%edi),%eaxe482707,88842
static voidstatic2710,88912
     e4b:	83 ec 04             	sub    $0x4,%espe4b2714,88967
     e4e:	83 ef 01             	sub    $0x1,%edie4e2715,89016
     e51:	6a 01                	push   $0x1e512716,89065
     e53:	53                   	push   %ebxe532717,89109
     e54:	56                   	push   %esie542718,89153
     e55:	88 45 d7             	mov    %al,-0x29(%ebp)e552719,89197
     e58:	e8 e5 fe ff ff       	call   d42 <write>e582720,89252
     e5d:	83 c4 10             	add    $0x10,%espe5d2727,89413
     e60:	39 df                	cmp    %ebx,%edie602728,89463
     e62:	75 e4                	jne    e48 <printint+0x68>e622729,89512
     e64:	8d 65 f4             	lea    -0xc(%ebp),%espe642732,89595
     e67:	5b                   	pop    %ebxe672733,89650
     e68:	5e                   	pop    %esie682734,89694
     e69:	5f                   	pop    %edie692735,89738
     e6a:	5d                   	pop    %ebpe6a2736,89782
     e6b:	c3                   	ret    e6b2737,89826
     e6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie6c2738,89866
  neg = 0;neg2739,89927
    neg = 1;neg2741,89959
    x = -xx;x2742,89972
    x = xx;x2744,89996
     e70:	89 d0                	mov    %edx,%eaxe702745,90008
  neg = 0;neg2751,90143
     e72:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)e722752,90154
     e79:	eb 8b                	jmp    e06 <printint+0x26>e792753,90210
     e7b:	90                   	nope7b2754,90269
     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie7c2755,90305
voidvoid2761,90448
     e80:	55                   	push   %ebpe802764,90486
     e81:	89 e5                	mov    %esp,%ebpe812765,90530
     e83:	57                   	push   %edie832766,90579
     e84:	56                   	push   %esie842767,90623
     e85:	53                   	push   %ebxe852768,90667
  state = 0;state2772,90743
  ap = (uint*)(void*)&fmt + 1;ap2773,90756
     e86:	8d 45 10             	lea    0x10(%ebp),%eaxe862775,90814
voidvoid2779,90931
     e89:	83 ec 2c             	sub    $0x2c,%espe892782,90969
  state = 0;state2786,91051
  ap = (uint*)(void*)&fmt + 1;ap2787,91064
     e8c:	8b 75 0c             	mov    0xc(%ebp),%esie8c2789,91122
voidvoid2793,91238
     e8f:	8b 7d 08             	mov    0x8(%ebp),%edie8f2796,91276
  state = 0;state2800,91362
  ap = (uint*)(void*)&fmt + 1;ap2801,91375
     e92:	89 45 d0             	mov    %eax,-0x30(%ebp)e922803,91433
     e95:	0f b6 1e             	movzbl (%esi),%ebxe952804,91489
     e98:	83 c6 01             	add    $0x1,%esie982805,91540
     e9b:	84 db                	test   %bl,%ble9b2806,91589
     e9d:	0f 84 b0 00 00 00    	je     f53 <printf+0xd3>e9d2807,91636
     ea3:	31 d2                	xor    %edx,%edxea32808,91693
     ea5:	eb 39                	jmp    ee0 <printf+0x60>ea52809,91742
     ea7:	89 f6                	mov    %esi,%esiea72810,91799
     ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%ediea92811,91848
    c = fmt[i] & 0xff;c2812,91909
     eb0:	83 f8 25             	cmp    $0x25,%eaxeb02815,91972
     eb3:	89 55 d4             	mov    %edx,-0x2c(%ebp)eb32816,92022
        state = '%';state2817,92078
     eb6:	ba 25 00 00 00       	mov    $0x25,%edxeb62818,92099
  state = 0;state2819,92149
  ap = (uint*)(void*)&fmt + 1;ap2820,92162
    c = fmt[i] & 0xff;c2822,92220
     ebb:	74 18                	je     ed5 <printf+0x55>ebb2825,92283
static voidstatic2828,92359
     ebd:	8d 45 e2             	lea    -0x1e(%ebp),%eaxebd2832,92414
     ec0:	83 ec 04             	sub    $0x4,%espec02833,92470
     ec3:	88 5d e2             	mov    %bl,-0x1e(%ebp)ec32834,92519
     ec6:	6a 01                	push   $0x1ec62835,92574
     ec8:	50                   	push   %eaxec82836,92618
     ec9:	57                   	push   %ediec92837,92662
     eca:	e8 73 fe ff ff       	call   d42 <write>eca2838,92706
     ecf:	8b 55 d4             	mov    -0x2c(%ebp),%edxecf2839,92757
     ed2:	83 c4 10             	add    $0x10,%esped22840,92813
     ed5:	83 c6 01             	add    $0x1,%esied52841,92863
  state = 0;state2845,92944
  ap = (uint*)(void*)&fmt + 1;ap2846,92957
     ed8:	0f b6 5e ff          	movzbl -0x1(%esi),%ebxed82848,93015
     edc:	84 db                	test   %bl,%bledc2849,93070
     ede:	74 73                	je     f53 <printf+0xd3>ede2850,93117
    c = fmt[i] & 0xff;c2851,93174
     ee0:	85 d2                	test   %edx,%edxee02853,93217
  state = 0;state2856,93279
  ap = (uint*)(void*)&fmt + 1;ap2857,93292
    c = fmt[i] & 0xff;c2859,93350
     ee2:	0f be cb             	movsbl %bl,%ecxee22860,93373
     ee5:	0f b6 c3             	movzbl %bl,%eaxee52861,93421
     ee8:	74 c6                	je     eb0 <printf+0x30>ee82863,93489
        state = '%';state2865,93566
     eea:	83 fa 25             	cmp    $0x25,%edxeea2870,93660
     eed:	75 e6                	jne    ed5 <printf+0x55>eed2871,93710
     eef:	83 f8 64             	cmp    $0x64,%eaxeef2873,93787
     ef2:	0f 84 f8 00 00 00    	je     ff0 <printf+0x170>ef22874,93837
     ef8:	81 e1 f7 00 00 00    	and    $0xf7,%ecxef82878,93982
     efe:	83 f9 70             	cmp    $0x70,%ecxefe2879,94032
     f01:	74 5d                	je     f60 <printf+0xe0>f012880,94082
     f03:	83 f8 73             	cmp    $0x73,%eaxf032884,94214
     f06:	0f 84 84 00 00 00    	je     f90 <printf+0x110>f062885,94264
          s = "(null)";s2886,94322
     f0c:	83 f8 63             	cmp    $0x63,%eaxf0c2892,94446
     f0f:	0f 84 ea 00 00 00    	je     fff <printf+0x17f>f0f2893,94496
     f15:	83 f8 25             	cmp    $0x25,%eaxf152897,94618
     f18:	0f 84 c2 00 00 00    	je     fe0 <printf+0x160>f182898,94668
static voidstatic2901,94745
     f1e:	8d 45 e7             	lea    -0x19(%ebp),%eaxf1e2905,94800
     f21:	83 ec 04             	sub    $0x4,%espf212906,94856
     f24:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)f242907,94905
     f28:	6a 01                	push   $0x1f282908,94962
     f2a:	50                   	push   %eaxf2a2909,95006
     f2b:	57                   	push   %edif2b2910,95050
     f2c:	e8 11 fe ff ff       	call   d42 <write>f2c2911,95094
     f31:	83 c4 0c             	add    $0xc,%espf312912,95145
     f34:	8d 45 e6             	lea    -0x1a(%ebp),%eaxf342913,95194
     f37:	88 5d e6             	mov    %bl,-0x1a(%ebp)f372914,95250
     f3a:	6a 01                	push   $0x1f3a2915,95305
     f3c:	50                   	push   %eaxf3c2916,95349
     f3d:	57                   	push   %edif3d2917,95393
     f3e:	83 c6 01             	add    $0x1,%esif3e2918,95437
     f41:	e8 fc fd ff ff       	call   d42 <write>f412919,95486
  state = 0;state2923,95569
  ap = (uint*)(void*)&fmt + 1;ap2924,95582
     f46:	0f b6 5e ff          	movzbl -0x1(%esi),%ebxf462926,95640
static voidstatic2929,95714
     f4a:	83 c4 10             	add    $0x10,%espf4a2933,95769
      state = 0;state2939,95946
     f4d:	31 d2                	xor    %edx,%edxf4d2940,95963
  state = 0;state2944,96044
  ap = (uint*)(void*)&fmt + 1;ap2945,96057
     f4f:	84 db                	test   %bl,%blf4f2947,96115
     f51:	75 8d                	jne    ee0 <printf+0x60>f512948,96162
      state = 0;state2951,96248
     f53:	8d 65 f4             	lea    -0xc(%ebp),%espf532955,96277
     f56:	5b                   	pop    %ebxf562956,96332
     f57:	5e                   	pop    %esif572957,96376
     f58:	5f                   	pop    %edif582958,96420
     f59:	5d                   	pop    %ebpf592959,96464
     f5a:	c3                   	ret    f5a2960,96508
     f5b:	90                   	nopf5b2961,96548
     f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif5c2962,96584
     f60:	83 ec 0c             	sub    $0xc,%espf602969,96815
     f63:	b9 10 00 00 00       	mov    $0x10,%ecxf632970,96864
     f68:	6a 00                	push   $0x0f682971,96914
     f6a:	8b 5d d0             	mov    -0x30(%ebp),%ebxf6a2972,96958
     f6d:	89 f8                	mov    %edi,%eaxf6d2973,97014
     f6f:	8b 13                	mov    (%ebx),%edxf6f2974,97063
     f71:	e8 6a fe ff ff       	call   de0 <printint>f712975,97114
     f76:	89 d8                	mov    %ebx,%eaxf762977,97182
     f78:	83 c4 10             	add    $0x10,%espf782978,97231
      state = 0;state2984,97408
     f7b:	31 d2                	xor    %edx,%edxf7b2985,97425
     f7d:	83 c0 04             	add    $0x4,%eaxf7d2992,97629
     f80:	89 45 d0             	mov    %eax,-0x30(%ebp)f802993,97678
     f83:	e9 4d ff ff ff       	jmp    ed5 <printf+0x55>f832994,97734
     f88:	90                   	nopf882995,97791
     f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif892996,97827
        s = (char*)*ap;s2998,97915
     f90:	8b 45 d0             	mov    -0x30(%ebp),%eaxf902999,97939
     f93:	8b 18                	mov    (%eax),%ebxf933000,97995
     f95:	83 c0 04             	add    $0x4,%eaxf953002,98060
     f98:	89 45 d0             	mov    %eax,-0x30(%ebp)f983003,98109
          s = "(null)";s3005,98184
     f9b:	b8 88 12 00 00       	mov    $0x1288,%eaxf9b3006,98208
     fa0:	85 db                	test   %ebx,%ebxfa03007,98260
     fa2:	0f 44 d8             	cmove  %eax,%ebxfa23008,98309
     fa5:	0f b6 03             	movzbl (%ebx),%eaxfa53010,98382
     fa8:	84 c0                	test   %al,%alfa83011,98433
     faa:	74 23                	je     fcf <printf+0x14f>faa3012,98480
     fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esifac3013,98538
     fb0:	88 45 e3             	mov    %al,-0x1d(%ebp)fb03014,98599
static voidstatic3017,98673
     fb3:	8d 45 e3             	lea    -0x1d(%ebp),%eaxfb33021,98728
     fb6:	83 ec 04             	sub    $0x4,%espfb63022,98784
     fb9:	6a 01                	push   $0x1fb93023,98833
          s = "(null)";s3026,98910
     fbb:	83 c3 01             	add    $0x1,%ebxfbb3030,98997
static voidstatic3033,99065
     fbe:	50                   	push   %eaxfbe3037,99120
     fbf:	57                   	push   %edifbf3038,99164
     fc0:	e8 7d fd ff ff       	call   d42 <write>fc03039,99208
        s = (char*)*ap;s3041,99286
          s = "(null)";s3044,99343
     fc5:	0f b6 03             	movzbl (%ebx),%eaxfc53046,99391
     fc8:	83 c4 10             	add    $0x10,%espfc83047,99442
     fcb:	84 c0                	test   %al,%alfcb3048,99492
     fcd:	75 e1                	jne    fb0 <printf+0x130>fcd3049,99539
      state = 0;state3055,99724
     fcf:	31 d2                	xor    %edx,%edxfcf3056,99741
     fd1:	e9 ff fe ff ff       	jmp    ed5 <printf+0x55>fd13057,99790
     fd6:	8d 76 00             	lea    0x0(%esi),%esifd63058,99847
     fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edifd93059,99901
static voidstatic3062,99981
     fe0:	83 ec 04             	sub    $0x4,%espfe03066,100036
     fe3:	88 5d e5             	mov    %bl,-0x1b(%ebp)fe33067,100085
     fe6:	8d 45 e5             	lea    -0x1b(%ebp),%eaxfe63068,100140
     fe9:	6a 01                	push   $0x1fe93069,100196
     feb:	e9 4c ff ff ff       	jmp    f3c <printf+0xbc>feb3070,100240
     ff0:	83 ec 0c             	sub    $0xc,%espff03077,100424
     ff3:	b9 0a 00 00 00       	mov    $0xa,%ecxff33078,100473
     ff8:	6a 01                	push   $0x1ff83079,100522
     ffa:	e9 6b ff ff ff       	jmp    f6a <printf+0xea>ffa3080,100566
     fff:	8b 5d d0             	mov    -0x30(%ebp),%ebxfff3081,100623
static voidstatic3084,100698
static Header base;static3102,101352
static Header *freep;static3103,101372
voidvoid3105,101395
  bp = (Header*)ap - 1;bp3111,101480
static Header base;static3114,101614
static Header *freep;static3115,101634
voidvoid3117,101657
  bp = (Header*)ap - 1;bp3127,101933
voidvoid3131,102118
  bp = (Header*)ap - 1;bp3136,102159
static Header base;static3148,102773
static Header *freep;static3149,102793
voidvoid3151,102816
  bp = (Header*)ap - 1;bp3157,102906
  bp = (Header*)ap - 1;bp3166,103176
  freep = p;freep3197,104476
  bp = (Header*)ap - 1;bp3205,104758
  freep = p;freep3229,105692
  freep = p;freep3243,106130
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits3268,106775
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits3277,107028
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits3302,108215
      freep = prevp;freep3315,108698
    nu = 4096;nu3326,108973
  p = sbrk(nu * sizeof(Header));p3327,108988
  hp = (Header*)p;hp3336,109363
      freep = prevp;freep3347,109748
      freep = prevp;freep3377,110837
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits3405,111711

spinlock.c,309
initlock(struct spinlock *lk, char *name)initlock13,192
acquire(struct spinlock *lk)acquire25,458
release(struct spinlock *lk)release47,1000
getcallerpcs(void *v, uint pcs[])getcallerpcs72,1774
holding(struct spinlock *lock)holding90,2138
pushcli(void)pushcli101,2408
popcli(void)popcli113,2566

usys.S,57
#define SYSCALL(name) \SYSCALL4,41
  name: \name6,82

usertests.c,1674
char buf[8192];buf11,173
char name[3];name12,189
char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };echoargv13,203
int stdout = 1;stdout14,263
iputtest(void)iputtest18,337
exitiputtest(void)exitiputtest43,831
openiputtest(void)openiputtest85,1688
opentest(void)opentest119,2277
writetest(void)writetest139,2609
writetest1(void)writetest1188,3681
createtest(void)createtest245,4745
void dirtest(void)dirtest267,5152
exectest(void)exectest294,5585
pipe1(void)pipe1306,5771
preempt(void)preempt359,6798
exitwait(void)exitwait405,7516
mem(void)mem428,7841
sharedfd(void)sharedfd465,8476
fourfiles(void)fourfiles518,9579
createdelete(void)createdelete584,10824
unlinkread(void)unlinkread657,12295
linktest(void)linktest702,13157
concreate(void)concreate765,14254
linkunlink()linkunlink858,16066
bigdir(void)bigdir893,16603
subdir(void)subdir935,17306
bigwrite(void)bigwrite1119,21172
bigfile(void)bigfile1148,21682
fourteen(void)fourteen1204,22695
rmdot(void)rmdot1245,23700
dirfile(void)dirfile1284,24419
iref(void)iref1344,25624
forktest(void)forktest1380,26347
sbrktest(void)sbrktest1415,26824
#define BIG BIG1452,27530
validateint(int *p)validateint1550,29814
validatetest(void)validatetest1563,30039
char uninit[10000];uninit1593,30651
bsstest(void)bsstest1595,30676
bigargtest(void)bigargtest1613,31052
fsfull()fsfull1648,32005
uio()uio1699,33040
  #define RTC_ADDR RTC_ADDR1701,33048
  #define RTC_DATA RTC_DATA1702,33072
void argptest()argptest1727,33622
unsigned long randstate = 1;randstate1740,33824
rand()rand1742,33866
main(int argc, char *argv[])main1749,33950

mp.h,2444
struct mp {             // floating pointermp3,52
  uchar signature[4];           // "_MP_"signature4,96
  void *physaddr;               // phys addr of MP config tablephysaddr5,138
  uchar length;                 // 1length6,202
  uchar specrev;                // [14]specrev7,239
  uchar checksum;               // all bytes must add up to 0checksum8,279
  uchar type;                   // MP system config typetype9,341
  uchar imcrp;imcrp10,398
  uchar reserved[3];reserved11,413
struct mpconf {         // configuration table headermpconf14,438
  uchar signature[4];           // "PCMP"signature15,492
  ushort length;                // total table lengthlength16,534
  uchar version;                // [14]version17,588
  uchar checksum;               // all bytes must add up to 0checksum18,628
  uchar product[20];            // product idproduct19,690
  uint *oemtable;               // OEM table pointeroemtable20,736
  ushort oemlength;             // OEM table lengthoemlength21,789
  ushort entry;                 // entry countentry22,841
  uint *lapicaddr;              // address of local APIClapicaddr23,888
  ushort xlength;               // extended table lengthxlength24,945
  uchar xchecksum;              // extended table checksumxchecksum25,1002
  uchar reserved;reserved26,1061
struct mpproc {         // processor table entrympproc29,1083
  uchar type;                   // entry type (0)type30,1132
  uchar apicid;                 // local APIC idapicid31,1182
  uchar version;                // local APIC verisonversion32,1231
  uchar flags;                  // CPU flagsflags33,1285
    #define MPBOOT MPBOOT34,1330
  uchar signature[4];           // CPU signaturesignature35,1405
  uint feature;                 // feature flags from CPUID instructionfeature36,1454
  uchar reserved[8];reserved37,1526
struct mpioapic {       // I/O APIC table entrympioapic40,1551
  uchar type;                   // entry type (2)type41,1599
  uchar apicno;                 // I/O APIC idapicno42,1649
  uchar version;                // I/O APIC versionversion43,1696
  uchar flags;                  // I/O APIC flagsflags44,1748
  uint *addr;                  // I/O APIC addressaddr45,1798
#define MPPROC MPPROC49,1874
#define MPBUS MPBUS50,1919
#define MPIOAPIC MPIOAPIC51,1958
#define MPIOINTR MPIOINTR52,2002
#define MPLINTR MPLINTR53,2058

trapasm.S,48
alltraps:alltraps5,70
trapret:trapret25,378

cuth,34
sub writefile($@){writefile5,26

proc.c,886
  struct spinlock lock;lock11,163
  struct proc proc[NPROC];proc12,187
} ptable;ptable13,214
static struct proc *initproc;initproc15,225
int nextpid = 1;nextpid17,256
pinit(void)pinit27,404
cpuid() {cpuid34,504
mycpu(void)mycpu41,690
myproc(void) {myproc61,1195
allocproc(void)allocproc77,1514
int alloc_test_local(struct proc *p) {alloc_test_local135,2503
userinit(void)userinit150,2694
growproc(int n)growproc188,3713
fork(void)fork210,4201
exit(void)exit273,5366
wait(void)wait319,6267
scheduler(void)scheduler370,7542
sched(void)sched413,8646
yield(void)yield433,9080
forkret(void)forkret444,9311
sleep(void *chan, struct spinlock *lk)sleep465,9808
wakeup1(void *chan)wakeup1505,10650
wakeup(void *chan)wakeup516,10870
kill(int pid)kill527,11083
procdump(void)procdump551,11612
cps(void)cps584,12328
plocal(void)plocal610,13058

stressfs.c,41
main(int argc, char *argv[])main17,466

log.c,798
struct logheader {logheader34,1129
  int n;n35,1148
  int block[LOGSIZE];block36,1157
struct log {log39,1183
  struct spinlock lock;lock40,1196
  int start;start41,1220
  int size;size42,1233
  int outstanding; // how many FS sys calls are executing.outstanding43,1245
  int committing;  // in commit(), please wait.committing44,1304
  int dev;dev45,1352
  struct logheader lh;lh46,1363
struct log log;log48,1389
initlog(int dev)initlog54,1470
install_trans(void)install_trans70,1806
read_head(void)read_head86,2255
write_head(void)write_head102,2623
recover_from_log(void)recover_from_log116,2897
begin_op(void)begin_op126,3099
end_op(void)end_op146,3560
write_log(void)write_log178,4226
commit()commit193,4572
log_write(struct buf *b)log_write214,5187

mkdir.c,39
main(int argc, char *argv[])main6,60

file.c,468
struct devsw devsw[NDEV];devsw13,163
  struct spinlock lock;lock15,198
  struct file file[NFILE];file16,222
} ftable;ftable17,249
fileinit(void)fileinit20,265
filealloc(void)filealloc27,364
filedup(struct file *f)filedup45,662
fileclose(struct file *f)fileclose57,872
filestat(struct file *f, struct stat *st)filestat84,1302
fileread(struct file *f, char *addr, int n)fileread97,1492
filewrite(struct file *f, char *addr, int n)filewrite118,1861

show1,0

wc.c,96
char buf[512];buf5,56
wc(int fd, char *name)wc8,77
main(int argc, char *argv[])main36,538

cat.c,86
char buf[512];buf5,56
cat(int fd)cat8,77
main(int argc, char *argv[])main25,317

proc.h,2576
struct cpu {cpu2,17
  uchar apicid;                // Local APIC IDapicid3,30
  struct context *scheduler;   // swtch() here to enter schedulerscheduler4,78
  struct taskstate ts;         // Used by x86 to find stack for interruptts5,144
  struct segdesc gdt[NSEGS];   // x86 global descriptor tablegdt6,218
  volatile uint started;       // Has the CPU started?started7,280
  int ncli;                    // Depth of pushcli nesting.ncli8,335
  int intena;                  // Were interrupts enabled before pushcli?intena9,395
  struct proc *proc;           // The process running on this cpu or nullproc10,469
struct context {context27,1195
  uint edi;edi28,1212
  uint esi;esi29,1224
  uint ebx;ebx30,1236
  uint ebp;ebp31,1248
  uint eip;eip32,1260
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };procstate35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };UNUSED35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };EMBRYO35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };SLEEPING35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };RUNNABLE35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };RUNNING35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };ZOMBIE35,1276
struct test_local {test_local38,1376
  int pid;pid39,1396
  int ppid;ppid40,1407
struct test_global {test_global45,1451
  int pid;pid46,1472
  int ppid;ppid47,1483
struct proc {proc54,1523
  uint sz;                     // Size of process memory (bytes)sz55,1537
  pde_t* pgdir;                // Page tablepgdir56,1602
  char *kstack;                // Bottom of kernel stack for this processkstack57,1647
  enum procstate state;        // Process statestate58,1721
  int pid;                     // Process IDpid59,1769
  struct proc *parent;         // Parent processparent60,1814
  struct trapframe *tf;        // Trap frame for current syscalltf61,1863
  struct context *context;     // swtch() here to run processcontext62,1928
  void *chan;                  // If non-zero, sleeping on chanchan63,1990
  int killed;                  // If non-zero, have been killedkilled64,2054
  struct file *ofile[NOFILE];  // Open filesofile65,2118
  struct inode *cwd;           // Current directorycwd66,2163
  char name[16];               // Process name (debugging)name67,2215
  struct test_local *tl;       // add test localtl68,2274

kill.asm,6527
_kill:     file format elf32-i386_kill2,1
Disassembly of section .text:Disassembly5,37
intint11,122
   a:	55                   	push   %ebpa17,304
   b:	89 e5                	mov    %esp,%ebpb18,344
   d:	57                   	push   %edid19,389
   e:	56                   	push   %esie20,429
   f:	53                   	push   %ebxf21,469
  os = s;os94,2532
intint115,3216
  a1:	84 c0                	test   %al,%ala1127,3642
  a3:	75 1e                	jne    c3 <strcmp+0x33>a3128,3685
  a5:	eb 29                	jmp    d0 <strcmp+0x40>a5129,3737
  a7:	89 f6                	mov    %esi,%esia7130,3789
  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia9131,3834
  b0:	83 c2 01             	add    $0x1,%edxb0133,3905
intint136,3953
  b3:	0f b6 02             	movzbl (%edx),%eaxb3140,4020
  b6:	8d 71 01             	lea    0x1(%ecx),%esib6142,4081
intint145,4134
  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxb9149,4201
  bd:	84 c0                	test   %al,%albd150,4251
  bf:	74 0f                	je     d0 <strcmp+0x40>bf151,4294
  c1:	89 f1                	mov    %esi,%ecxc1152,4346
  c3:	38 d8                	cmp    %bl,%alc3153,4391
  c5:	74 e9                	je     b0 <strcmp+0x20>c5154,4434
  c7:	29 d8                	sub    %ebx,%eaxc7157,4532
  c9:	5b                   	pop    %ebxc9159,4579
  ca:	5e                   	pop    %esica160,4619
  cb:	5d                   	pop    %ebpcb161,4659
  cc:	c3                   	ret    cc162,4699
  cd:	8d 76 00             	lea    0x0(%esi),%esicd163,4735
intint166,4788
  d0:	31 c0                	xor    %eax,%eaxd0170,4855
  d2:	29 d8                	sub    %ebx,%eaxd2173,4946
  d4:	5b                   	pop    %ebxd4175,4993
  d5:	5e                   	pop    %esid5176,5033
  d6:	5d                   	pop    %ebpd6177,5073
  d7:	c3                   	ret    d7178,5113
  d8:	90                   	nopd8179,5149
  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esid9180,5181
uintuint184,5259
  e0:	55                   	push   %ebpe0187,5282
  e1:	89 e5                	mov    %esp,%ebpe1188,5322
  e3:	8b 4d 08             	mov    0x8(%ebp),%ecxe3189,5367
  e6:	80 39 00             	cmpb   $0x0,(%ecx)e6193,5451
  e9:	74 12                	je     fd <strlen+0x1d>e9194,5498
  eb:	31 d2                	xor    %edx,%edxeb195,5550
  ed:	8d 76 00             	lea    0x0(%esi),%esied196,5595
  f0:	83 c2 01             	add    $0x1,%edxf0197,5645
  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)f3198,5690
  f7:	89 d0                	mov    %edx,%eaxf7199,5744
  f9:	75 f5                	jne    f0 <strlen+0x10>f9200,5789
  fb:	5d                   	pop    %ebpfb204,5861
  fc:	c3                   	ret    fc205,5901
uintuint206,5937
  fd:	31 c0                	xor    %eax,%eaxfd212,5994
  ff:	5d                   	pop    %ebpff216,6059
static inline voidstatic244,6839
    cc = read(0, &c, 1);cc321,9189
    cc = read(0, &c, 1);cc335,9460
    cc = read(0, &c, 1);cc354,10132
intint434,12288
  fd = open(n, O_RDONLY);fd444,12510
  r = fstat(fd, st);r454,12882
  fd = open(n, O_RDONLY);fd477,13659
intint489,13951
  n = 0;n498,14162
    n = n*10 + *s++ - '0';n507,14549
  n = 0;n515,14766
    n = n*10 + *s++ - '0';n521,15001
  dst = vdst;dst544,15652
  src = vsrc;src545,15666
  dst = vdst;dst558,16093
  src = vsrc;src559,16107
  name: \name572,16449
static voidstatic725,20426
  neg = 0;neg739,20821
    neg = 1;neg748,21192
    x = -xx;x749,21205
  neg = 0;neg754,21288
    neg = 1;neg756,21320
    x = -xx;x758,21385
    x = xx;x762,21501
  i = 0;i765,21518
    x = xx;x780,22118
  i = 0;i783,22135
static voidstatic802,22838
  neg = 0;neg831,23785
    neg = 1;neg833,23817
    x = -xx;x834,23830
    x = xx;x836,23854
  neg = 0;neg843,23997
voidvoid853,24286
  state = 0;state864,24561
  ap = (uint*)(void*)&fmt + 1;ap865,24574
voidvoid871,24745
  state = 0;state878,24861
  ap = (uint*)(void*)&fmt + 1;ap879,24874
voidvoid885,25044
  state = 0;state892,25164
  ap = (uint*)(void*)&fmt + 1;ap893,25177
    c = fmt[i] & 0xff;c904,25675
        state = '%';state909,25836
  state = 0;state911,25903
  ap = (uint*)(void*)&fmt + 1;ap912,25916
    c = fmt[i] & 0xff;c914,25974
static voidstatic920,26109
  state = 0;state937,26654
  ap = (uint*)(void*)&fmt + 1;ap938,26667
    c = fmt[i] & 0xff;c943,26872
  state = 0;state948,26973
  ap = (uint*)(void*)&fmt + 1;ap949,26986
    c = fmt[i] & 0xff;c951,27044
        state = '%';state957,27248
          s = "(null)";s978,27968
static voidstatic993,28375
  state = 0;state1015,29139
  ap = (uint*)(void*)&fmt + 1;ap1016,29152
static voidstatic1021,29280
      state = 0;state1031,29508
  state = 0;state1036,29602
  ap = (uint*)(void*)&fmt + 1;ap1037,29615
      state = 0;state1043,29798
      state = 0;state1076,30890
        s = (char*)*ap;s1090,31373
          s = "(null)";s1097,31626
static voidstatic1109,32082
          s = "(null)";s1118,32307
static voidstatic1125,32458
        s = (char*)*ap;s1133,32667
          s = "(null)";s1136,32724
      state = 0;state1147,33089
static voidstatic1154,33330
static voidstatic1176,34007
static Header base;static1194,34613
static Header *freep;static1195,34633
voidvoid1197,34656
  bp = (Header*)ap - 1;bp1203,34737
static Header base;static1206,34866
static Header *freep;static1207,34886
voidvoid1209,34909
  bp = (Header*)ap - 1;bp1219,35165
voidvoid1223,35346
  bp = (Header*)ap - 1;bp1228,35387
static Header base;static1240,35962
static Header *freep;static1241,35982
voidvoid1243,36005
  bp = (Header*)ap - 1;bp1249,36091
  bp = (Header*)ap - 1;bp1258,36353
  freep = p;freep1289,37580
  bp = (Header*)ap - 1;bp1297,37837
  freep = p;freep1321,38730
  freep = p;freep1335,39151
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1360,39748
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1369,39992
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1394,41104
      freep = prevp;freep1407,41570
    nu = 4096;nu1418,41831
  p = sbrk(nu * sizeof(Header));p1419,41846
  hp = (Header*)p;hp1428,42196
      freep = prevp;freep1439,42555
      freep = prevp;freep1469,43593
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1497,44421

defs.h,30
#define NELEM(NELEM202,5872

grep.asm,7324
_grep:     file format elf32-i386_grep2,1
Disassembly of section .text:Disassembly5,37
intint11,92
   a:	55                   	push   %ebpa17,275
   b:	89 e5                	mov    %esp,%ebpb18,315
   d:	57                   	push   %edid19,360
   e:	56                   	push   %esie20,400
   f:	53                   	push   %ebxf21,440
intint34,763
  pattern = argv[1];pattern46,1015
  pattern = argv[1];pattern58,1331
  pattern = argv[1];pattern133,3449
  a0:	e8 1b 06 00 00       	call   6c0 <printf>a0154,4037
  a5:	e8 b8 04 00 00       	call   562 <exit>a5156,4097
  aa:	66 90                	xchg   %ax,%axaa157,4143
  ac:	66 90                	xchg   %ax,%axac158,4186
  ae:	66 90                	xchg   %ax,%axae159,4229
int matchstar(int c, char *re, char *text)int166,4361
  b0:	55                   	push   %ebpb0168,4406
  b1:	89 e5                	mov    %esp,%ebpb1169,4446
  b3:	57                   	push   %edib3170,4491
  b4:	56                   	push   %esib4171,4531
  b5:	53                   	push   %ebxb5172,4571
  b6:	83 ec 0c             	sub    $0xc,%espb6173,4611
  b9:	8b 75 08             	mov    0x8(%ebp),%esib9174,4656
  bc:	8b 7d 0c             	mov    0xc(%ebp),%edibc175,4706
  bf:	8b 5d 10             	mov    0x10(%ebp),%ebxbf176,4756
  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esic2177,4807
  c8:	83 ec 08             	sub    $0x8,%espc8180,4930
  cb:	53                   	push   %ebxcb181,4975
  cc:	57                   	push   %edicc182,5015
  cd:	e8 3e 00 00 00       	call   110 <matchhere>cd183,5055
  d2:	83 c4 10             	add    $0x10,%espd2184,5106
  d5:	85 c0                	test   %eax,%eaxd5185,5152
  d7:	75 1f                	jne    f8 <matchstar+0x48>d7186,5197
  d9:	0f be 13             	movsbl (%ebx),%edxd9189,5317
  dc:	84 d2                	test   %dl,%dldc190,5364
  de:	74 0c                	je     ec <matchstar+0x3c>de191,5407
  e0:	83 c3 01             	add    $0x1,%ebxe0192,5462
  e3:	83 fe 2e             	cmp    $0x2e,%esie3193,5507
  e6:	74 e0                	je     c8 <matchstar+0x18>e6194,5553
  e8:	39 f2                	cmp    %esi,%edxe8195,5608
  ea:	74 dc                	je     c8 <matchstar+0x18>ea196,5653
  ec:	8d 65 f4             	lea    -0xc(%ebp),%espec199,5722
  ef:	5b                   	pop    %ebxef200,5773
  f0:	5e                   	pop    %esif0201,5813
  f1:	5f                   	pop    %edif1202,5853
  f2:	5d                   	pop    %ebpf2203,5893
  f3:	c3                   	ret    f3204,5933
  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif4205,5969
  f8:	8d 65 f4             	lea    -0xc(%ebp),%espf8206,6026
int matchstar(int c, char *re, char *text)int208,6128
  fb:	b8 01 00 00 00       	mov    $0x1,%eaxfb213,6262
int matchhere(char *re, char *text)int230,6767
int matchhere(char *re, char *text)int271,8427
int matchhere(char *re, char *text)int304,9734
int matchhere(char *re, char *text)int340,11010
int matchhere(char*, char*);int378,12263
int matchstar(int, char*, char*);int379,12292
intint381,12327
intint427,13912
intint445,14387
char buf[1024];char454,14575
int match(char*, char*);int455,14591
voidvoid457,14617
  m = 0;m470,14981
    p = buf;p490,15821
  m = 0;m495,15909
    p = buf;p502,16156
    p = buf;p518,16740
      p = q+1;p548,17945
      m = 0;m553,18081
      p = q+1;p562,18393
      m = 0;m565,18431
      p = q+1;p581,18994
      m = 0;m584,19032
  os = s;os620,20053
intint641,20738
intint662,21477
intint671,21658
intint692,22314
uintuint710,22785
uintuint732,23465
static inline voidstatic770,24367
    cc = read(0, &c, 1);cc847,26717
    cc = read(0, &c, 1);cc861,26988
    cc = read(0, &c, 1);cc880,27660
intint960,29816
  fd = open(n, O_RDONLY);fd970,30038
  r = fstat(fd, st);r980,30410
  fd = open(n, O_RDONLY);fd1003,31187
intint1015,31479
  n = 0;n1024,31690
    n = n*10 + *s++ - '0';n1033,32077
  n = 0;n1041,32294
    n = n*10 + *s++ - '0';n1047,32529
  dst = vdst;dst1070,33180
  src = vsrc;src1071,33194
  dst = vdst;dst1084,33621
  src = vsrc;src1085,33635
  name: \name1098,33977
static voidstatic1251,37954
  neg = 0;neg1265,38349
    neg = 1;neg1274,38720
    x = -xx;x1275,38733
  neg = 0;neg1280,38816
    neg = 1;neg1282,38848
    x = -xx;x1284,38913
    x = xx;x1288,39029
  i = 0;i1291,39046
    x = xx;x1306,39646
  i = 0;i1309,39663
static voidstatic1328,40366
  neg = 0;neg1357,41313
    neg = 1;neg1359,41345
    x = -xx;x1360,41358
    x = xx;x1362,41382
  neg = 0;neg1369,41525
voidvoid1379,41814
  state = 0;state1390,42089
  ap = (uint*)(void*)&fmt + 1;ap1391,42102
voidvoid1397,42273
  state = 0;state1404,42389
  ap = (uint*)(void*)&fmt + 1;ap1405,42402
voidvoid1411,42572
  state = 0;state1418,42692
  ap = (uint*)(void*)&fmt + 1;ap1419,42705
    c = fmt[i] & 0xff;c1430,43203
        state = '%';state1435,43364
  state = 0;state1437,43431
  ap = (uint*)(void*)&fmt + 1;ap1438,43444
    c = fmt[i] & 0xff;c1440,43502
static voidstatic1446,43637
  state = 0;state1463,44182
  ap = (uint*)(void*)&fmt + 1;ap1464,44195
    c = fmt[i] & 0xff;c1469,44400
  state = 0;state1474,44501
  ap = (uint*)(void*)&fmt + 1;ap1475,44514
    c = fmt[i] & 0xff;c1477,44572
        state = '%';state1483,44776
          s = "(null)";s1504,45496
static voidstatic1519,45903
  state = 0;state1541,46667
  ap = (uint*)(void*)&fmt + 1;ap1542,46680
static voidstatic1547,46808
      state = 0;state1557,47036
  state = 0;state1562,47130
  ap = (uint*)(void*)&fmt + 1;ap1563,47143
      state = 0;state1569,47326
      state = 0;state1602,48418
        s = (char*)*ap;s1616,48901
          s = "(null)";s1623,49154
static voidstatic1635,49610
          s = "(null)";s1644,49835
static voidstatic1651,49986
        s = (char*)*ap;s1659,50195
          s = "(null)";s1662,50252
      state = 0;state1673,50617
static voidstatic1680,50858
static voidstatic1702,51535
static Header base;static1720,52141
static Header *freep;static1721,52161
voidvoid1723,52184
  bp = (Header*)ap - 1;bp1729,52265
static Header base;static1732,52394
static Header *freep;static1733,52414
voidvoid1735,52437
  bp = (Header*)ap - 1;bp1745,52693
voidvoid1749,52874
  bp = (Header*)ap - 1;bp1754,52915
static Header base;static1766,53490
static Header *freep;static1767,53510
voidvoid1769,53533
  bp = (Header*)ap - 1;bp1775,53619
  bp = (Header*)ap - 1;bp1784,53881
  freep = p;freep1815,55108
  bp = (Header*)ap - 1;bp1823,55365
  freep = p;freep1847,56258
  freep = p;freep1861,56679
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1886,57276
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1895,57520
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1920,58632
      freep = prevp;freep1933,59098
    nu = 4096;nu1944,59359
  p = sbrk(nu * sizeof(Header));p1945,59374
  hp = (Header*)p;hp1954,59724
      freep = prevp;freep1965,60083
      freep = prevp;freep1995,61121
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits2023,61949

ln.asm,6446
_ln:     file format elf32-i386_ln2,1
Disassembly of section .text:Disassembly5,35
intint11,120
intint21,358
   a:	ff 71 fc             	pushl  -0x4(%ecx)a24,393
   d:	55                   	push   %ebpd25,439
   e:	89 e5                	mov    %esp,%ebpe26,479
  os = s;os83,2421
intint104,3105
  a1:	84 c0                	test   %al,%ala1116,3531
  a3:	75 1e                	jne    c3 <strcmp+0x33>a3117,3574
  a5:	eb 29                	jmp    d0 <strcmp+0x40>a5118,3626
  a7:	89 f6                	mov    %esi,%esia7119,3678
  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia9120,3723
  b0:	83 c2 01             	add    $0x1,%edxb0122,3794
intint125,3842
  b3:	0f b6 02             	movzbl (%edx),%eaxb3129,3909
  b6:	8d 71 01             	lea    0x1(%ecx),%esib6131,3970
intint134,4023
  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxb9138,4090
  bd:	84 c0                	test   %al,%albd139,4140
  bf:	74 0f                	je     d0 <strcmp+0x40>bf140,4183
  c1:	89 f1                	mov    %esi,%ecxc1141,4235
  c3:	38 d8                	cmp    %bl,%alc3142,4280
  c5:	74 e9                	je     b0 <strcmp+0x20>c5143,4323
  c7:	29 d8                	sub    %ebx,%eaxc7146,4421
  c9:	5b                   	pop    %ebxc9148,4468
  ca:	5e                   	pop    %esica149,4508
  cb:	5d                   	pop    %ebpcb150,4548
  cc:	c3                   	ret    cc151,4588
  cd:	8d 76 00             	lea    0x0(%esi),%esicd152,4624
intint155,4677
  d0:	31 c0                	xor    %eax,%eaxd0159,4744
  d2:	29 d8                	sub    %ebx,%eaxd2162,4835
  d4:	5b                   	pop    %ebxd4164,4882
  d5:	5e                   	pop    %esid5165,4922
  d6:	5d                   	pop    %ebpd6166,4962
  d7:	c3                   	ret    d7167,5002
  d8:	90                   	nopd8168,5038
  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esid9169,5070
uintuint173,5148
  e0:	55                   	push   %ebpe0176,5171
  e1:	89 e5                	mov    %esp,%ebpe1177,5211
  e3:	8b 4d 08             	mov    0x8(%ebp),%ecxe3178,5256
  e6:	80 39 00             	cmpb   $0x0,(%ecx)e6182,5340
  e9:	74 12                	je     fd <strlen+0x1d>e9183,5387
  eb:	31 d2                	xor    %edx,%edxeb184,5439
  ed:	8d 76 00             	lea    0x0(%esi),%esied185,5484
  f0:	83 c2 01             	add    $0x1,%edxf0186,5534
  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)f3187,5579
  f7:	89 d0                	mov    %edx,%eaxf7188,5633
  f9:	75 f5                	jne    f0 <strlen+0x10>f9189,5678
  fb:	5d                   	pop    %ebpfb193,5750
  fc:	c3                   	ret    fc194,5790
uintuint195,5826
  fd:	31 c0                	xor    %eax,%eaxfd201,5883
  ff:	5d                   	pop    %ebpff205,5948
static inline voidstatic233,6728
    cc = read(0, &c, 1);cc310,9078
    cc = read(0, &c, 1);cc324,9349
    cc = read(0, &c, 1);cc343,10021
intint423,12177
  fd = open(n, O_RDONLY);fd433,12399
  r = fstat(fd, st);r443,12771
  fd = open(n, O_RDONLY);fd466,13548
intint478,13840
  n = 0;n487,14051
    n = n*10 + *s++ - '0';n496,14438
  n = 0;n504,14655
    n = n*10 + *s++ - '0';n510,14890
  dst = vdst;dst533,15541
  src = vsrc;src534,15555
  dst = vdst;dst547,15982
  src = vsrc;src548,15996
  name: \name561,16338
static voidstatic714,20315
  neg = 0;neg728,20710
    neg = 1;neg737,21081
    x = -xx;x738,21094
  neg = 0;neg743,21177
    neg = 1;neg745,21209
    x = -xx;x747,21274
    x = xx;x751,21390
  i = 0;i754,21407
    x = xx;x769,22007
  i = 0;i772,22024
static voidstatic791,22727
  neg = 0;neg820,23674
    neg = 1;neg822,23706
    x = -xx;x823,23719
    x = xx;x825,23743
  neg = 0;neg832,23886
voidvoid842,24175
  state = 0;state853,24450
  ap = (uint*)(void*)&fmt + 1;ap854,24463
voidvoid860,24634
  state = 0;state867,24750
  ap = (uint*)(void*)&fmt + 1;ap868,24763
voidvoid874,24933
  state = 0;state881,25053
  ap = (uint*)(void*)&fmt + 1;ap882,25066
    c = fmt[i] & 0xff;c893,25564
        state = '%';state898,25725
  state = 0;state900,25792
  ap = (uint*)(void*)&fmt + 1;ap901,25805
    c = fmt[i] & 0xff;c903,25863
static voidstatic909,25998
  state = 0;state926,26543
  ap = (uint*)(void*)&fmt + 1;ap927,26556
    c = fmt[i] & 0xff;c932,26761
  state = 0;state937,26862
  ap = (uint*)(void*)&fmt + 1;ap938,26875
    c = fmt[i] & 0xff;c940,26933
        state = '%';state946,27137
          s = "(null)";s967,27857
static voidstatic982,28264
  state = 0;state1004,29028
  ap = (uint*)(void*)&fmt + 1;ap1005,29041
static voidstatic1010,29169
      state = 0;state1020,29397
  state = 0;state1025,29491
  ap = (uint*)(void*)&fmt + 1;ap1026,29504
      state = 0;state1032,29687
      state = 0;state1065,30779
        s = (char*)*ap;s1079,31262
          s = "(null)";s1086,31515
static voidstatic1098,31971
          s = "(null)";s1107,32196
static voidstatic1114,32347
        s = (char*)*ap;s1122,32556
          s = "(null)";s1125,32613
      state = 0;state1136,32978
static voidstatic1143,33219
static voidstatic1165,33896
static Header base;static1183,34502
static Header *freep;static1184,34522
voidvoid1186,34545
  bp = (Header*)ap - 1;bp1192,34626
static Header base;static1195,34755
static Header *freep;static1196,34775
voidvoid1198,34798
  bp = (Header*)ap - 1;bp1208,35054
voidvoid1212,35235
  bp = (Header*)ap - 1;bp1217,35276
static Header base;static1229,35851
static Header *freep;static1230,35871
voidvoid1232,35894
  bp = (Header*)ap - 1;bp1238,35980
  bp = (Header*)ap - 1;bp1247,36242
  freep = p;freep1278,37469
  bp = (Header*)ap - 1;bp1286,37726
  freep = p;freep1310,38619
  freep = p;freep1324,39040
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1349,39637
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1358,39881
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1383,40993
      freep = prevp;freep1396,41459
    nu = 4096;nu1407,41720
  p = sbrk(nu * sizeof(Header));p1408,41735
  hp = (Header*)p;hp1417,42085
      freep = prevp;freep1428,42444
      freep = prevp;freep1458,43482
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1486,44310

runoff1,0

kbd.h,890
#define KBSTATP KBSTATP3,36
#define KBS_DIB KBS_DIB4,101
#define KBDATAP KBDATAP5,155
#define NO NO7,208
#define SHIFT SHIFT9,235
#define CTL CTL10,266
#define ALT ALT11,297
#define CAPSLOCK CAPSLOCK13,329
#define NUMLOCK NUMLOCK14,360
#define SCROLLLOCK SCROLLLOCK15,391
#define E0ESC E0ESC17,423
#define KEY_HOME KEY_HOME20,475
#define KEY_END KEY_END21,504
#define KEY_UP KEY_UP22,533
#define KEY_DN KEY_DN23,562
#define KEY_LF KEY_LF24,591
#define KEY_RT KEY_RT25,620
#define KEY_PGUP KEY_PGUP26,649
#define KEY_PGDN KEY_PGDN27,678
#define KEY_INS KEY_INS28,707
#define KEY_DEL KEY_DEL29,736
#define C(C32,789
static uchar shiftcode[256] =shiftcode34,813
static uchar togglecode[256] =togglecode44,936
static uchar normalmap[256] =normalmap51,1030
static uchar shiftmap[256] =shiftmap73,1899
static uchar ctlmap[256] =ctlmap95,2767

param.h,384
#define NPROC NPROC1,0
#define KSTACKSIZE KSTACKSIZE2,56
#define NCPU NCPU3,117
#define NOFILE NOFILE4,168
#define NFILE NFILE5,219
#define NINODE NINODE6,269
#define NDEV NDEV7,330
#define ROOTDEV ROOTDEV8,386
#define MAXARG MAXARG9,453
#define MAXOPBLOCKS MAXOPBLOCKS10,500
#define LOGSIZE LOGSIZE11,561
#define NBUF NBUF12,633
#define FSSIZE FSSIZE13,699

ioapic.c,625
#define IOAPIC IOAPIC9,205
#define REG_ID REG_ID11,274
#define REG_VER REG_VER12,321
#define REG_TABLE REG_TABLE13,373
#define INT_DISABLED INT_DISABLED20,689
#define INT_LEVEL INT_LEVEL21,746
#define INT_ACTIVELOW INT_ACTIVELOW22,811
#define INT_LOGICAL INT_LOGICAL23,870
volatile struct ioapic *ioapic;ioapic25,944
struct ioapic {ioapic28,1040
  uint reg;reg29,1056
  uint pad[3];pad30,1068
  uint data;data31,1083
ioapicread(int reg)ioapicread35,1112
ioapicwrite(int reg, uint data)ioapicwrite42,1193
ioapicinit(void)ioapicinit49,1279
ioapicenable(int irq, int cpunum)ioapicenable68,1775

fs.h,1336
#define ROOTINO ROOTINO5,92
#define BSIZE BSIZE6,128
struct superblock {superblock14,420
  uint size;         // Size of file system image (blocks)size15,440
  uint nblocks;      // Number of data blocksnblocks16,499
  uint ninodes;      // Number of inodes.ninodes17,545
  uint nlog;         // Number of log blocksnlog18,587
  uint logstart;     // Block number of first log blocklogstart19,632
  uint inodestart;   // Block number of first inode blockinodestart20,688
  uint bmapstart;    // Block number of first free map blockbmapstart21,746
#define NDIRECT NDIRECT24,811
#define NINDIRECT NINDIRECT25,830
#define MAXFILE MAXFILE26,871
struct dinode {dinode29,937
  short type;           // File typetype30,953
  short major;          // Major device number (T_DEV only)major31,990
  short minor;          // Minor device number (T_DEV only)minor32,1050
  short nlink;          // Number of links to inode in file systemnlink33,1110
  uint size;            // Size of file (bytes)size34,1177
  uint addrs[NDIRECT+1];   // Data block addressesaddrs35,1225
#define IPB IPB39,1301
#define IBLOCK(IBLOCK42,1384
#define BPB BPB45,1464
#define BBLOCK(BBLOCK48,1545
#define DIRSIZ DIRSIZ51,1658
struct dirent {dirent53,1677
  ushort inum;inum54,1693
  char name[DIRSIZ];name55,1708

syscall.c,304
fetchint(uint addr, int *ip)fetchint18,468
fetchstr(uint addr, char **pp)fetchstr32,827
argint(int n, int *ip)argint50,1138
argptr(int n, char **pp, int size)argptr59,1391
argstr(int n, char **pp)argstr77,1895
static int (*syscalls[])(void) = {syscalls109,2643
syscall(void)syscall136,3252

fs.c,1376
#define min(min24,692
struct superblock sb; sb28,855
readsb(int dev, struct superblock *sb)readsb32,909
bzero(int dev, int bno)bzero43,1075
balloc(uint dev)balloc57,1265
bfree(int dev, uint b)bfree82,1787
  struct spinlock lock;lock168,4815
  struct inode inode[NINODE];inode169,4839
} icache;icache170,4869
iinit(int dev)iinit173,4885
ialloc(uint dev, short type)ialloc196,5489
iupdate(struct inode *ip)iupdate222,6163
iget(uint dev, uint inum)iget243,6702
idup(struct inode *ip)idup278,7413
ilock(struct inode *ip)ilock289,7590
iunlock(struct inode *ip)iunlock317,8173
iput(struct inode *ip)iput333,8638
iunlockput(struct inode *ip)iunlockput357,9110
bmap(struct inode *ip, uint bn)bmap374,9547
itrunc(struct inode *ip)itrunc409,10375
stati(struct inode *ip, struct stat *st)stati441,10947
readi(struct inode *ip, char *dst, uint off, uint n)readi454,11179
writei(struct inode *ip, char *src, uint off, uint n)writei483,11815
namecmp(const char *s, const char *t)namecmp518,12503
dirlookup(struct inode *dp, char *name, uint *poff)dirlookup526,12686
dirlink(struct inode *dp, char *name, uint inum)dirlink553,13278
skipelem(char *path, char *name)skipelem597,14398
namex(char *path, int nameiparent, char *name)namex626,15028
namei(char *path)namei661,15647
nameiparent(char *path, char *name)nameiparent668,15736

mmu.h,5794
#define FL_CF FL_CF5,99
#define FL_PF FL_PF6,153
#define FL_AF FL_AF7,208
#define FL_ZF FL_ZF8,272
#define FL_SF FL_SF9,325
#define FL_TF FL_TF10,378
#define FL_IF FL_IF11,431
#define FL_DF FL_DF12,491
#define FL_OF FL_OF13,549
#define FL_IOPL_MASK FL_IOPL_MASK14,606
#define FL_IOPL_0 FL_IOPL_015,677
#define FL_IOPL_1 FL_IOPL_116,732
#define FL_IOPL_2 FL_IOPL_217,787
#define FL_IOPL_3 FL_IOPL_318,842
#define FL_NT FL_NT19,897
#define FL_RF FL_RF20,952
#define FL_VM FL_VM21,1007
#define FL_AC FL_AC22,1068
#define FL_VIF FL_VIF23,1127
#define FL_VIP FL_VIP24,1193
#define FL_ID FL_ID25,1262
#define CR0_PE CR0_PE28,1340
#define CR0_MP CR0_MP29,1401
#define CR0_EM CR0_EM30,1464
#define CR0_TS CR0_TS31,1517
#define CR0_ET CR0_ET32,1574
#define CR0_NE CR0_NE33,1632
#define CR0_WP CR0_WP34,1690
#define CR0_AM CR0_AM35,1747
#define CR0_NW CR0_NW36,1805
#define CR0_CD CR0_CD37,1865
#define CR0_PG CR0_PG38,1922
#define CR4_PSE CR4_PSE40,1973
#define SEG_KCODE SEG_KCODE43,2067
#define SEG_KDATA SEG_KDATA44,2103
#define SEG_UCODE SEG_UCODE45,2145
#define SEG_UDATA SEG_UDATA46,2179
#define SEG_TSS SEG_TSS47,2219
#define NSEGS NSEGS50,2315
struct segdesc {segdesc54,2380
  uint lim_15_0 : 16;  // Low bits of segment limitlim_15_055,2397
  uint base_15_0 : 16; // Low bits of segment base addressbase_15_056,2449
  uint base_23_16 : 8; // Middle bits of segment base addressbase_23_1657,2508
  uint type : 4;       // Segment type (see STS_ constants)type58,2570
  uint s : 1;          // 0 = system, 1 = applications59,2630
  uint dpl : 2;        // Descriptor Privilege Leveldpl60,2684
  uint p : 1;          // Presentp61,2737
  uint lim_19_16 : 4;  // High bits of segment limitlim_19_1662,2771
  uint avl : 1;        // Unused (available for software use)avl63,2824
  uint rsv1 : 1;       // Reservedrsv164,2886
  uint db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentdb65,2921
  uint g : 1;          // Granularity: limit scaled by 4K when setg66,2986
  uint base_31_24 : 8; // High bits of segment base addressbase_31_2467,3053
#define SEG(SEG71,3135
#define SEG16(SEG1675,3357
#define DPL_USER DPL_USER81,3587
#define STA_X STA_X84,3661
#define STA_E STA_E85,3711
#define STA_C STA_C86,3780
#define STA_W STA_W87,3853
#define STA_R STA_R88,3920
#define STA_A STA_A89,3982
#define STS_T16A STS_T16A92,4051
#define STS_LDT STS_LDT93,4103
#define STS_T16B STS_T16B94,4157
#define STS_CG16 STS_CG1695,4204
#define STS_TG STS_TG96,4252
#define STS_IG16 STS_IG1697,4313
#define STS_TG16 STS_TG1698,4366
#define STS_T32A STS_T32A99,4414
#define STS_T32B STS_T32B100,4466
#define STS_CG32 STS_CG32101,4513
#define STS_IG32 STS_IG32102,4561
#define STS_TG32 STS_TG32103,4614
#define PDX(PDX114,5038
#define PTX(PTX117,5118
#define PGADDR(PGADDR120,5231
#define NPDENTRIES NPDENTRIES123,5350
#define NPTENTRIES NPTENTRIES124,5424
#define PGSIZE PGSIZE125,5481
#define PGSHIFT PGSHIFT127,5540
#define PTXSHIFT PTXSHIFT128,5588
#define PDXSHIFT PDXSHIFT129,5657
#define PGROUNDUP(PGROUNDUP131,5727
#define PGROUNDDOWN(PGROUNDDOWN132,5782
#define PTE_P PTE_P135,5865
#define PTE_W PTE_W136,5908
#define PTE_R PTE_R137,5953
#define PTE_U PTE_U138,5998
#define PTE_PWT PTE_PWT139,6038
#define PTE_PCD PTE_PCD140,6087
#define PTE_A PTE_A141,6136
#define PTE_D PTE_D142,6180
#define PTE_PS PTE_PS143,6221
#define PTE_MBZ PTE_MBZ144,6266
#define PTE_ADDR(PTE_ADDR147,6369
#define PTE_FLAGS(PTE_FLAGS148,6416
typedef uint pte_t;pte_t151,6486
struct taskstate {taskstate154,6536
  uint link;         // Old ts selectorlink155,6555
  uint esp0;         // Stack pointers and segment selectorsesp0156,6595
  ushort ss0;        //   after an increase in privilege levelss0157,6656
  ushort padding1;padding1158,6719
  uint *esp1;esp1159,6738
  ushort ss1;ss1160,6752
  ushort padding2;padding2161,6766
  uint *esp2;esp2162,6785
  ushort ss2;ss2163,6799
  ushort padding3;padding3164,6813
  void *cr3;         // Page directory basecr3165,6832
  uint *eip;         // Saved state from last task switcheip166,6876
  uint eflags;eflags167,6934
  uint eax;          // More saved state (registers)eax168,6949
  uint ecx;ecx169,7002
  uint edx;edx170,7014
  uint ebx;ebx171,7026
  uint *esp;esp172,7038
  uint *ebp;ebp173,7051
  uint esi;esi174,7064
  uint edi;edi175,7076
  ushort es;         // Even more saved state (segment selectors)es176,7088
  ushort padding4;padding4177,7154
  ushort cs;cs178,7173
  ushort padding5;padding5179,7186
  ushort ss;ss180,7205
  ushort padding6;padding6181,7218
  ushort ds;ds182,7237
  ushort padding7;padding7183,7250
  ushort fs;fs184,7269
  ushort padding8;padding8185,7282
  ushort gs;gs186,7301
  ushort padding9;padding9187,7314
  ushort ldt;ldt188,7333
  ushort padding10;padding10189,7347
  ushort t;          // Trap on task switcht190,7367
  ushort iomb;       // I/O map base addressiomb191,7411
struct gatedesc {gatedesc196,7522
  uint off_15_0 : 16;   // low 16 bits of offset in segmentoff_15_0197,7540
  uint cs : 16;         // code segment selectorcs198,7600
  uint args : 5;        // # args, 0 for interrupt/trap gatesargs199,7649
  uint rsv1 : 3;        // reserved(should be zero I guess)rsv1200,7711
  uint type : 4;        // type(STS_{TG,IG32,TG32})type201,7771
  uint s : 1;           // must be 0 (system)s202,7823
  uint dpl : 2;         // descriptor(meaning new) privilege leveldpl203,7869
  uint p : 1;           // Presentp204,7936
  uint off_31_16 : 16;  // high bits of offset in segmentoff_31_16205,7971
#define SETGATE(SETGATE216,8510

stressfs.asm,6021
_stressfs:     file format elf32-i386_stressfs2,1
Disassembly of section .text:Disassembly5,41
intint11,125
intint22,386
   c:	ff 71 fc             	pushl  -0x4(%ecx)c25,421
   f:	55                   	push   %ebpf26,467
intint45,1004
intint60,1394
  fd = open(path, O_CREATE | O_RDWR);fd103,2643
  fd = open(path, O_CREATE | O_RDWR);fd117,3018
  a2:	50                   	push   %eaxa2122,3231
  a3:	e8 1a 03 00 00       	call   3c2 <open>a3123,3271
  a8:	83 c4 10             	add    $0x10,%espa8124,3317
  ab:	89 c7                	mov    %eax,%ediab125,3363
  ad:	8d 76 00             	lea    0x0(%esi),%esiad126,3408
  b0:	83 ec 04             	sub    $0x4,%espb0130,3548
  b3:	68 00 02 00 00       	push   $0x200b3131,3593
  b8:	56                   	push   %esib8132,3635
  b9:	57                   	push   %edib9133,3675
  ba:	e8 e3 02 00 00       	call   3a2 <write>ba134,3715
  fd = open(path, O_CREATE | O_RDWR);fd139,3810
  bf:	83 c4 10             	add    $0x10,%espbf141,3874
  c2:	83 eb 01             	sub    $0x1,%ebxc2142,3920
  c5:	75 e9                	jne    b0 <main+0xb0>c5143,3965
  c7:	83 ec 0c             	sub    $0xc,%espc7147,4092
  ca:	57                   	push   %edica148,4137
  cb:	e8 da 02 00 00       	call   3aa <close>cb149,4177
  d0:	58                   	pop    %eaxd0152,4248
  d1:	5a                   	pop    %edxd1153,4288
  d2:	68 1d 08 00 00       	push   $0x81dd2154,4328
  d7:	6a 01                	push   $0x1d7155,4370
  d9:	e8 02 04 00 00       	call   4e0 <printf>d9156,4410
  fd = open(path, O_RDONLY);fd158,4459
  de:	59                   	pop    %ecxde159,4488
  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eaxdf160,4528
  e5:	5b                   	pop    %ebxe5161,4581
  e6:	6a 00                	push   $0x0e6162,4621
  e8:	50                   	push   %eaxe8163,4661
  e9:	bb 14 00 00 00       	mov    $0x14,%ebxe9164,4701
  ee:	e8 cf 02 00 00       	call   3c2 <open>ee165,4747
  f3:	83 c4 10             	add    $0x10,%espf3166,4793
  f6:	89 c7                	mov    %eax,%edif6167,4839
  f8:	90                   	nopf8168,4884
  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif9169,4916
  fd = open(path, O_RDONLY);fd181,5285
  os = s;os222,6532
intint243,7217
intint264,7956
intint273,8137
intint294,8793
uintuint312,9264
uintuint334,9944
static inline voidstatic372,10846
    cc = read(0, &c, 1);cc449,13196
    cc = read(0, &c, 1);cc463,13467
    cc = read(0, &c, 1);cc482,14139
intint562,16295
  fd = open(n, O_RDONLY);fd572,16517
  r = fstat(fd, st);r582,16889
  fd = open(n, O_RDONLY);fd605,17666
intint617,17958
  n = 0;n626,18169
    n = n*10 + *s++ - '0';n635,18556
  n = 0;n643,18773
    n = n*10 + *s++ - '0';n649,19008
  dst = vdst;dst672,19659
  src = vsrc;src673,19673
  dst = vdst;dst686,20100
  src = vsrc;src687,20114
  name: \name700,20456
static voidstatic853,24433
  neg = 0;neg867,24828
    neg = 1;neg876,25199
    x = -xx;x877,25212
  neg = 0;neg882,25295
    neg = 1;neg884,25327
    x = -xx;x886,25392
    x = xx;x890,25508
  i = 0;i893,25525
    x = xx;x908,26125
  i = 0;i911,26142
static voidstatic930,26845
  neg = 0;neg959,27792
    neg = 1;neg961,27824
    x = -xx;x962,27837
    x = xx;x964,27861
  neg = 0;neg971,28004
voidvoid981,28293
  state = 0;state992,28568
  ap = (uint*)(void*)&fmt + 1;ap993,28581
voidvoid999,28752
  state = 0;state1006,28868
  ap = (uint*)(void*)&fmt + 1;ap1007,28881
voidvoid1013,29051
  state = 0;state1020,29171
  ap = (uint*)(void*)&fmt + 1;ap1021,29184
    c = fmt[i] & 0xff;c1032,29682
        state = '%';state1037,29843
  state = 0;state1039,29910
  ap = (uint*)(void*)&fmt + 1;ap1040,29923
    c = fmt[i] & 0xff;c1042,29981
static voidstatic1048,30116
  state = 0;state1065,30661
  ap = (uint*)(void*)&fmt + 1;ap1066,30674
    c = fmt[i] & 0xff;c1071,30879
  state = 0;state1076,30980
  ap = (uint*)(void*)&fmt + 1;ap1077,30993
    c = fmt[i] & 0xff;c1079,31051
        state = '%';state1085,31255
          s = "(null)";s1106,31975
static voidstatic1121,32382
  state = 0;state1143,33146
  ap = (uint*)(void*)&fmt + 1;ap1144,33159
static voidstatic1149,33287
      state = 0;state1159,33515
  state = 0;state1164,33609
  ap = (uint*)(void*)&fmt + 1;ap1165,33622
      state = 0;state1171,33805
      state = 0;state1204,34897
        s = (char*)*ap;s1218,35380
          s = "(null)";s1225,35633
static voidstatic1237,36089
          s = "(null)";s1246,36314
static voidstatic1253,36465
        s = (char*)*ap;s1261,36674
          s = "(null)";s1264,36731
      state = 0;state1275,37096
static voidstatic1282,37337
static voidstatic1304,38014
static Header base;static1322,38620
static Header *freep;static1323,38640
voidvoid1325,38663
  bp = (Header*)ap - 1;bp1331,38744
static Header base;static1334,38873
static Header *freep;static1335,38893
voidvoid1337,38916
  bp = (Header*)ap - 1;bp1347,39172
voidvoid1351,39353
  bp = (Header*)ap - 1;bp1356,39394
static Header base;static1368,39969
static Header *freep;static1369,39989
voidvoid1371,40012
  bp = (Header*)ap - 1;bp1377,40098
  bp = (Header*)ap - 1;bp1386,40360
  freep = p;freep1417,41587
  bp = (Header*)ap - 1;bp1425,41844
  freep = p;freep1449,42737
  freep = p;freep1463,43158
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1488,43755
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1497,43999
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1522,45111
      freep = prevp;freep1535,45577
    nu = 4096;nu1546,45838
  p = sbrk(nu * sizeof(Header));p1547,45853
  hp = (Header*)p;hp1556,46203
      freep = prevp;freep1567,46562
      freep = prevp;freep1597,47600
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1625,48428

entryother.asm,112
Disassembly of section .text:Disassembly5,48
start:start12,186
start32:start3250,1542
spin:spin106,3624

mkdir.asm,6397
_mkdir:     file format elf32-i386_mkdir2,1
Disassembly of section .text:Disassembly5,38
intint11,123
   a:	55                   	push   %ebpa17,306
   b:	89 e5                	mov    %esp,%ebpb18,346
   d:	57                   	push   %edid19,391
   e:	56                   	push   %esie20,431
   f:	53                   	push   %ebxf21,471
  os = s;os111,3180
  a1:	5b                   	pop    %ebxa1124,3627
  a2:	5d                   	pop    %ebpa2125,3667
  a3:	c3                   	ret    a3126,3707
  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia4127,3743
  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%ediaa128,3793
intint132,3864
  b0:	55                   	push   %ebpb0135,3907
  b1:	89 e5                	mov    %esp,%ebpb1136,3947
  b3:	56                   	push   %esib3137,3992
  b4:	53                   	push   %ebxb4138,4032
  b5:	8b 55 08             	mov    0x8(%ebp),%edxb5139,4072
  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecxb8140,4122
  bb:	0f b6 02             	movzbl (%edx),%eaxbb142,4196
  be:	0f b6 19             	movzbl (%ecx),%ebxbe143,4243
  c1:	84 c0                	test   %al,%alc1144,4290
  c3:	75 1e                	jne    e3 <strcmp+0x33>c3145,4333
  c5:	eb 29                	jmp    f0 <strcmp+0x40>c5146,4385
  c7:	89 f6                	mov    %esi,%esic7147,4437
  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic9148,4482
  d0:	83 c2 01             	add    $0x1,%edxd0150,4553
intint153,4601
  d3:	0f b6 02             	movzbl (%edx),%eaxd3157,4668
  d6:	8d 71 01             	lea    0x1(%ecx),%esid6159,4729
intint162,4782
  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxd9166,4849
  dd:	84 c0                	test   %al,%aldd167,4899
  df:	74 0f                	je     f0 <strcmp+0x40>df168,4942
  e1:	89 f1                	mov    %esi,%ecxe1169,4994
  e3:	38 d8                	cmp    %bl,%ale3170,5039
  e5:	74 e9                	je     d0 <strcmp+0x20>e5171,5082
  e7:	29 d8                	sub    %ebx,%eaxe7174,5180
  e9:	5b                   	pop    %ebxe9176,5227
  ea:	5e                   	pop    %esiea177,5267
  eb:	5d                   	pop    %ebpeb178,5307
  ec:	c3                   	ret    ec179,5347
  ed:	8d 76 00             	lea    0x0(%esi),%esied180,5383
intint183,5436
  f0:	31 c0                	xor    %eax,%eaxf0187,5503
  f2:	29 d8                	sub    %ebx,%eaxf2190,5594
  f4:	5b                   	pop    %ebxf4192,5641
  f5:	5e                   	pop    %esif5193,5681
  f6:	5d                   	pop    %ebpf6194,5721
  f7:	c3                   	ret    f7195,5761
  f8:	90                   	nopf8196,5797
  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif9197,5829
uintuint201,5907
uintuint223,6587
static inline voidstatic261,7489
    cc = read(0, &c, 1);cc338,9839
    cc = read(0, &c, 1);cc352,10110
    cc = read(0, &c, 1);cc371,10782
intint451,12938
  fd = open(n, O_RDONLY);fd461,13160
  r = fstat(fd, st);r471,13532
  fd = open(n, O_RDONLY);fd494,14309
intint506,14601
  n = 0;n515,14812
    n = n*10 + *s++ - '0';n524,15199
  n = 0;n532,15416
    n = n*10 + *s++ - '0';n538,15651
  dst = vdst;dst561,16302
  src = vsrc;src562,16316
  dst = vdst;dst575,16743
  src = vsrc;src576,16757
  name: \name589,17099
static voidstatic742,21076
  neg = 0;neg756,21471
    neg = 1;neg765,21842
    x = -xx;x766,21855
  neg = 0;neg771,21938
    neg = 1;neg773,21970
    x = -xx;x775,22035
    x = xx;x779,22151
  i = 0;i782,22168
    x = xx;x797,22768
  i = 0;i800,22785
static voidstatic819,23488
  neg = 0;neg848,24435
    neg = 1;neg850,24467
    x = -xx;x851,24480
    x = xx;x853,24504
  neg = 0;neg860,24647
voidvoid870,24936
  state = 0;state881,25211
  ap = (uint*)(void*)&fmt + 1;ap882,25224
voidvoid888,25395
  state = 0;state895,25511
  ap = (uint*)(void*)&fmt + 1;ap896,25524
voidvoid902,25694
  state = 0;state909,25814
  ap = (uint*)(void*)&fmt + 1;ap910,25827
    c = fmt[i] & 0xff;c921,26325
        state = '%';state926,26486
  state = 0;state928,26553
  ap = (uint*)(void*)&fmt + 1;ap929,26566
    c = fmt[i] & 0xff;c931,26624
static voidstatic937,26759
  state = 0;state954,27304
  ap = (uint*)(void*)&fmt + 1;ap955,27317
    c = fmt[i] & 0xff;c960,27522
  state = 0;state965,27623
  ap = (uint*)(void*)&fmt + 1;ap966,27636
    c = fmt[i] & 0xff;c968,27694
        state = '%';state974,27898
          s = "(null)";s995,28618
static voidstatic1010,29025
  state = 0;state1032,29789
  ap = (uint*)(void*)&fmt + 1;ap1033,29802
static voidstatic1038,29930
      state = 0;state1048,30158
  state = 0;state1053,30252
  ap = (uint*)(void*)&fmt + 1;ap1054,30265
      state = 0;state1060,30448
      state = 0;state1093,31540
        s = (char*)*ap;s1107,32023
          s = "(null)";s1114,32276
static voidstatic1126,32732
          s = "(null)";s1135,32957
static voidstatic1142,33108
        s = (char*)*ap;s1150,33317
          s = "(null)";s1153,33374
      state = 0;state1164,33739
static voidstatic1171,33980
static voidstatic1193,34657
static Header base;static1211,35263
static Header *freep;static1212,35283
voidvoid1214,35306
  bp = (Header*)ap - 1;bp1220,35387
static Header base;static1223,35516
static Header *freep;static1224,35536
voidvoid1226,35559
  bp = (Header*)ap - 1;bp1236,35815
voidvoid1240,35996
  bp = (Header*)ap - 1;bp1245,36037
static Header base;static1257,36612
static Header *freep;static1258,36632
voidvoid1260,36655
  bp = (Header*)ap - 1;bp1266,36741
  bp = (Header*)ap - 1;bp1275,37003
  freep = p;freep1306,38230
  bp = (Header*)ap - 1;bp1314,38487
  freep = p;freep1338,39380
  freep = p;freep1352,39801
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1377,40398
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1386,40642
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1411,41754
      freep = prevp;freep1424,42220
    nu = 4096;nu1435,42481
  p = sbrk(nu * sizeof(Header));p1436,42496
  hp = (Header*)p;hp1445,42846
      freep = prevp;freep1456,43205
      freep = prevp;freep1486,44243
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1514,45071

sysproc.c,332
sys_fork(void)sys_fork11,154
sys_exit(void)sys_exit17,195
sys_wait(void)sys_wait24,257
sys_kill(void)sys_kill30,298
sys_getpid(void)sys_getpid40,395
sys_sbrk(void)sys_sbrk46,445
sys_sleep(void)sys_sleep60,605
sys_uptime(void)sys_uptime83,981
int sys_cps(void)sys_cps93,1100
int sys_plocal(void)sys_plocal98,1139

plocal.c,43
int main(int argc, char *argv[])main6,75

picirq.c,91
#define IO_PIC1 IO_PIC16,119
#define IO_PIC2 IO_PIC27,172
picinit(void)picinit11,304

bio.c,316
  struct spinlock lock;lock30,969
  struct buf buf[NBUF];buf31,993
  struct buf head;head35,1108
} bcache;bcache36,1127
binit(void)binit39,1143
bget(uint dev, uint blockno)bget62,1693
bread(uint dev, uint blockno)bread97,2579
bwrite(struct buf *b)bwrite110,2775
brelse(struct buf *b)brelse121,2958

vectors.S,7605
vector0:vector05,82
vector1:vector110,143
vector2:vector215,204
vector3:vector320,265
vector4:vector425,326
vector5:vector530,387
vector6:vector635,448
vector7:vector740,509
vector8:vector845,570
vector9:vector949,620
vector10:vector1054,682
vector11:vector1158,735
vector12:vector1262,788
vector13:vector1366,841
vector14:vector1470,894
vector15:vector1574,947
vector16:vector1679,1011
vector17:vector1784,1075
vector18:vector1888,1128
vector19:vector1993,1192
vector20:vector2098,1256
vector21:vector21103,1320
vector22:vector22108,1384
vector23:vector23113,1448
vector24:vector24118,1512
vector25:vector25123,1576
vector26:vector26128,1640
vector27:vector27133,1704
vector28:vector28138,1768
vector29:vector29143,1832
vector30:vector30148,1896
vector31:vector31153,1960
vector32:vector32158,2024
vector33:vector33163,2088
vector34:vector34168,2152
vector35:vector35173,2216
vector36:vector36178,2280
vector37:vector37183,2344
vector38:vector38188,2408
vector39:vector39193,2472
vector40:vector40198,2536
vector41:vector41203,2600
vector42:vector42208,2664
vector43:vector43213,2728
vector44:vector44218,2792
vector45:vector45223,2856
vector46:vector46228,2920
vector47:vector47233,2984
vector48:vector48238,3048
vector49:vector49243,3112
vector50:vector50248,3176
vector51:vector51253,3240
vector52:vector52258,3304
vector53:vector53263,3368
vector54:vector54268,3432
vector55:vector55273,3496
vector56:vector56278,3560
vector57:vector57283,3624
vector58:vector58288,3688
vector59:vector59293,3752
vector60:vector60298,3816
vector61:vector61303,3880
vector62:vector62308,3944
vector63:vector63313,4008
vector64:vector64318,4072
vector65:vector65323,4136
vector66:vector66328,4200
vector67:vector67333,4264
vector68:vector68338,4328
vector69:vector69343,4392
vector70:vector70348,4456
vector71:vector71353,4520
vector72:vector72358,4584
vector73:vector73363,4648
vector74:vector74368,4712
vector75:vector75373,4776
vector76:vector76378,4840
vector77:vector77383,4904
vector78:vector78388,4968
vector79:vector79393,5032
vector80:vector80398,5096
vector81:vector81403,5160
vector82:vector82408,5224
vector83:vector83413,5288
vector84:vector84418,5352
vector85:vector85423,5416
vector86:vector86428,5480
vector87:vector87433,5544
vector88:vector88438,5608
vector89:vector89443,5672
vector90:vector90448,5736
vector91:vector91453,5800
vector92:vector92458,5864
vector93:vector93463,5928
vector94:vector94468,5992
vector95:vector95473,6056
vector96:vector96478,6120
vector97:vector97483,6184
vector98:vector98488,6248
vector99:vector99493,6312
vector100:vector100498,6377
vector101:vector101503,6444
vector102:vector102508,6511
vector103:vector103513,6578
vector104:vector104518,6645
vector105:vector105523,6712
vector106:vector106528,6779
vector107:vector107533,6846
vector108:vector108538,6913
vector109:vector109543,6980
vector110:vector110548,7047
vector111:vector111553,7114
vector112:vector112558,7181
vector113:vector113563,7248
vector114:vector114568,7315
vector115:vector115573,7382
vector116:vector116578,7449
vector117:vector117583,7516
vector118:vector118588,7583
vector119:vector119593,7650
vector120:vector120598,7717
vector121:vector121603,7784
vector122:vector122608,7851
vector123:vector123613,7918
vector124:vector124618,7985
vector125:vector125623,8052
vector126:vector126628,8119
vector127:vector127633,8186
vector128:vector128638,8253
vector129:vector129643,8320
vector130:vector130648,8387
vector131:vector131653,8454
vector132:vector132658,8521
vector133:vector133663,8588
vector134:vector134668,8655
vector135:vector135673,8722
vector136:vector136678,8789
vector137:vector137683,8856
vector138:vector138688,8923
vector139:vector139693,8990
vector140:vector140698,9057
vector141:vector141703,9124
vector142:vector142708,9191
vector143:vector143713,9258
vector144:vector144718,9325
vector145:vector145723,9392
vector146:vector146728,9459
vector147:vector147733,9526
vector148:vector148738,9593
vector149:vector149743,9660
vector150:vector150748,9727
vector151:vector151753,9794
vector152:vector152758,9861
vector153:vector153763,9928
vector154:vector154768,9995
vector155:vector155773,10062
vector156:vector156778,10129
vector157:vector157783,10196
vector158:vector158788,10263
vector159:vector159793,10330
vector160:vector160798,10397
vector161:vector161803,10464
vector162:vector162808,10531
vector163:vector163813,10598
vector164:vector164818,10665
vector165:vector165823,10732
vector166:vector166828,10799
vector167:vector167833,10866
vector168:vector168838,10933
vector169:vector169843,11000
vector170:vector170848,11067
vector171:vector171853,11134
vector172:vector172858,11201
vector173:vector173863,11268
vector174:vector174868,11335
vector175:vector175873,11402
vector176:vector176878,11469
vector177:vector177883,11536
vector178:vector178888,11603
vector179:vector179893,11670
vector180:vector180898,11737
vector181:vector181903,11804
vector182:vector182908,11871
vector183:vector183913,11938
vector184:vector184918,12005
vector185:vector185923,12072
vector186:vector186928,12139
vector187:vector187933,12206
vector188:vector188938,12273
vector189:vector189943,12340
vector190:vector190948,12407
vector191:vector191953,12474
vector192:vector192958,12541
vector193:vector193963,12608
vector194:vector194968,12675
vector195:vector195973,12742
vector196:vector196978,12809
vector197:vector197983,12876
vector198:vector198988,12943
vector199:vector199993,13010
vector200:vector200998,13077
vector201:vector2011003,13144
vector202:vector2021008,13211
vector203:vector2031013,13278
vector204:vector2041018,13345
vector205:vector2051023,13412
vector206:vector2061028,13479
vector207:vector2071033,13546
vector208:vector2081038,13613
vector209:vector2091043,13680
vector210:vector2101048,13747
vector211:vector2111053,13814
vector212:vector2121058,13881
vector213:vector2131063,13948
vector214:vector2141068,14015
vector215:vector2151073,14082
vector216:vector2161078,14149
vector217:vector2171083,14216
vector218:vector2181088,14283
vector219:vector2191093,14350
vector220:vector2201098,14417
vector221:vector2211103,14484
vector222:vector2221108,14551
vector223:vector2231113,14618
vector224:vector2241118,14685
vector225:vector2251123,14752
vector226:vector2261128,14819
vector227:vector2271133,14886
vector228:vector2281138,14953
vector229:vector2291143,15020
vector230:vector2301148,15087
vector231:vector2311153,15154
vector232:vector2321158,15221
vector233:vector2331163,15288
vector234:vector2341168,15355
vector235:vector2351173,15422
vector236:vector2361178,15489
vector237:vector2371183,15556
vector238:vector2381188,15623
vector239:vector2391193,15690
vector240:vector2401198,15757
vector241:vector2411203,15824
vector242:vector2421208,15891
vector243:vector2431213,15958
vector244:vector2441218,16025
vector245:vector2451223,16092
vector246:vector2461228,16159
vector247:vector2471233,16226
vector248:vector2481238,16293
vector249:vector2491243,16360
vector250:vector2501248,16427
vector251:vector2511253,16494
vector252:vector2521258,16561
vector253:vector2531263,16628
vector254:vector2541268,16695
vector255:vector2551273,16762
vectors:vectors1281,16849

sleeplock.h,261
struct sleeplock {sleeplock2,33
  uint locked;       // Is the lock held?locked3,52
  struct spinlock lk; // spinlock protecting this sleep locklk4,94
  char *name;        // Name of lock.name7,178
  int pid;           // Process holding lockpid8,216

asm.h,238
#define SEG_NULLASM SEG_NULLASM5,50
#define SEG_ASM(SEG_ASM11,304
#define STA_X STA_X16,575
#define STA_E STA_E17,625
#define STA_C STA_C18,694
#define STA_W STA_W19,767
#define STA_R STA_R20,834
#define STA_A STA_A21,896

usertests.asm,51215
_usertests:     file format elf32-i386_usertests2,1
Disassembly of section .text:Disassembly5,42
intint11,113
       a:	55                   	push   %ebpa17,308
       b:	89 e5                	mov    %esp,%ebpb18,352
       d:	51                   	push   %ecxd19,401
       e:	83 ec 0c             	sub    $0xc,%espe20,445
      a0:	e8 db 03 00 00       	call   480 <writetest>a081,2737
      a5:	e8 b6 05 00 00       	call   660 <writetest1>a583,2808
      aa:	e8 81 07 00 00       	call   830 <createtest>aa85,2880
      af:	e8 3c 02 00 00       	call   2f0 <openiputtest>af88,2955
      b4:	e8 47 01 00 00       	call   200 <exitiputtest>b490,3031
      b9:	e8 62 00 00 00       	call   120 <iputtest>b992,3103
      be:	e8 ad 0c 00 00       	call   d70 <mem>be95,3167
      c3:	e8 48 09 00 00       	call   a10 <pipe1>c397,3227
      c8:	e8 d3 0a 00 00       	call   ba0 <preempt>c899,3291
      cd:	e8 0e 0c 00 00       	call   ce0 <exitwait>cd101,3358
      d2:	e8 e9 26 00 00       	call   27c0 <rmdot>d2104,3424
      d7:	e8 a4 25 00 00       	call   2680 <fourteen>d7106,3490
      dc:	e8 cf 23 00 00       	call   24b0 <bigfile>dc108,3558
      e1:	e8 0a 1c 00 00       	call   1cf0 <subdir>e1110,3624
      e6:	e8 a5 14 00 00       	call   1590 <linktest>e6112,3691
      eb:	e8 10 13 00 00       	call   1400 <unlinkread>eb114,3762
      f0:	e8 4b 28 00 00       	call   2940 <dirfile>f0116,3832
      f5:	e8 46 2a 00 00       	call   2b40 <iref>f5118,3896
      fa:	e8 61 2b 00 00       	call   2c60 <forktest>fa120,3961
      ff:	e8 bc 1a 00 00       	call   1bc0 <bigdir>ff122,4036
int stdout = 1;int141,4620
voidvoid144,4689
voidvoid261,8855
  pid = fork();pid274,9220
  pid = fork();pid346,11903
voidvoid388,13313
  pid = fork();pid409,14031
  pid = fork();pid485,16772
voidvoid514,17641
  fd = open("echo", 0);fd526,17996
  fd = open("doesnotexist", 0);fd543,18639
  fd = open("echo", 0);fd568,19551
  fd = open("doesnotexist", 0);fd580,19946
voidvoid596,20442
  fd = open("small", O_CREATE|O_RDWR);fd611,20900
  fd = open("small", O_CREATE|O_RDWR);fd633,21700
  fd = open("small", O_RDONLY);fd689,23911
  fd = open("small", O_RDONLY);fd703,24357
  i = read(fd, buf, 2000);i716,24836
  fd = open("small", O_RDONLY);fd784,27508
  i = read(fd, buf, 2000);i796,27928
  fd = open("small", O_CREATE|O_RDWR);fd819,28708
voidvoid837,29313
  fd = open("big", O_CREATE|O_RDWR);fd852,29769
  fd = open("big", O_RDONLY);fd907,31644
  fd = open("big", O_RDONLY);fd921,32042
  n = 0;n952,33064
    i = read(fd, buf, 512);i954,33084
  n = 0;n1037,36189
    i = read(fd, buf, 512);i1039,36209
  fd = open("big", O_RDONLY);fd1053,36662
  fd = open("big", O_CREATE|O_RDWR);fd1065,37053
voidvoid1093,37930
voidvoid1109,38291
    fd = open(name, O_CREATE|O_RDWR);fd1128,38878
    fd = open(name, O_CREATE|O_RDWR);fd1138,39211
    fd = open(name, O_CREATE|O_RDWR);fd1155,39819
    fd = open(name, O_CREATE|O_RDWR);fd1179,40549
void dirtest(void)void1205,41398
void dirtest(void)void1266,43618
voidvoid1324,45416
voidvoid1349,46325
     a02:	e8 9b 2e 00 00       	call   38a2 <exit>a021361,46702
     a07:	89 f6                	mov    %esi,%esia071362,46753
     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia091363,46802
voidvoid1369,46919
     a10:	55                   	push   %ebpa101372,46938
     a11:	89 e5                	mov    %esp,%ebpa111373,46982
     a13:	57                   	push   %edia131374,47031
     a14:	56                   	push   %esia141375,47075
     a15:	53                   	push   %ebxa151376,47119
     a16:	8d 45 e0             	lea    -0x20(%ebp),%eaxa161381,47233
voidvoid1385,47326
     a19:	83 ec 38             	sub    $0x38,%espa191388,47345
     a1c:	50                   	push   %eaxa1c1393,47465
     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>a1d1394,47509
     a22:	83 c4 10             	add    $0x10,%espa221395,47560
     a25:	85 c0                	test   %eax,%eaxa251396,47610
     a27:	0f 85 35 01 00 00    	jne    b62 <pipe1+0x152>a271397,47659
  pid = fork();pid1401,47766
     a2d:	e8 68 2e 00 00       	call   389a <fork>a2d1402,47782
  seq = 0;seq1403,47833
     a32:	83 f8 00             	cmp    $0x0,%eaxa321405,47860
     a35:	0f 84 86 00 00 00    	je     ac1 <pipe1+0xb1>a351406,47909
     a3b:	0f 8e 35 01 00 00    	jle    b76 <pipe1+0x166>a3b1413,48066
     a41:	83 ec 0c             	sub    $0xc,%espa411415,48142
     a44:	ff 75 e4             	pushl  -0x1c(%ebp)a441416,48191
    total = 0;total1417,48242
    cc = 1;cc1418,48257
     a47:	bf 01 00 00 00       	mov    $0x1,%edia471419,48269
  pid = fork();pid1424,48390
  seq = 0;seq1425,48406
     a4c:	31 db                	xor    %ebx,%ebxa4c1426,48417
     a4e:	e8 77 2e 00 00       	call   38ca <close>a4e1433,48549
    total = 0;total1434,48601
    cc = 1;cc1435,48616
     a53:	83 c4 10             	add    $0x10,%espa531437,48672
    total = 0;total1443,48789
     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)a561444,48804
    cc = 1;cc1445,48860
     a5d:	83 ec 04             	sub    $0x4,%espa5d1447,48916
     a60:	57                   	push   %edia601448,48965
     a61:	68 a0 85 00 00       	push   $0x85a0a611449,49009
     a66:	ff 75 e0             	pushl  -0x20(%ebp)a661450,49056
     a69:	e8 4c 2e 00 00       	call   38ba <read>a691451,49107
     a6e:	83 c4 10             	add    $0x10,%espa6e1452,49158
     a71:	85 c0                	test   %eax,%eaxa711453,49208
     a73:	0f 8e a3 00 00 00    	jle    b1c <pipe1+0x10c>a731454,49257
     a79:	89 d9                	mov    %ebx,%ecxa791457,49391
     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esia7b1458,49440
     a7e:	f7 d9                	neg    %ecxa7e1459,49498
     a80:	38 9c 0b a0 85 00 00 	cmp    %bl,0x85a0(%ebx,%ecx,1)a801460,49542
     a87:	8d 53 01             	lea    0x1(%ebx),%edxa871461,49605
     a8a:	75 1b                	jne    aa7 <pipe1+0x97>a8a1462,49659
    total = 0;total1465,49756
    cc = 1;cc1466,49771
     a8c:	39 f2                	cmp    %esi,%edxa8c1469,49857
     a8e:	89 d3                	mov    %edx,%ebxa8e1470,49906
     a90:	75 ee                	jne    a80 <pipe1+0x70>a901471,49955
      cc = cc * 2;cc1477,50104
     a92:	01 ff                	add    %edi,%edia921478,50123
     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)a941485,50312
     a97:	b8 00 20 00 00       	mov    $0x2000,%eaxa971486,50368
     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edia9c1487,50420
     aa2:	0f 4f f8             	cmovg  %eax,%ediaa21488,50472
     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>aa51489,50521
    total = 0;total1490,50577
    cc = 1;cc1491,50592
     aa7:	83 ec 08             	sub    $0x8,%espaa71496,50764
     aaa:	68 76 40 00 00       	push   $0x4076aaa1497,50813
     aaf:	6a 01                	push   $0x1aaf1498,50860
     ab1:	e8 4a 2f 00 00       	call   3a00 <printf>ab11499,50904
     ab6:	83 c4 10             	add    $0x10,%espab61501,50975
     ab9:	8d 65 f4             	lea    -0xc(%ebp),%espab91508,51115
     abc:	5b                   	pop    %ebxabc1509,51170
     abd:	5e                   	pop    %esiabd1510,51214
     abe:	5f                   	pop    %ediabe1511,51258
     abf:	5d                   	pop    %ebpabf1512,51302
     ac0:	c3                   	ret    ac01513,51346
  pid = fork();pid1516,51402
  seq = 0;seq1517,51418
     ac1:	83 ec 0c             	sub    $0xc,%espac11520,51464
     ac4:	ff 75 e0             	pushl  -0x20(%ebp)ac41521,51513
  pid = fork();pid1526,51636
  seq = 0;seq1527,51652
     ac7:	31 f6                	xor    %esi,%esiac71528,51663
     ac9:	e8 fc 2d 00 00       	call   38ca <close>ac91531,51747
     ace:	83 c4 10             	add    $0x10,%espace1532,51799
     ad1:	89 f0                	mov    %esi,%eaxad11536,51933
     ad3:	8d 96 09 04 00 00    	lea    0x409(%esi),%edxad31537,51982
voidvoid1541,52075
     ad9:	89 f3                	mov    %esi,%ebxad91544,52094
  seq = 0;seq1545,52143
     adb:	f7 d8                	neg    %eaxadb1551,52273
     add:	8d 76 00             	lea    0x0(%esi),%esiadd1552,52317
     ae0:	88 9c 18 a0 85 00 00 	mov    %bl,0x85a0(%eax,%ebx,1)ae01553,52371
     ae7:	83 c3 01             	add    $0x1,%ebxae71554,52434
  pid = fork();pid1555,52483
  seq = 0;seq1556,52499
     aea:	39 d3                	cmp    %edx,%ebxaea1561,52605
     aec:	75 f2                	jne    ae0 <pipe1+0xd0>aec1562,52654
     aee:	83 ec 04             	sub    $0x4,%espaee1565,52778
     af1:	89 de                	mov    %ebx,%esiaf11566,52827
     af3:	68 09 04 00 00       	push   $0x409af31567,52876
     af8:	68 a0 85 00 00       	push   $0x85a0af81568,52922
     afd:	ff 75 e4             	pushl  -0x1c(%ebp)afd1569,52969
     b00:	e8 bd 2d 00 00       	call   38c2 <write>b001570,53020
     b05:	83 c4 10             	add    $0x10,%espb051571,53072
     b08:	3d 09 04 00 00       	cmp    $0x409,%eaxb081572,53122
     b0d:	75 7b                	jne    b8a <pipe1+0x17a>b0d1573,53173
  pid = fork();pid1575,53234
  seq = 0;seq1576,53250
     b0f:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebxb0f1580,53324
     b15:	75 ba                	jne    ad1 <pipe1+0xc1>b151581,53376
     b17:	e8 86 2d 00 00       	call   38a2 <exit>b171588,53555
      cc = cc * 2;cc1590,53624
        cc = sizeof(buf);cc1592,53670
     b1c:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)b1c1595,53729
     b23:	75 26                	jne    b4b <pipe1+0x13b>b231596,53788
     b25:	83 ec 0c             	sub    $0xc,%espb251601,53935
     b28:	ff 75 e0             	pushl  -0x20(%ebp)b281602,53984
     b2b:	e8 9a 2d 00 00       	call   38ca <close>b2b1603,54035
     b30:	e8 75 2d 00 00       	call   38aa <wait>b301605,54099
     b35:	58                   	pop    %eaxb351611,54238
     b36:	5a                   	pop    %edxb361612,54282
     b37:	68 9b 40 00 00       	push   $0x409bb371613,54326
     b3c:	6a 01                	push   $0x1b3c1614,54373
     b3e:	e8 bd 2e 00 00       	call   3a00 <printf>b3e1615,54417
     b43:	83 c4 10             	add    $0x10,%espb431616,54470
     b46:	e9 6e ff ff ff       	jmp    ab9 <pipe1+0xa9>b461617,54520
      cc = cc * 2;cc1618,54576
        cc = sizeof(buf);cc1620,54622
     b4b:	83 ec 04             	sub    $0x4,%espb4b1624,54732
     b4e:	ff 75 d4             	pushl  -0x2c(%ebp)b4e1625,54781
     b51:	68 84 40 00 00       	push   $0x4084b511626,54832
     b56:	6a 01                	push   $0x1b561627,54879
     b58:	e8 a3 2e 00 00       	call   3a00 <printf>b581628,54923
     b5d:	e8 40 2d 00 00       	call   38a2 <exit>b5d1630,54990
     b62:	83 ec 08             	sub    $0x8,%espb621637,55147
     b65:	68 59 40 00 00       	push   $0x4059b651638,55196
     b6a:	6a 01                	push   $0x1b6a1639,55243
     b6c:	e8 8f 2e 00 00       	call   3a00 <printf>b6c1640,55287
     b71:	e8 2c 2d 00 00       	call   38a2 <exit>b711642,55352
     b76:	83 ec 08             	sub    $0x8,%espb761649,55499
     b79:	68 a5 40 00 00       	push   $0x40a5b791650,55548
     b7e:	6a 01                	push   $0x1b7e1651,55595
     b80:	e8 7b 2e 00 00       	call   3a00 <printf>b801652,55639
     b85:	e8 18 2d 00 00       	call   38a2 <exit>b851654,55704
     b8a:	83 ec 08             	sub    $0x8,%espb8a1661,55939
     b8d:	68 68 40 00 00       	push   $0x4068b8d1662,55988
     b92:	6a 01                	push   $0x1b921663,56035
     b94:	e8 67 2e 00 00       	call   3a00 <printf>b941664,56079
     b99:	e8 04 2d 00 00       	call   38a2 <exit>b991666,56148
     b9e:	66 90                	xchg   %ax,%axb9e1667,56199
voidvoid1673,56309
     ba0:	55                   	push   %ebpba01676,56330
     ba1:	89 e5                	mov    %esp,%ebpba11677,56374
     ba3:	57                   	push   %ediba31678,56423
     ba4:	56                   	push   %esiba41679,56467
     ba5:	53                   	push   %ebxba51680,56511
     ba6:	83 ec 24             	sub    $0x24,%espba61681,56555
     ba9:	68 b4 40 00 00       	push   $0x40b4ba91686,56671
     bae:	6a 01                	push   $0x1bae1687,56718
     bb0:	e8 4b 2e 00 00       	call   3a00 <printf>bb01688,56762
  pid1 = fork();pid11689,56815
     bb5:	e8 e0 2c 00 00       	call   389a <fork>bb51690,56832
     bba:	83 c4 10             	add    $0x10,%espbba1692,56899
     bbd:	85 c0                	test   %eax,%eaxbbd1693,56949
     bbf:	75 02                	jne    bc3 <preempt+0x23>bbf1694,56998
     bc1:	eb fe                	jmp    bc1 <preempt+0x21>bc11695,57056
     bc3:	89 c7                	mov    %eax,%edibc31696,57114
  pid2 = fork();pid21700,57184
     bc5:	e8 d0 2c 00 00       	call   389a <fork>bc51701,57201
     bca:	85 c0                	test   %eax,%eaxbca1703,57268
  pid1 = fork();pid11704,57317
  pid2 = fork();pid21709,57371
     bcc:	89 c6                	mov    %eax,%esibcc1710,57388
     bce:	75 02                	jne    bd2 <preempt+0x32>bce1712,57453
     bd0:	eb fe                	jmp    bd0 <preempt+0x30>bd01713,57511
     bd2:	8d 45 e0             	lea    -0x20(%ebp),%eaxbd21718,57604
     bd5:	83 ec 0c             	sub    $0xc,%espbd51719,57660
     bd8:	50                   	push   %eaxbd81720,57709
     bd9:	e8 d4 2c 00 00       	call   38b2 <pipe>bd91721,57753
  pid3 = fork();pid31722,57804
     bde:	e8 b7 2c 00 00       	call   389a <fork>bde1723,57821
     be3:	83 c4 10             	add    $0x10,%espbe31725,57889
     be6:	85 c0                	test   %eax,%eaxbe61726,57939
  pid3 = fork();pid31732,58039
     be8:	89 c3                	mov    %eax,%ebxbe81733,58056
     bea:	75 47                	jne    c33 <preempt+0x93>bea1735,58122
     bec:	83 ec 0c             	sub    $0xc,%espbec1737,58200
     bef:	ff 75 e0             	pushl  -0x20(%ebp)bef1738,58249
     bf2:	e8 d3 2c 00 00       	call   38ca <close>bf21739,58300
     bf7:	83 c4 0c             	add    $0xc,%espbf71741,58388
     bfa:	6a 01                	push   $0x1bfa1742,58437
     bfc:	68 79 46 00 00       	push   $0x4679bfc1743,58481
     c01:	ff 75 e4             	pushl  -0x1c(%ebp)c011744,58528
     c04:	e8 b9 2c 00 00       	call   38c2 <write>c041745,58579
     c09:	83 c4 10             	add    $0x10,%espc091746,58631
     c0c:	83 f8 01             	cmp    $0x1,%eaxc0c1747,58681
     c0f:	74 12                	je     c23 <preempt+0x83>c0f1748,58730
     c11:	83 ec 08             	sub    $0x8,%espc111750,58828
     c14:	68 be 40 00 00       	push   $0x40bec141751,58877
     c19:	6a 01                	push   $0x1c191752,58924
     c1b:	e8 e0 2d 00 00       	call   3a00 <printf>c1b1753,58968
     c20:	83 c4 10             	add    $0x10,%espc201754,59021
     c23:	83 ec 0c             	sub    $0xc,%espc231756,59091
     c26:	ff 75 e4             	pushl  -0x1c(%ebp)c261757,59140
     c29:	e8 9c 2c 00 00       	call   38ca <close>c291758,59191
     c2e:	83 c4 10             	add    $0x10,%espc2e1759,59243
     c31:	eb fe                	jmp    c31 <preempt+0x91>c311760,59293
     c33:	83 ec 0c             	sub    $0xc,%espc331766,59394
     c36:	ff 75 e4             	pushl  -0x1c(%ebp)c361767,59443
     c39:	e8 8c 2c 00 00       	call   38ca <close>c391768,59494
     c3e:	83 c4 0c             	add    $0xc,%espc3e1770,59590
     c41:	68 00 20 00 00       	push   $0x2000c411771,59639
     c46:	68 a0 85 00 00       	push   $0x85a0c461772,59686
     c4b:	ff 75 e0             	pushl  -0x20(%ebp)c4b1773,59733
     c4e:	e8 67 2c 00 00       	call   38ba <read>c4e1774,59784
     c53:	83 c4 10             	add    $0x10,%espc531775,59835
     c56:	83 f8 01             	cmp    $0x1,%eaxc561776,59885
     c59:	74 1a                	je     c75 <preempt+0xd5>c591777,59934
     c5b:	83 ec 08             	sub    $0x8,%espc5b1779,60029
     c5e:	68 d2 40 00 00       	push   $0x40d2c5e1780,60078
     c63:	6a 01                	push   $0x1c631781,60125
     c65:	e8 96 2d 00 00       	call   3a00 <printf>c651782,60169
     c6a:	83 c4 10             	add    $0x10,%espc6a1784,60234
     c6d:	8d 65 f4             	lea    -0xc(%ebp),%espc6d1791,60370
     c70:	5b                   	pop    %ebxc701792,60425
     c71:	5e                   	pop    %esic711793,60469
     c72:	5f                   	pop    %edic721794,60513
     c73:	5d                   	pop    %ebpc731795,60557
     c74:	c3                   	ret    c741796,60601
     c75:	83 ec 0c             	sub    $0xc,%espc751803,60774
     c78:	ff 75 e0             	pushl  -0x20(%ebp)c781804,60823
     c7b:	e8 4a 2c 00 00       	call   38ca <close>c7b1805,60874
     c80:	58                   	pop    %eaxc801807,60951
     c81:	5a                   	pop    %edxc811808,60995
     c82:	68 e5 40 00 00       	push   $0x40e5c821809,61039
     c87:	6a 01                	push   $0x1c871810,61086
     c89:	e8 72 2d 00 00       	call   3a00 <printf>c891811,61130
     c8e:	89 3c 24             	mov    %edi,(%esp)c8e1813,61197
     c91:	e8 3c 2c 00 00       	call   38d2 <kill>c911814,61248
     c96:	89 34 24             	mov    %esi,(%esp)c961816,61313
     c99:	e8 34 2c 00 00       	call   38d2 <kill>c991817,61364
     c9e:	89 1c 24             	mov    %ebx,(%esp)c9e1819,61429
     ca1:	e8 2c 2c 00 00       	call   38d2 <kill>ca11820,61480
     ca6:	59                   	pop    %ecxca61822,61556
     ca7:	5b                   	pop    %ebxca71823,61600
     ca8:	68 ee 40 00 00       	push   $0x40eeca81824,61644
     cad:	6a 01                	push   $0x1cad1825,61691
     caf:	e8 4c 2d 00 00       	call   3a00 <printf>caf1826,61735
     cb4:	e8 f1 2b 00 00       	call   38aa <wait>cb41828,61798
     cb9:	e8 ec 2b 00 00       	call   38aa <wait>cb91830,61859
     cbe:	e8 e7 2b 00 00       	call   38aa <wait>cbe1832,61920
     cc3:	5e                   	pop    %esicc31834,62000
     cc4:	5f                   	pop    %edicc41835,62044
     cc5:	68 f7 40 00 00       	push   $0x40f7cc51836,62088
     cca:	6a 01                	push   $0x1cca1837,62135
     ccc:	e8 2f 2d 00 00       	call   3a00 <printf>ccc1838,62179
     cd1:	83 c4 10             	add    $0x10,%espcd11839,62232
     cd4:	eb 97                	jmp    c6d <preempt+0xcd>cd41840,62282
     cd6:	8d 76 00             	lea    0x0(%esi),%esicd61841,62340
     cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edicd91842,62394
voidvoid1848,62527
     ce0:	55                   	push   %ebpce01851,62549
     ce1:	89 e5                	mov    %esp,%ebpce11852,62593
     ce3:	56                   	push   %esice31853,62642
     ce4:	be 64 00 00 00       	mov    $0x64,%esice41854,62686
     ce9:	53                   	push   %ebxce91855,62736
     cea:	eb 14                	jmp    d00 <exitwait+0x20>cea1856,62780
     cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esicec1857,62839
    pid = fork();pid1858,62900
     cf0:	74 6f                	je     d61 <exitwait+0x81>cf01864,63002
     cf2:	e8 b3 2b 00 00       	call   38aa <wait>cf21866,63086
     cf7:	39 c3                	cmp    %eax,%ebxcf71867,63137
     cf9:	75 2d                	jne    d28 <exitwait+0x48>cf91868,63186
voidvoid1869,63245
     cfb:	83 ee 01             	sub    $0x1,%esicfb1875,63310
     cfe:	74 48                	je     d48 <exitwait+0x68>cfe1876,63359
    pid = fork();pid1877,63418
     d00:	e8 95 2b 00 00       	call   389a <fork>d001878,63436
     d05:	85 c0                	test   %eax,%eaxd051880,63504
    pid = fork();pid1886,63613
     d07:	89 c3                	mov    %eax,%ebxd071887,63631
     d09:	79 e5                	jns    cf0 <exitwait+0x10>d091889,63697
     d0b:	83 ec 08             	sub    $0x8,%espd0b1891,63790
     d0e:	68 61 4c 00 00       	push   $0x4c61d0e1892,63839
     d13:	6a 01                	push   $0x1d131893,63886
     d15:	e8 e6 2c 00 00       	call   3a00 <printf>d151894,63930
     d1a:	83 c4 10             	add    $0x10,%espd1a1896,63997
     d1d:	8d 65 f8             	lea    -0x8(%ebp),%espd1d1903,64116
     d20:	5b                   	pop    %ebxd201904,64171
     d21:	5e                   	pop    %esid211905,64215
     d22:	5d                   	pop    %ebpd221906,64259
     d23:	c3                   	ret    d231907,64303
     d24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esid241908,64343
     d28:	83 ec 08             	sub    $0x8,%espd281915,64535
     d2b:	68 03 41 00 00       	push   $0x4103d2b1916,64584
     d30:	6a 01                	push   $0x1d301917,64631
     d32:	e8 c9 2c 00 00       	call   3a00 <printf>d321918,64675
     d37:	83 c4 10             	add    $0x10,%espd371920,64744
     d3a:	8d 65 f8             	lea    -0x8(%ebp),%espd3a1927,64863
     d3d:	5b                   	pop    %ebxd3d1928,64918
     d3e:	5e                   	pop    %esid3e1929,64962
     d3f:	5d                   	pop    %ebpd3f1930,65006
     d40:	c3                   	ret    d401931,65050
     d41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esid411932,65090
     d48:	83 ec 08             	sub    $0x8,%espd481939,65226
     d4b:	68 13 41 00 00       	push   $0x4113d4b1940,65275
     d50:	6a 01                	push   $0x1d501941,65322
     d52:	e8 a9 2c 00 00       	call   3a00 <printf>d521942,65366
     d57:	83 c4 10             	add    $0x10,%espd571943,65419
     d5a:	8d 65 f8             	lea    -0x8(%ebp),%espd5a1945,65471
     d5d:	5b                   	pop    %ebxd5d1946,65526
     d5e:	5e                   	pop    %esid5e1947,65570
     d5f:	5d                   	pop    %ebpd5f1948,65614
     d60:	c3                   	ret    d601949,65658
     d61:	e8 3c 2b 00 00       	call   38a2 <exit>d611956,65813
     d66:	8d 76 00             	lea    0x0(%esi),%esid661957,65864
     d69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edid691958,65918
voidvoid1964,66029
     d70:	55                   	push   %ebpd701967,66046
     d71:	89 e5                	mov    %esp,%ebpd711968,66090
     d73:	57                   	push   %edid731969,66139
     d74:	56                   	push   %esid741970,66183
     d75:	53                   	push   %ebxd751971,66227
     d76:	83 ec 14             	sub    $0x14,%espd761972,66271
     d79:	68 20 41 00 00       	push   $0x4120d791977,66383
     d7e:	6a 01                	push   $0x1d7e1978,66430
     d80:	e8 7b 2c 00 00       	call   3a00 <printf>d801979,66474
  ppid = getpid();ppid1980,66527
     d85:	e8 98 2b 00 00       	call   3922 <getpid>d851981,66546
     d8a:	89 c6                	mov    %eax,%esid8a1982,66599
     d8c:	e8 09 2b 00 00       	call   389a <fork>d8c1984,66675
     d91:	83 c4 10             	add    $0x10,%espd911985,66726
     d94:	85 c0                	test   %eax,%eaxd941986,66776
     d96:	75 70                	jne    e08 <mem+0x98>d961987,66825
     d98:	31 db                	xor    %ebx,%ebxd981988,66879
     d9a:	eb 08                	jmp    da4 <mem+0x34>d9a1989,66928
     d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esid9c1990,66982
    m1 = 0;m11991,67043
     da0:	89 18                	mov    %ebx,(%eax)da01994,67117
     da2:	89 c3                	mov    %eax,%ebxda21995,67168
  ppid = getpid();ppid1998,67245
    m1 = 0;m12000,67291
     da4:	83 ec 0c             	sub    $0xc,%espda42002,67341
     da7:	68 11 27 00 00       	push   $0x2711da72003,67390
     dac:	e8 7f 2e 00 00       	call   3c30 <malloc>dac2004,67437
     db1:	83 c4 10             	add    $0x10,%espdb12005,67490
     db4:	85 c0                	test   %eax,%eaxdb42006,67540
     db6:	75 e8                	jne    da0 <mem+0x30>db62007,67589
      m1 = m2;m12009,67667
     db8:	85 db                	test   %ebx,%ebxdb82012,67703
     dba:	74 18                	je     dd4 <mem+0x64>dba2013,67752
     dbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esidbc2014,67806
      m2 = *(char**)m1;m22015,67867
     dc0:	8b 3b                	mov    (%ebx),%edidc02016,67891
     dc2:	83 ec 0c             	sub    $0xc,%espdc22018,67958
     dc5:	53                   	push   %ebxdc52019,68007
     dc6:	89 fb                	mov    %edi,%ebxdc62020,68051
     dc8:	e8 d3 2d 00 00       	call   3ba0 <free>dc82021,68100
    m1 = 0;m12022,68151
      m1 = m2;m12025,68225
     dcd:	83 c4 10             	add    $0x10,%espdcd2028,68261
     dd0:	85 db                	test   %ebx,%ebxdd02029,68311
     dd2:	75 ec                	jne    dc0 <mem+0x50>dd22030,68360
      m2 = *(char**)m1;m22031,68414
      m1 = m2;m12033,68454
    m1 = malloc(1024*20);m12035,68475
     dd4:	83 ec 0c             	sub    $0xc,%espdd42036,68501
     dd7:	68 00 50 00 00       	push   $0x5000dd72037,68550
     ddc:	e8 4f 2e 00 00       	call   3c30 <malloc>ddc2038,68597
     de1:	83 c4 10             	add    $0x10,%espde12040,68667
     de4:	85 c0                	test   %eax,%eaxde42041,68717
     de6:	74 30                	je     e18 <mem+0xa8>de62042,68766
     de8:	83 ec 0c             	sub    $0xc,%espde82048,68919
     deb:	50                   	push   %eaxdeb2049,68968
     dec:	e8 af 2d 00 00       	call   3ba0 <free>dec2050,69012
     df1:	58                   	pop    %eaxdf12052,69090
     df2:	5a                   	pop    %edxdf22053,69134
     df3:	68 44 41 00 00       	push   $0x4144df32054,69178
     df8:	6a 01                	push   $0x1df82055,69225
     dfa:	e8 01 2c 00 00       	call   3a00 <printf>dfa2056,69269
     dff:	e8 9e 2a 00 00       	call   38a2 <exit>dff2058,69334
     e04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie042059,69385
     e08:	8d 65 f4             	lea    -0xc(%ebp),%espe082064,69475
     e0b:	5b                   	pop    %ebxe0b2065,69530
     e0c:	5e                   	pop    %esie0c2066,69574
     e0d:	5f                   	pop    %edie0d2067,69618
     e0e:	5d                   	pop    %ebpe0e2068,69662
     e0f:	e9 96 2a 00 00       	jmp    38aa <wait>e0f2075,69788
     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie142076,69839
      m1 = m2;m12078,69916
    m1 = malloc(1024*20);m12080,69937
     e18:	83 ec 08             	sub    $0x8,%espe182083,70027
     e1b:	68 2a 41 00 00       	push   $0x412ae1b2084,70076
     e20:	6a 01                	push   $0x1e202085,70123
     e22:	e8 d9 2b 00 00       	call   3a00 <printf>e222086,70167
     e27:	89 34 24             	mov    %esi,(%esp)e272088,70238
     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>e2a2089,70289
     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>e2f2091,70354
     e34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esie342092,70405
     e3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edie3a2093,70459
voidvoid2099,70637
     e40:	55                   	push   %ebpe402102,70659
     e41:	89 e5                	mov    %esp,%ebpe412103,70703
     e43:	57                   	push   %edie432104,70752
     e44:	56                   	push   %esie442105,70796
     e45:	53                   	push   %ebxe452106,70840
     e46:	83 ec 34             	sub    $0x34,%espe462107,70884
     e49:	68 4c 41 00 00       	push   $0x414ce492112,71012
     e4e:	6a 01                	push   $0x1e4e2113,71059
     e50:	e8 ab 2b 00 00       	call   3a00 <printf>e502114,71103
     e55:	c7 04 24 5b 41 00 00 	movl   $0x415b,(%esp)e552117,71179
     e5c:	e8 91 2a 00 00       	call   38f2 <unlink>e5c2118,71233
  fd = open("sharedfd", O_CREATE|O_RDWR);fd2119,71286
     e61:	5b                   	pop    %ebxe612120,71328
     e62:	5e                   	pop    %esie622121,71372
     e63:	68 02 02 00 00       	push   $0x202e632122,71416
     e68:	68 5b 41 00 00       	push   $0x415be682123,71462
     e6d:	e8 70 2a 00 00       	call   38e2 <open>e6d2124,71509
     e72:	83 c4 10             	add    $0x10,%espe722126,71574
     e75:	85 c0                	test   %eax,%eaxe752127,71624
     e77:	0f 88 29 01 00 00    	js     fa6 <sharedfd+0x166>e772128,71673
     e7d:	89 c7                	mov    %eax,%edie7d2129,71733
  pid = fork();pid2133,71858
     e7f:	8d 75 de             	lea    -0x22(%ebp),%esie7f2135,71918
     e82:	bb e8 03 00 00       	mov    $0x3e8,%ebxe822136,71974
  fd = open("sharedfd", O_CREATE|O_RDWR);fd2137,72025
  pid = fork();pid2142,72157
     e87:	e8 0e 2a 00 00       	call   389a <fork>e872143,72173
     e8c:	83 f8 01             	cmp    $0x1,%eaxe8c2145,72268
  fd = open("sharedfd", O_CREATE|O_RDWR);fd2146,72317
  pid = fork();pid2151,72449
     e8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)e8f2152,72465
     e92:	19 c0                	sbb    %eax,%eaxe922154,72565
     e94:	83 ec 04             	sub    $0x4,%espe942155,72614
     e97:	83 e0 f3             	and    $0xfffffff3,%eaxe972156,72663
     e9a:	6a 0a                	push   $0xae9a2157,72719
     e9c:	83 c0 70             	add    $0x70,%eaxe9c2158,72763
     e9f:	50                   	push   %eaxe9f2159,72813
     ea0:	56                   	push   %esiea02160,72857
     ea1:	e8 6a 28 00 00       	call   3710 <memset>ea12161,72901
     ea6:	83 c4 10             	add    $0x10,%espea62162,72954
     ea9:	eb 0a                	jmp    eb5 <sharedfd+0x75>ea92163,73004
     eab:	90                   	nopeab2164,73063
     eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esieac2165,73099
     eb0:	83 eb 01             	sub    $0x1,%ebxeb02167,73189
     eb3:	74 26                	je     edb <sharedfd+0x9b>eb32168,73238
     eb5:	83 ec 04             	sub    $0x4,%espeb52170,73349
     eb8:	6a 0a                	push   $0xaeb82171,73398
     eba:	56                   	push   %esieba2172,73442
     ebb:	57                   	push   %ediebb2173,73486
     ebc:	e8 01 2a 00 00       	call   38c2 <write>ebc2174,73530
     ec1:	83 c4 10             	add    $0x10,%espec12175,73582
     ec4:	83 f8 0a             	cmp    $0xa,%eaxec42176,73632
     ec7:	74 e7                	je     eb0 <sharedfd+0x70>ec72177,73681
     ec9:	83 ec 08             	sub    $0x8,%espec92179,73793
     ecc:	68 4c 4e 00 00       	push   $0x4e4cecc2180,73842
     ed1:	6a 01                	push   $0x1ed12181,73889
     ed3:	e8 28 2b 00 00       	call   3a00 <printf>ed32182,73933
     ed8:	83 c4 10             	add    $0x10,%esped82184,73999
     edb:	8b 4d d4             	mov    -0x2c(%ebp),%ecxedb2188,74074
     ede:	85 c9                	test   %ecx,%ecxede2189,74130
     ee0:	0f 84 f4 00 00 00    	je     fda <sharedfd+0x19a>ee02190,74179
     ee6:	e8 bf 29 00 00       	call   38aa <wait>ee62194,74270
     eeb:	83 ec 0c             	sub    $0xc,%espeeb2196,74334
     eee:	31 db                	xor    %ebx,%ebxeee2197,74383
     ef0:	57                   	push   %edief02198,74432
     ef1:	8d 7d e8             	lea    -0x18(%ebp),%edief12199,74476
     ef4:	e8 d1 29 00 00       	call   38ca <close>ef42200,74532
  fd = open("sharedfd", 0);fd2201,74584
     ef9:	58                   	pop    %eaxef92202,74612
     efa:	5a                   	pop    %edxefa2203,74656
     efb:	6a 00                	push   $0x0efb2204,74700
     efd:	68 5b 41 00 00       	push   $0x415befd2205,74744
     f02:	e8 db 29 00 00       	call   38e2 <open>f022206,74791
     f07:	83 c4 10             	add    $0x10,%espf072208,74856
     f0a:	31 d2                	xor    %edx,%edxf0a2209,74906
     f0c:	85 c0                	test   %eax,%eaxf0c2210,74955
  fd = open("sharedfd", 0);fd2216,75063
     f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)f0e2217,75091
     f11:	0f 88 a9 00 00 00    	js     fc0 <sharedfd+0x180>f112219,75161
     f17:	89 f6                	mov    %esi,%esif172220,75221
     f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif192221,75270
  nc = np = 0;nc2225,75409
     f20:	83 ec 04             	sub    $0x4,%espf202227,75471
     f23:	89 55 d4             	mov    %edx,-0x2c(%ebp)f232228,75520
     f26:	6a 0a                	push   $0xaf262229,75576
     f28:	56                   	push   %esif282230,75620
     f29:	ff 75 d0             	pushl  -0x30(%ebp)f292231,75664
     f2c:	e8 89 29 00 00       	call   38ba <read>f2c2232,75715
     f31:	83 c4 10             	add    $0x10,%espf312233,75766
     f34:	85 c0                	test   %eax,%eaxf342234,75816
     f36:	7e 27                	jle    f5f <sharedfd+0x11f>f362235,75865
     f38:	89 f0                	mov    %esi,%eaxf382236,75925
     f3a:	8b 55 d4             	mov    -0x2c(%ebp),%edxf3a2237,75974
     f3d:	eb 13                	jmp    f52 <sharedfd+0x112>f3d2238,76030
     f3f:	90                   	nopf3f2239,76090
     f40:	80 f9 70             	cmp    $0x70,%clf402245,76240
     f43:	0f 94 c1             	sete   %clf432246,76289
     f46:	0f b6 c9             	movzbl %cl,%ecxf462247,76332
     f49:	01 cb                	add    %ecx,%ebxf492248,76380
     f4b:	83 c0 01             	add    $0x1,%eaxf4b2249,76429
  nc = np = 0;nc2253,76556
     f4e:	39 c7                	cmp    %eax,%edif4e2256,76656
     f50:	74 ce                	je     f20 <sharedfd+0xe0>f502257,76705
     f52:	0f b6 08             	movzbl (%eax),%ecxf522259,76788
     f55:	80 f9 63             	cmp    $0x63,%clf552260,76839
     f58:	75 e6                	jne    f40 <sharedfd+0x100>f582261,76888
     f5a:	83 c2 01             	add    $0x1,%edxf5a2263,76962
     f5d:	eb ec                	jmp    f4b <sharedfd+0x10b>f5d2264,77011
     f5f:	83 ec 0c             	sub    $0xc,%espf5f2270,77132
     f62:	ff 75 d0             	pushl  -0x30(%ebp)f622271,77181
     f65:	e8 60 29 00 00       	call   38ca <close>f652272,77232
     f6a:	c7 04 24 5b 41 00 00 	movl   $0x415b,(%esp)f6a2274,77306
     f71:	e8 7c 29 00 00       	call   38f2 <unlink>f712275,77360
     f76:	8b 55 d4             	mov    -0x2c(%ebp),%edxf762277,77447
     f79:	83 c4 10             	add    $0x10,%espf792278,77503
     f7c:	81 fa 10 27 00 00    	cmp    $0x2710,%edxf7c2279,77553
     f82:	75 5b                	jne    fdf <sharedfd+0x19f>f822280,77605
     f84:	81 fb 10 27 00 00    	cmp    $0x2710,%ebxf842281,77665
     f8a:	75 53                	jne    fdf <sharedfd+0x19f>f8a2282,77717
     f8c:	83 ec 08             	sub    $0x8,%espf8c2284,77809
     f8f:	68 64 41 00 00       	push   $0x4164f8f2285,77858
     f94:	6a 01                	push   $0x1f942286,77905
     f96:	e8 65 2a 00 00       	call   3a00 <printf>f962287,77949
     f9b:	83 c4 10             	add    $0x10,%espf9b2288,78002
     f9e:	8d 65 f4             	lea    -0xc(%ebp),%espf9e2294,78129
     fa1:	5b                   	pop    %ebxfa12295,78184
     fa2:	5e                   	pop    %esifa22296,78228
     fa3:	5f                   	pop    %edifa32297,78272
     fa4:	5d                   	pop    %ebpfa42298,78316
     fa5:	c3                   	ret    fa52299,78360
  fd = open("sharedfd", O_CREATE|O_RDWR);fd2303,78455
     fa6:	83 ec 08             	sub    $0x8,%espfa62306,78571
     fa9:	68 20 4e 00 00       	push   $0x4e20fa92307,78620
     fae:	6a 01                	push   $0x1fae2308,78667
     fb0:	e8 4b 2a 00 00       	call   3a00 <printf>fb02309,78711
     fb5:	83 c4 10             	add    $0x10,%espfb52311,78776
     fb8:	8d 65 f4             	lea    -0xc(%ebp),%espfb82318,78935
     fbb:	5b                   	pop    %ebxfbb2319,78990
     fbc:	5e                   	pop    %esifbc2320,79034
     fbd:	5f                   	pop    %edifbd2321,79078
     fbe:	5d                   	pop    %ebpfbe2322,79122
     fbf:	c3                   	ret    fbf2323,79166
  fd = open("sharedfd", 0);fd2327,79238
     fc0:	83 ec 08             	sub    $0x8,%espfc02330,79342
     fc3:	68 6c 4e 00 00       	push   $0x4e6cfc32331,79391
     fc8:	6a 01                	push   $0x1fc82332,79438
     fca:	e8 31 2a 00 00       	call   3a00 <printf>fca2333,79482
     fcf:	83 c4 10             	add    $0x10,%espfcf2335,79547
     fd2:	8d 65 f4             	lea    -0xc(%ebp),%espfd22342,79706
     fd5:	5b                   	pop    %ebxfd52343,79761
     fd6:	5e                   	pop    %esifd62344,79805
     fd7:	5f                   	pop    %edifd72345,79849
     fd8:	5d                   	pop    %ebpfd82346,79893
     fd9:	c3                   	ret    fd92347,79937
     fda:	e8 c3 28 00 00       	call   38a2 <exit>fda2354,80080
     fdf:	53                   	push   %ebxfdf2361,80291
     fe0:	52                   	push   %edxfe02362,80335
     fe1:	68 71 41 00 00       	push   $0x4171fe12363,80379
     fe6:	6a 01                	push   $0x1fe62364,80426
     fe8:	e8 13 2a 00 00       	call   3a00 <printf>fe82365,80470
     fed:	e8 b0 28 00 00       	call   38a2 <exit>fed2367,80535
     ff2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esiff22368,80586
     ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%ediff92369,80647
voidvoid2375,80819
voidvoid2395,81416
voidvoid2409,81863
    fname = names[pi];fname2423,82267
    pid = fork();pid2429,82456
    fname = names[i];fname2467,83656
    fd = open(fname, 0);fd2468,83678
    total = 0;total2470,83752
    fname = names[i];fname2476,83859
    fd = open(fname, 0);fd2477,83881
    total = 0;total2481,84052
    fname = names[i];fname2488,84209
    fd = open(fname, 0);fd2489,84231
    total = 0;total2492,84366
    fname = names[i];fname2510,85191
    fd = open(fname, 0);fd2511,85213
    total = 0;total2512,85238
    fd = open(fname, 0);fd2573,87361
    total = 0;total2574,87386
      fd = open(fname, O_CREATE | O_RDWR);fd2590,87881
      fd = open(fname, O_CREATE | O_RDWR);fd2603,88304
      fd = open(fname, O_CREATE | O_RDWR);fd2661,90360
    fname = names[pi];fname2683,91138
    pid = fork();pid2686,91181
voidvoid2702,91704
voidvoid2720,92183
    pid = fork();pid2735,92578
      fd = open(name, 0);fd2793,94321
      fd = open(name, 0);fd2808,94884
      fd = open(name, 0);fd2818,95162
      fd = open(name, 0);fd2828,95475
        fd = open(name, O_CREATE | O_RDWR);fd2973,100366
        fd = open(name, O_CREATE | O_RDWR);fd2982,100638
        fd = open(name, O_CREATE | O_RDWR);fd2992,100951
      fd = open(name, 0);fd3053,103274
        fd = open(name, O_CREATE | O_RDWR);fd3066,103789
    pid = fork();pid3078,104221
      fd = open(name, 0);fd3088,104573
voidvoid3109,105353
  fd = open("unlinkread", O_CREATE | O_RDWR);fd3123,105801
  fd = open("unlinkread", O_RDWR);fd3147,106743
  fd = open("unlinkread", O_RDWR);fd3161,107176
  fd1 = open("unlinkread", O_CREATE | O_RDWR);fd13179,107802
  fd1 = open("unlinkread", O_CREATE | O_RDWR);fd13191,108210
  fd = open("unlinkread", O_CREATE | O_RDWR);fd3255,110697
  fd1 = open("unlinkread", O_CREATE | O_RDWR);fd13291,112001
  fd = open("unlinkread", O_RDWR);fd3320,112947
voidvoid3337,113488
  fd = open("lf1", O_CREATE|O_RDWR);fd3358,114128
  fd = open("lf2", 0);fd3419,116452
  fd = open("lf2", 0);fd3432,116879
  fd = open("lf1", O_CREATE|O_RDWR);fd3511,119769
  fd = open("lf2", 0);fd3576,121867
voidvoid3630,123557
    pid = fork();pid3648,124055
voidvoid3654,124216
    pid = fork();pid3677,124910
      fd = open(file, O_CREATE | O_RDWR);fd3693,125567
      fd = open(file, O_CREATE | O_RDWR);fd3714,126277
    pid = fork();pid3758,127479
      fd = open(file, O_CREATE | O_RDWR);fd3779,128397
    pid = fork();pid3798,129241
    pid = fork();pid3819,129862
    pid = fork();pid3832,130176
  fd = open(".", 0);fd3868,131254
  n = 0;n3874,131505
  fd = open(".", 0);fd3882,131661
  n = 0;n3884,131731
      i = de.name[1] - '0';i3905,132725
    pid = fork();pid4013,136693
    pid = fork();pid4022,136895
    pid = fork();pid4084,139208
      i = de.name[1] - '0';i4122,140539
      fd = open(file, O_CREATE | O_RDWR);fd4133,141020
voidvoid4149,141532
  pid = fork();pid4168,142143
  pid = fork();pid4178,142389
    x = x * 1103515245 + 12345;x4190,142756
    x = x * 1103515245 + 12345;x4205,143264
    x = x * 1103515245 + 12345;x4226,143979
    x = x * 1103515245 + 12345;x4281,146001
  pid = fork();pid4295,146507
voidvoid4318,147100
  fd = open("bd", O_CREATE);fd4337,147680
  fd = open("bd", O_CREATE);fd4356,148366
  fd = open("bd", O_CREATE);fd4544,154081
voidvoid4559,154519
  fd = open("dd/ff", O_CREATE | O_RDWR);fd4586,155386
  fd = open("dd/ff", O_CREATE | O_RDWR);fd4599,155817
  fd = open("dd/dd/ff", O_CREATE | O_RDWR);fd4637,157172
  fd = open("dd/dd/ff", O_CREATE | O_RDWR);fd4650,157613
  fd = open("dd/dd/../ff", 0);fd4667,158213
  fd = open("dd/dd/../ff", 0);fd4681,158639
  cc = read(fd, buf, sizeof(buf));cc4688,158852
  fd = open("dd/dd/ffff", 0);fd4784,162579
  fd = open("dd/dd/ffff", 0);fd4797,162994
  cc = read(fd, buf, sizeof(buf));cc5057,173210
  fd = open("dd/dd/../ff", 0);fd5148,176401
  fd = open("dd/dd/ff", O_CREATE | O_RDWR);fd5161,176802
  fd = open("dd/ff", O_CREATE | O_RDWR);fd5330,182743
  fd = open("dd/dd/ffff", 0);fd5499,188592
voidvoid5514,189044
voidvoid5528,189409
    fd = open("bigwrite", O_CREATE | O_RDWR);fd5546,189989
    fd = open("bigwrite", O_CREATE | O_RDWR);fd5559,190440
    fd = open("bigwrite", O_CREATE | O_RDWR);fd5659,193702
voidvoid5674,194175
  fd = open("bigfile", O_CREATE | O_RDWR);fd5693,194800
  fd = open("bigfile", O_CREATE | O_RDWR);fd5725,196189
  fd = open("bigfile", 0);fd5744,196749
  fd = open("bigfile", 0);fd5758,197157
  total = 0;total5795,198452
    cc = read(fd, buf, 300);cc5798,198535
  total = 0;total5873,201161
    cc = read(fd, buf, 300);cc5875,201195
  fd = open("bigfile", 0);fd5899,201963
  fd = open("bigfile", O_CREATE | O_RDWR);fd5911,202353
voidvoid5939,203237
  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);fd5972,204414
  fd = open("12345678901234/12345678901234/12345678901234", 0);fd5988,205111
  fd = open("12345678901234/12345678901234/12345678901234", 0);fd6077,208481
  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);fd6090,209011
voidvoid6120,210161
voidvoid6218,213889
voidvoid6341,217941
  fd = open("dirfile", O_CREATE);fd6355,218334
  fd = open("dirfile/xx", 0);fd6381,219344
  fd = open("dirfile/xx", O_CREATE);fd6393,219804
  fd = open(".", O_RDWR);fd6447,221940
  fd = open(".", 0);fd6459,222397
  fd = open(".", O_RDWR);fd6466,222687
  fd = open(".", 0);fd6471,222794
  fd = open("dirfile/xx", 0);fd6503,223966
  fd = open("dirfile", O_CREATE);fd6529,224827
  fd = open(".", 0);fd6542,225278
  fd = open(".", O_RDWR);fd6555,225679
voidvoid6624,228136
voidvoid6637,228445
    fd = open("", O_CREATE);fd6684,230113
    fd = open("xx", O_CREATE);fd6699,230757
voidvoid6774,233511
voidvoid6789,233968
    pid = fork();pid6804,234416
    pid = fork();pid6818,234771
    pid = fork();pid6880,236750
voidvoid6928,238140
  oldbrk = sbrk(0);oldbrk6936,238387
  a = sbrk(0);a6939,238446
voidvoid6946,238582
  oldbrk = sbrk(0);oldbrk6958,238933
  a = sbrk(0);a6963,239094
  oldbrk = sbrk(0);oldbrk6970,239293
  a = sbrk(0);a6974,239408
    b = sbrk(1);b6982,239708
  oldbrk = sbrk(0);oldbrk6990,240045
  a = sbrk(0);a6993,240104
    b = sbrk(1);b6997,240206
    a = b + 1;a7004,240384
  oldbrk = sbrk(0);oldbrk7006,240448
  a = sbrk(0);a7009,240507
    a = b + 1;a7017,240704
  pid = fork();pid7019,240723
    a = b + 1;a7026,240886
  pid = fork();pid7028,240905
  c = sbrk(1);c7035,241109
  c = sbrk(1);c7037,241173
  pid = fork();pid7040,241255
  c = sbrk(1);c7045,241349
  c = sbrk(1);c7048,241459
#define BIG (100*1024*1024)BIG7066,242071
  a = sbrk(0);a7067,242099
  amt = (BIG) - (uint)a;amt7072,242307
  p = sbrk(amt);p7073,242332
  lastaddr = (char*) (BIG-1);lastaddr7083,242735
  a = sbrk(0);a7087,242810
  lastaddr = (char*) (BIG-1);lastaddr7093,242992
  a = sbrk(0);a7098,243122
  c = sbrk(-4096);c7101,243232
  lastaddr = (char*) (BIG-1);lastaddr7104,243313
  a = sbrk(0);a7108,243388
  c = sbrk(-4096);c7110,243452
  c = sbrk(0);c7119,243786
  a = sbrk(0);a7133,244320
  c = sbrk(4096);c7138,244528
  a = sbrk(0);a7148,244840
  c = sbrk(4096);c7149,244855
  a = sbrk(0);a7171,245712
  c = sbrk(-(sbrk(0) - oldbrk));c7175,245871
  a = sbrk(0);a7182,246063
  c = sbrk(-(sbrk(0) - oldbrk));c7184,246127
    ppid = getpid();ppid7201,246838
    pid = fork();pid7204,246961
  c = sbrk(4096);c7291,250143
  c = sbrk(4096);c7315,251135
  a = sbrk(0);a7388,254088
    b = sbrk(1);b7391,254141
    ppid = getpid();ppid7447,256210
    pid = fork();pid7448,256231
  a = sbrk(0);a7459,256570
  c = sbrk(-(sbrk(0) - oldbrk));c7460,256585
  a = sbrk(0);a7484,257485
  c = sbrk(4096);c7485,257500
  c = sbrk(0);c7498,257987
  a = sbrk(0);a7510,258430
  c = sbrk(-4096);c7511,258445
#define BIG (100*1024*1024)BIG7520,258803
  a = sbrk(0);a7521,258831
  amt = (BIG) - (uint)a;amt7522,258846
  p = sbrk(amt);p7523,258871
  c = sbrk(1);c7541,259428
  c = sbrk(1);c7542,259443
    a = b + 1;a7552,259798
  pid = fork();pid7554,259817
voidvoid7568,260217
voidvoid7586,260701
  hi = 1100*1024;hi7596,260956
  hi = 1100*1024;hi7612,261447
  hi = 1100*1024;hi7650,262881
char uninit[10000];char7698,264538
voidvoid7699,264558
voidvoid7762,266734
  pid = fork();pid7773,267040
    fd = open("bigarg-ok", O_CREATE);fd7781,267348
  fd = open("bigarg-ok", 0);fd7791,267623
  pid = fork();pid7815,268551
  pid = fork();pid7824,269026
    fd = open("bigarg-ok", O_CREATE);fd7860,270780
  fd = open("bigarg-ok", 0);fd7874,271257
    fd = open("bigarg-ok", O_CREATE);fd7885,271682
voidvoid7904,272344
voidvoid7922,272843
voidvoid8303,286233
  pid = fork();pid8318,286609
    port = RTC_DATA;port8325,286900
  pid = fork();pid8345,287586
    port = RTC_ADDR;port8347,287618
    val = 0x09;  /* year */val8348,287639
    port = RTC_DATA;port8354,287926
void argptest()void8381,288867
  fd = open("init", O_RDONLY);fd8388,289081
void argptest()void8424,290556
  fd = open("init", O_RDONLY);fd8427,290584
unsigned long randstate = 1;unsigned8442,291092
unsigned intunsigned8443,291121
  randstate = randstate * 1664525 + 1013904223;randstate8446,291143
unsigned long randstate = 1;unsigned8451,291275
unsigned intunsigned8452,291304
  randstate = randstate * 1664525 + 1013904223;randstate8457,291419
unsigned long randstate = 1;unsigned8462,291534
unsigned intunsigned8463,291563
  randstate = randstate * 1664525 + 1013904223;randstate8466,291585
  os = s;os8491,292326
intint8512,293064
intint8533,293861
intint8542,294050
intint8563,294756
uintuint8581,295259
uintuint8603,295993
static inline voidstatic8641,296980
    cc = read(0, &c, 1);cc8718,299503
    cc = read(0, &c, 1);cc8732,299787
    cc = read(0, &c, 1);cc8751,300509
intint8831,302821
  fd = open(n, O_RDONLY);fd8841,303059
  r = fstat(fd, st);r8851,303461
  fd = open(n, O_RDONLY);fd8874,304304
intint8886,304613
  n = 0;n8895,304840
    n = n*10 + *s++ - '0';n8904,305256
  n = 0;n8912,305485
    n = n*10 + *s++ - '0';n8918,305737
  dst = vdst;dst8941,306436
  src = vsrc;src8942,306450
  dst = vdst;dst8955,306906
  src = vsrc;src8956,306920
  name: \name8969,307287
static voidstatic9122,311568
  neg = 0;neg9136,311991
    neg = 1;neg9145,312392
    x = -xx;x9146,312405
  neg = 0;neg9151,312492
    neg = 1;neg9153,312524
    x = -xx;x9155,312593
    x = xx;x9159,312717
  i = 0;i9162,312734
    x = xx;x9177,313380
  i = 0;i9180,313397
static voidstatic9199,314146
  neg = 0;neg9228,315163
    neg = 1;neg9230,315195
    x = -xx;x9231,315208
    x = xx;x9233,315232
  neg = 0;neg9240,315379
voidvoid9250,315685
  state = 0;state9261,315980
  ap = (uint*)(void*)&fmt + 1;ap9262,315993
voidvoid9268,316168
  state = 0;state9275,316288
  ap = (uint*)(void*)&fmt + 1;ap9276,316301
voidvoid9282,316475
  state = 0;state9289,316599
  ap = (uint*)(void*)&fmt + 1;ap9290,316612
    c = fmt[i] & 0xff;c9301,317148
        state = '%';state9306,317317
  state = 0;state9308,317388
  ap = (uint*)(void*)&fmt + 1;ap9309,317401
    c = fmt[i] & 0xff;c9311,317459
static voidstatic9317,317599
  state = 0;state9334,318185
  ap = (uint*)(void*)&fmt + 1;ap9335,318198
    c = fmt[i] & 0xff;c9340,318416
  state = 0;state9345,318521
  ap = (uint*)(void*)&fmt + 1;ap9346,318534
    c = fmt[i] & 0xff;c9348,318592
        state = '%';state9354,318809
          s = "(null)";s9375,319569
static voidstatic9390,319994
  state = 0;state9412,320820
  ap = (uint*)(void*)&fmt + 1;ap9413,320833
static voidstatic9418,320965
      state = 0;state9428,321197
  state = 0;state9433,321295
  ap = (uint*)(void*)&fmt + 1;ap9434,321308
      state = 0;state9440,321500
      state = 0;state9473,322661
        s = (char*)*ap;s9487,323169
          s = "(null)";s9494,323438
static voidstatic9506,323928
          s = "(null)";s9515,324165
static voidstatic9522,324320
        s = (char*)*ap;s9530,324542
          s = "(null)";s9533,324599
      state = 0;state9544,324981
static voidstatic9551,325239
static voidstatic9573,325958
static Header base;static9591,326614
static Header *freep;static9592,326634
voidvoid9594,326657
  bp = (Header*)ap - 1;bp9600,326742
static Header base;static9603,326876
static Header *freep;static9604,326896
voidvoid9606,326919
  bp = (Header*)ap - 1;bp9616,327195
voidvoid9620,327380
  bp = (Header*)ap - 1;bp9625,327421
static Header base;static9637,328035
static Header *freep;static9638,328055
voidvoid9640,328078
  bp = (Header*)ap - 1;bp9646,328168
  bp = (Header*)ap - 1;bp9655,328438
  freep = p;freep9686,329738
  bp = (Header*)ap - 1;bp9694,330020
  freep = p;freep9718,330954
  freep = p;freep9732,331392
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits9757,332037
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits9766,332290
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits9791,333477
      freep = prevp;freep9804,333960
    nu = 4096;nu9815,334235
  p = sbrk(nu * sizeof(Header));p9816,334250
  hp = (Header*)p;hp9825,334626
      freep = prevp;freep9836,335011
      freep = prevp;freep9866,336100
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits9894,336974

forktest.c,116
#define N N8,161
printf(int fd, char *s, ...)printf11,183
forktest(void)forktest17,249
main(void)main52,719

pr.pl,0

console.c,919
static int panicked = 0;panicked20,386
  struct spinlock lock;lock23,428
  int locking;locking24,452
} cons;cons25,467
printint(int xx, int base, int sign)printint28,488
cprintf(char *fmt, ...)cprintf55,902
panic(char *s)panic107,1773
#define BACKSPACE BACKSPACE127,2127
#define CRTPORT CRTPORT128,2151
static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memorycrt129,2173
cgaputc(int c)cgaputc132,2245
consputc(int c)consputc166,2912
#define INPUT_BUF INPUT_BUF181,3098
  char buf[INPUT_BUF];buf183,3129
  uint r;  // Read indexr184,3152
  uint w;  // Write indexw185,3177
  uint e;  // Edit indexe186,3203
} input;input187,3228
#define C(C189,3238
consoleintr(int (*getc)(void))consoleintr192,3282
consoleread(struct inode *ip, char *dst, int n)consoleread236,4321
consolewrite(struct inode *ip, char *buf, int n)consolewrite274,4990
consoleinit(void)consoleinit289,5200

Makefile,1527
OBJS = \OBJS1,0
TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \TOOLPREFIX39,481
QEMU = $(shell if which qemu > /dev/null; \QEMU58,1331
CC = $(TOOLPREFIX)gccCC74,1992
AS = $(TOOLPREFIX)gasAS75,2014
LD = $(TOOLPREFIX)ldLD76,2036
OBJCOPY = $(TOOLPREFIX)objcopyOBJCOPY77,2057
OBJDUMP = $(TOOLPREFIX)objdumpOBJDUMP78,2088
CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointerCFLAGS79,2119
ASFLAGS = -m32 -gdwarf-2 -Wa,-divideASFLAGS82,2512
	dd if=/dev/zero of=xv6.img count=10000f87,2692
	dd if=bootblock of=xv6.img conv=notruncf88,2732
	dd if=kernel of=xv6.img seek=1 conv=notruncf89,2773
	dd if=/dev/zero of=xv6memfs.img count=10000f92,2855
	dd if=bootblock of=xv6memfs.img conv=notruncf93,2900
	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notruncf94,2946
MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.oMEMFSOBJS127,4393
ULIB = ulib.o usys.o printf.o umalloc.oULIB139,4855
UPROGS=\UPROGS161,5625
FILES = $(shell grep -v '^\#' runoff.list)FILES193,6072
PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)PRINT194,6115
GDBPORT = $(shell expr `id -u` % 5000 + 25000)GDBPORT209,6389
QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \QEMUGDB211,6483
CPUS := 2CPUS215,6623
QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)QEMUOPTS217,6639
EXTRA=\EXTRA245,7487

ls.asm,5996
_ls:     file format elf32-i386_ls2,1
Disassembly of section .text:Disassembly5,35
intint11,99
   a:	55                   	push   %ebpa17,282
   b:	89 e5                	mov    %esp,%ebpb18,322
   d:	57                   	push   %edid19,367
   e:	56                   	push   %esie20,407
   f:	53                   	push   %ebxf21,447
  a0:	83 ec 0c             	sub    $0xc,%espa0124,3571
  a3:	53                   	push   %ebxa3125,3616
  a4:	e8 17 03 00 00       	call   3c0 <strlen>a4126,3656
  a9:	83 c4 0c             	add    $0xc,%espa9127,3704
  ac:	50                   	push   %eaxac128,3749
  ad:	53                   	push   %ebxad129,3789
  ae:	68 60 0d 00 00       	push   $0xd60ae130,3829
  b3:	e8 98 04 00 00       	call   550 <memmove>b3131,3871
  b8:	89 1c 24             	mov    %ebx,(%esp)b8133,3968
  bb:	e8 00 03 00 00       	call   3c0 <strlen>bb134,4015
  c0:	89 1c 24             	mov    %ebx,(%esp)c0135,4063
  c3:	89 c6                	mov    %eax,%esic3136,4110
  c5:	bb 60 0d 00 00       	mov    $0xd60,%ebxc5138,4169
  ca:	e8 f1 02 00 00       	call   3c0 <strlen>ca145,4366
  cf:	ba 0e 00 00 00       	mov    $0xe,%edxcf146,4414
  d4:	83 c4 0c             	add    $0xc,%espd4147,4459
  d7:	05 60 0d 00 00       	add    $0xd60,%eaxd7148,4504
  dc:	29 f2                	sub    %esi,%edxdc149,4551
  de:	52                   	push   %edxde150,4596
  df:	6a 20                	push   $0x20df151,4636
  e1:	50                   	push   %eaxe1152,4677
  e2:	e8 09 03 00 00       	call   3f0 <memset>e2153,4717
  e7:	83 c4 10             	add    $0x10,%espe7155,4779
  ea:	8d 65 f8             	lea    -0x8(%ebp),%espea157,4827
  ed:	89 d8                	mov    %ebx,%eaxed158,4878
  ef:	5b                   	pop    %ebxef159,4923
  f0:	5e                   	pop    %esif0160,4963
  f1:	5d                   	pop    %ebpf1161,5003
  f2:	c3                   	ret    f2162,5043
  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif3163,5079
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9164,5129
voidvoid168,5203
    p = buf+strlen(buf);p276,9032
    p = buf+strlen(buf);p289,9506
    p = buf+strlen(buf);p298,9795
  os = s;os455,15614
intint476,16299
intint497,17038
intint506,17219
intint527,17875
uintuint545,18346
uintuint567,19026
static inline voidstatic605,19928
    cc = read(0, &c, 1);cc682,22278
    cc = read(0, &c, 1);cc696,22549
    cc = read(0, &c, 1);cc715,23221
intint795,25377
  fd = open(n, O_RDONLY);fd805,25599
  r = fstat(fd, st);r815,25971
  fd = open(n, O_RDONLY);fd838,26748
intint850,27040
  n = 0;n859,27251
    n = n*10 + *s++ - '0';n868,27638
  n = 0;n876,27855
    n = n*10 + *s++ - '0';n882,28090
  dst = vdst;dst905,28741
  src = vsrc;src906,28755
  dst = vdst;dst919,29182
  src = vsrc;src920,29196
  name: \name933,29538
static voidstatic1086,33515
  neg = 0;neg1100,33910
    neg = 1;neg1109,34281
    x = -xx;x1110,34294
  neg = 0;neg1115,34377
    neg = 1;neg1117,34409
    x = -xx;x1119,34474
    x = xx;x1123,34590
  i = 0;i1126,34607
    x = xx;x1141,35207
  i = 0;i1144,35224
static voidstatic1163,35927
  neg = 0;neg1192,36874
    neg = 1;neg1194,36906
    x = -xx;x1195,36919
    x = xx;x1197,36943
  neg = 0;neg1204,37086
voidvoid1214,37375
  state = 0;state1225,37650
  ap = (uint*)(void*)&fmt + 1;ap1226,37663
voidvoid1232,37834
  state = 0;state1239,37950
  ap = (uint*)(void*)&fmt + 1;ap1240,37963
voidvoid1246,38133
  state = 0;state1253,38253
  ap = (uint*)(void*)&fmt + 1;ap1254,38266
    c = fmt[i] & 0xff;c1265,38764
        state = '%';state1270,38925
  state = 0;state1272,38992
  ap = (uint*)(void*)&fmt + 1;ap1273,39005
    c = fmt[i] & 0xff;c1275,39063
static voidstatic1281,39198
  state = 0;state1298,39743
  ap = (uint*)(void*)&fmt + 1;ap1299,39756
    c = fmt[i] & 0xff;c1304,39961
  state = 0;state1309,40062
  ap = (uint*)(void*)&fmt + 1;ap1310,40075
    c = fmt[i] & 0xff;c1312,40133
        state = '%';state1318,40337
          s = "(null)";s1339,41057
static voidstatic1354,41464
  state = 0;state1376,42228
  ap = (uint*)(void*)&fmt + 1;ap1377,42241
static voidstatic1382,42369
      state = 0;state1392,42597
  state = 0;state1397,42691
  ap = (uint*)(void*)&fmt + 1;ap1398,42704
      state = 0;state1404,42887
      state = 0;state1437,43979
        s = (char*)*ap;s1451,44462
          s = "(null)";s1458,44715
static voidstatic1470,45171
          s = "(null)";s1479,45396
static voidstatic1486,45547
        s = (char*)*ap;s1494,45756
          s = "(null)";s1497,45813
      state = 0;state1508,46178
static voidstatic1515,46419
static voidstatic1537,47096
static Header base;static1555,47702
static Header *freep;static1556,47722
voidvoid1558,47745
  bp = (Header*)ap - 1;bp1564,47826
static Header base;static1567,47955
static Header *freep;static1568,47975
voidvoid1570,47998
  bp = (Header*)ap - 1;bp1580,48254
voidvoid1584,48435
  bp = (Header*)ap - 1;bp1589,48476
static Header base;static1601,49051
static Header *freep;static1602,49071
voidvoid1604,49094
  bp = (Header*)ap - 1;bp1610,49180
  bp = (Header*)ap - 1;bp1619,49442
  freep = p;freep1650,50669
  bp = (Header*)ap - 1;bp1658,50926
  freep = p;freep1682,51819
  freep = p;freep1696,52240
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1721,52837
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1730,53081
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1755,54193
      freep = prevp;freep1768,54659
    nu = 4096;nu1779,54920
  p = sbrk(nu * sizeof(Header));p1780,54935
  hp = (Header*)p;hp1789,55285
      freep = prevp;freep1800,55644
      freep = prevp;freep1830,56682
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1858,57510

main.c,227
main(void)main18,472
mpenter(void)mpenter42,1308
mpmain(void)mpmain52,1420
pde_t entrypgdir[];  // For entry.Sentrypgdir60,1640
startothers(void)startothers64,1728
pde_t entrypgdir[NPDENTRIES] = {entrypgdir103,2945

memide.c,167
static int disksize;disksize18,362
static uchar *memdisk;memdisk19,383
ideinit(void)ideinit22,412
ideintr(void)ideintr30,538
iderw(struct buf *b)iderw39,729

kernel.asm,44998
kernel:     file format elf32-i386kernel2,1
Disassembly of section .text:Disassembly5,38
entry:entry17,381
voidvoid61,1852
voidvoid77,2262
static struct buf*static183,6061
  b = bget(dev, blockno);b253,9140
voidvoid287,10258
voidvoid318,11352
voidvoid333,11789
voidvoid424,14946
intint438,15261
  target = n;target455,15840
  target = n;target482,16915
    c = input.buf[input.r++ % INPUT_BUF];c524,18439
  target = n;target557,19447
    c = input.buf[input.r++ % INPUT_BUF];c584,20332
voidvoid602,20987
static inline voidstatic612,21243
  panicked = 1; // freeze other CPUpanicked674,23490
voidvoid684,23809
voidvoid697,24203
static inline voidstatic724,25004
static inline ucharstatic732,25309
  pos = inb(CRTPORT+1) << 8;pos746,25638
static inline voidstatic750,25718
static inline ucharstatic759,26070
static inline voidstatic803,27638
  pos = inb(CRTPORT+1) << 8;pos919,31968
static voidstatic939,32608
static voidstatic959,33167
    x = -xx;x975,33717
    x = xx;x977,33737
  i = 0;i979,33750
    x = xx;x994,34363
  i = 0;i996,34376
    x = -xx;x1039,35757
intint1049,36043
intint1065,36471
voidvoid1120,38380
  locking = cons.locking;locking1133,38733
  locking = cons.locking;locking1142,38926
  argp = (uint*)(void*)(&fmt + 1);argp1155,39368
    c = fmt[++i] & 0xff;c1170,40000
  argp = (uint*)(void*)(&fmt + 1);argp1198,41151
        s = "(null)";s1207,41581
  argp = (uint*)(void*)(&fmt + 1);argp1218,41794
    c = fmt[++i] & 0xff;c1248,42900
    default:default1276,43910
        s = "(null)";s1289,44482
        s = "(null)";s1309,45161
        s = "(null)";s1325,45806
  locking = cons.locking;locking1343,46389
#define C(x)  ((x)-'@')  // Control-xC1362,47069
voidvoid1364,47108
#define C(x)  ((x)-'@')  // Control-xC1375,47446
voidvoid1377,47485
    default:default1464,50627
        c = (c == '\r') ? '\n' : c;c1473,51081
    default:default1480,51317
        c = (c == '\r') ? '\n' : c;c1482,51379
    default:default1489,51615
        c = (c == '\r') ? '\n' : c;c1491,51677
        c = (c == '\r') ? '\n' : c;c1512,52758
      doprocdump = 1;doprocdump1527,53464
      doprocdump = 1;doprocdump1544,54233
      doprocdump = 1;doprocdump1557,54815
      doprocdump = 1;doprocdump1571,55393
    default:default1595,56131
        c = (c == '\r') ? '\n' : c;c1597,56193
voidvoid1612,56738
voidvoid1632,57404
intint1665,58395
  struct proc *curproc = myproc();struct1679,58837
  pgdir = 0;pgdir1702,59679
 bad:bad1716,60225
  pgdir = 0;pgdir1738,60974
  sz = 0;sz1757,61574
 bad:bad1828,64847
  ip = 0;ip1847,65527
  sz = PGROUNDUP(sz);sz1851,65658
  ip = 0;ip1856,65851
  sz = PGROUNDUP(sz);sz1860,65982
 bad:bad1876,66662
  struct proc *curproc = myproc();struct1890,67084
  sz = PGROUNDUP(sz);sz1907,67725
  sp = sz;sp1913,67965
  sz = PGROUNDUP(sz);sz1921,68294
  sp = sz;sp1928,68583
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1947,69455
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1961,70049
  sp = sz;sp1978,70893
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1985,71097
  sp = sz;sp1992,71373
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1999,71572
  sp = sz;sp2006,71841
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp2022,72423
      last = s+1;last2072,74255
      last = s+1;last2082,74547
      last = s+1;last2095,74999
  oldpgdir = curproc->pgdir;oldpgdir2107,75506
      last = s+1;last2111,75636
  oldpgdir = curproc->pgdir;oldpgdir2115,75744
      last = s+1;last2121,75973
  oldpgdir = curproc->pgdir;oldpgdir2125,76081
voidvoid2164,77429
voidvoid2317,82403
  ff = *f;ff2366,84067
  ff = *f;ff2378,84379
  ff = *f;ff2388,84617
  ff = *f;ff2400,84936
intint2480,87597
intint2531,89340
intint2648,93295
intint2666,93850
        n1 = max;n12697,95131
        n1 = max;n12707,95442
        n1 = max;n12744,96807
static uintstatic2869,100788
  bp = 0;bp2881,101129
static uintstatic2887,101276
  bp = 0;bp2894,101398
    bp = bread(dev, BBLOCK(b, sb));bp2899,101612
      m = 1 << (bi % 8);m2916,102492
  bp = 0;bp2922,102728
    bp = bread(dev, BBLOCK(b, sb));bp2924,102775
      m = 1 << (bi % 8);m2926,102864
  bp = 0;bp2937,103332
    bp = bread(dev, BBLOCK(b, sb));bp2939,103379
  bp = 0;bp2960,104093
    bp = bread(dev, BBLOCK(b, sb));bp2978,104767
      m = 1 << (bi % 8);m2980,104856
    bp = bread(dev, BBLOCK(b, sb));bp2988,105203
      m = 1 << (bi % 8);m2990,105292
static voidstatic3000,105741
  bp = bread(dev, bno);bp3005,105798
static struct inode*static3045,107343
  empty = 0;empty3059,107755
static struct inode*static3066,108079
  empty = 0;empty3079,108482
  empty = 0;empty3097,109145
  empty = 0;empty3115,109965
  empty = 0;empty3124,110296
  empty = 0;empty3132,110564
  empty = 0;empty3167,111728
      empty = ip;empty3175,112130
  ip = empty;ip3182,112314
  ip = empty;ip3193,112553
      empty = ip;empty3216,113369
static uintstatic3231,113809
    bp = bread(ip->dev, addr);bp3282,115635
    a = (uint*)bp->data;a3287,115861
    bp = bread(ip->dev, addr);bp3296,116195
    a = (uint*)bp->data;a3298,116275
    bp = bread(ip->dev, addr);bp3312,116909
    a = (uint*)bp->data;a3313,116940
    a = (uint*)bp->data;a3334,117639
voidvoid3401,119704
  bp = bread(dev, 1);bp3411,120004
  bp = bread(dev, 1);bp3435,120934
static voidstatic3446,121219
  bp = bread(dev, BBLOCK(b, sb));bp3463,121788
  bi = b % BPB;bi3472,122207
  m = 1 << (bi % 8);m3473,122223
  bp = bread(dev, BBLOCK(b, sb));bp3480,122410
  bi = b % BPB;bi3481,122444
  m = 1 << (bi % 8);m3482,122460
  bp = bread(dev, BBLOCK(b, sb));bp3491,122744
  bi = b % BPB;bi3492,122778
  m = 1 << (bi % 8);m3493,122794
  bp = bread(dev, BBLOCK(b, sb));bp3506,123332
  bi = b % BPB;bi3507,123366
  m = 1 << (bi % 8);m3508,123382
  bp = bread(dev, BBLOCK(b, sb));bp3528,124144
  bi = b % BPB;bi3529,124178
  m = 1 << (bi % 8);m3530,124194
voidvoid3541,124496
    bp = bread(dev, IBLOCK(inum, sb));bp3671,129146
    dip = (struct dinode*)bp->data + inum%IPB;dip3680,129580
    bp = bread(dev, IBLOCK(inum, sb));bp3688,129852
    dip = (struct dinode*)bp->data + inum%IPB;dip3689,129891
voidvoid3758,132486
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3769,132795
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3784,133241
  dip = (struct dinode*)bp->data + ip->inum%IPB;dip3791,133590
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3805,134021
  dip = (struct dinode*)bp->data + ip->inum%IPB;dip3806,134066
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3821,134631
  dip = (struct dinode*)bp->data + ip->inum%IPB;dip3822,134676
voidvoid3893,137273
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3941,138868
    dip = (struct dinode*)bp->data + ip->inum%IPB;dip3950,139317
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3963,139713
    dip = (struct dinode*)bp->data + ip->inum%IPB;dip3964,139760
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp3979,140312
    dip = (struct dinode*)bp->data + ip->inum%IPB;dip3980,140359
voidvoid4037,142512
voidvoid4075,144005
voidvoid4102,144955
voidvoid4155,146904
    bp = bread(ip->dev, ip->addrs[NDIRECT]);bp4245,150058
    a = (uint*)bp->data;a4253,150466
voidvoid4293,152145
voidvoid4311,152787
voidvoid4323,153028
intint4355,154197
intint4375,154876
    n = ip->size - off;n4403,155929
    n = ip->size - off;n4417,156376
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4424,156678
    m = min(n - tot, BSIZE - off%BSIZE);m4433,157121
    n = ip->size - off;n4437,157253
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4440,157323
    m = min(n - tot, BSIZE - off%BSIZE);m4443,157474
    n = ip->size - off;n4451,157844
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4454,157914
    m = min(n - tot, BSIZE - off%BSIZE);m4455,157960
    n = ip->size - off;n4466,158424
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4471,158592
    m = min(n - tot, BSIZE - off%BSIZE);m4472,158638
    n = ip->size - off;n4484,159133
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4491,159426
    m = min(n - tot, BSIZE - off%BSIZE);m4492,159472
    m = min(n - tot, BSIZE - off%BSIZE);m4521,160551
intint4554,161568
intint4574,162248
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4611,163712
    m = min(n - tot, BSIZE - off%BSIZE);m4614,163863
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4621,164061
    m = min(n - tot, BSIZE - off%BSIZE);m4630,164504
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp4650,165346
    m = min(n - tot, BSIZE - off%BSIZE);m4651,165392
intint4766,169305
intint4831,171920
      inum = de.inum;inum4858,173024
      inum = de.inum;inum4875,173593
static struct inode*static4913,174873
static struct inode*static4931,175613
    ip = iget(ROOTDEV, ROOTINO);ip4939,175848
    ip = idup(myproc()->cwd);ip4941,175888
    ip = iget(ROOTDEV, ROOTINO);ip4953,176218
    ip = idup(myproc()->cwd);ip4955,176258
  s = path;s4995,177516
  s = path;s5012,178179
  len = path - s;len5020,178498
  s = path;s5034,179015
  len = path - s;len5038,179131
  s = path;s5045,179292
    ip = iget(ROOTDEV, ROOTINO);ip5069,180020
    ip = idup(myproc()->cwd);ip5071,180060
voidvoid5106,181412
  s = path;s5125,182069
  len = path - s;len5130,182232
    ip = next;ip5152,183078
voidvoid5172,183686
    ip = iget(ROOTDEV, ROOTINO);ip5219,184856
    ip = next;ip5263,186107
intint5281,186670
static voidstatic5476,193353
static voidstatic5485,193555
static inline ucharstatic5499,194075
static intstatic5509,194381
static inline voidstatic5520,194659
static inline voidstatic5574,196920
static voidstatic5608,198102
voidvoid5623,198478
static inline ucharstatic5644,199270
static intstatic5653,199515
static inline voidstatic5664,199792
static inline ucharstatic5672,200106
      havedisk1 = 1;havedisk15693,200798
static inline voidstatic5698,200897
voidvoid5732,201883
  idequeue = b->qnext;idequeue5756,202659
static inline ucharstatic5815,204730
static intstatic5824,204993
  idequeue = b->qnext;idequeue5839,205484
static inline voidstatic5847,205674
voidvoid5864,206349
voidvoid6029,212371
  ioapic = (volatile struct ioapic*)IOAPIC;ioapic6035,212462
voidvoid6041,212614
static uintstatic6049,212779
static uintstatic6060,213046
  ioapic = (volatile struct ioapic*)IOAPIC;ioapic6069,213253
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr6070,213297
  id = ioapicread(REG_ID) >> 24;id6071,213345
  ioapic = (volatile struct ioapic*)IOAPIC;ioapic6078,213496
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr6079,213540
static uintstatic6084,213736
  ioapic = (volatile struct ioapic*)IOAPIC;ioapic6092,213892
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr6093,213936
  id = ioapicread(REG_ID) >> 24;id6094,213984
voidvoid6109,214609
static voidstatic6117,214790
static voidstatic6134,215397
static voidstatic6151,215916
voidvoid6180,216925
static voidstatic6186,217013
voidvoid6194,217142
static voidstatic6207,217592
static voidstatic6216,217791
static voidstatic6232,218278
static voidstatic6247,218761
voidvoid6273,219706
  r = (struct run*)v;r6307,221039
  r = (struct run*)v;r6347,222225
  r = (struct run*)v;r6361,222613
voidvoid6415,224158
  p = (char*)PGROUNDUP((uint)vstart);p6423,224393
voidvoid6428,224509
  p = (char*)PGROUNDUP((uint)vstart);p6433,224617
voidvoid6444,225163
  p = (char*)PGROUNDUP((uint)vstart);p6448,225217
voidvoid6454,225469
  p = (char*)PGROUNDUP((uint)vstart);p6458,225523
voidvoid6477,226312
voidvoid6491,226830
  p = (char*)PGROUNDUP((uint)vstart);p6495,226884
voidvoid6500,227141
voidvoid6508,227310
  p = (char*)PGROUNDUP((uint)vstart);p6512,227364
voidvoid6522,227846
  p = (char*)PGROUNDUP((uint)vstart);p6526,227900
voidvoid6532,228152
  p = (char*)PGROUNDUP((uint)vstart);p6536,228206
voidvoid6557,228933
voidvoid6565,229155
  p = (char*)PGROUNDUP((uint)vstart);p6569,229209
voidvoid6574,229331
voidvoid6579,229426
  p = (char*)PGROUNDUP((uint)vstart);p6583,229480
voidvoid6594,230023
  p = (char*)PGROUNDUP((uint)vstart);p6598,230077
voidvoid6604,230329
  p = (char*)PGROUNDUP((uint)vstart);p6608,230383
voidvoid6614,230631
  r = kmem.freelist;r6648,231746
  r = kmem.freelist;r6680,232935
kuinfo_alloc (void) {kuinfo_alloc6709,233889
	r = kmem.freelist_userinfo;r6722,234332
kuinfo_alloc (void) {kuinfo_alloc6748,235320
	r = kmem.freelist_userinfo;r6757,235563
intint6778,236368
static inline ucharstatic6782,236432
  st = inb(KBSTATP);st6795,236755
  data = inb(KBDATAP);data6802,237027
    data = (shift & E0ESC ? data : data & 0x7F);data6813,237359
  data = inb(KBDATAP);data6815,237463
    data = (shift & E0ESC ? data : data & 0x7F);data6823,237650
    data = (shift & E0ESC ? data : data & 0x7F);data6847,238548
    data = (shift & E0ESC ? data : data & 0x7F);data6858,238996
  c = charcode[shift & (CTL | SHIFT)][data];c6874,239552
  c = charcode[shift & (CTL | SHIFT)][data];c6883,239802
  c = charcode[shift & (CTL | SHIFT)][data];c6892,240052
  data = inb(KBDATAP);data6913,240847
  data = inb(KBDATAP);data6921,241015
  c = charcode[shift & (CTL | SHIFT)][data];c6937,241441
  c = charcode[shift & (CTL | SHIFT)][data];c6949,241790
  st = inb(KBSTATP);st6965,242196
voidvoid6982,242626
voidvoid7005,243356
voidvoid7013,243504
static voidstatic7023,243761
static voidstatic7033,244028
static voidstatic7043,244294
static voidstatic7053,244564
static voidstatic7063,244835
static voidstatic7073,245105
static voidstatic7093,245786
static voidstatic7103,246053
static voidstatic7113,246319
static voidstatic7123,246585
static voidstatic7133,246850
static voidstatic7143,247116
static voidstatic7164,247842
static voidstatic7183,248366
intint7198,248833
intint7206,248943
intint7219,249323
intint7230,249551
voidvoid7245,249870
voidvoid7253,249988
static voidstatic7263,250242
voidvoid7271,250493
voidvoid7286,250856
voidvoid7301,251319
static inline voidstatic7307,251411
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vectorwrv7325,252234
static voidstatic7330,252373
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vectorwrv7339,252709
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vectorwrv7354,253412
static voidstatic7360,253573
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vectorwrv7375,254190
static voidstatic7381,254356
static voidstatic7391,254657
static voidstatic7401,254926
static voidstatic7411,255195
static voidstatic7420,255441
static voidstatic7429,255687
static voidstatic7438,255933
void cmostime(struct rtcdate *r)void7461,256592
static inline ucharstatic7472,257050
static inline voidstatic7484,257366
static inline ucharstatic7495,257828
static void fill_rtcdate(struct rtcdate *r)static7507,258115
static inline voidstatic7513,258243
static inline ucharstatic7521,258553
static inline voidstatic7533,258842
static inline ucharstatic7541,259152
static inline voidstatic7553,259442
static inline ucharstatic7561,259752
static inline voidstatic7573,260040
static inline ucharstatic7581,260350
static inline voidstatic7593,260640
static inline ucharstatic7601,260950
static inline voidstatic7613,261239
static inline ucharstatic7621,261549
  bcd = (sb & (1 << 2)) == 0;bcd7629,261756
static inline voidstatic7639,262034
static inline ucharstatic7646,262288
static void fill_rtcdate(struct rtcdate *r)static7657,262525
static inline voidstatic7663,262653
static inline ucharstatic7671,262963
static inline voidstatic7683,263252
static inline ucharstatic7691,263562
static inline voidstatic7703,263852
static inline ucharstatic7711,264162
static inline voidstatic7723,264450
static inline ucharstatic7731,264760
static inline voidstatic7743,265050
static inline ucharstatic7751,265360
#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))CONV7796,266829
static voidstatic7878,270598
static voidstatic7890,270922
static voidstatic7918,272142
static voidstatic7946,273350
static voidstatic7974,274292
static voidstatic7993,275011
static void recover_from_log(void);static8044,276841
static void commit();static8045,276877
voidvoid8047,276900
static voidstatic8082,278140
static voidstatic8110,278897
static voidstatic8156,280597
voidvoid8183,281388
voidvoid8203,282175
voidvoid8251,283926
    do_commit = 1;do_commit8303,285506
static voidstatic8309,285627
static voidstatic8324,286016
static voidstatic8353,287190
static voidstatic8381,288358
static voidstatic8390,288612
voidvoid8494,292263
voidvoid8508,292659
static voidstatic8622,297062
static voidstatic8659,298468
intint8681,299246
  code = P2V(0x7000);code8693,299691
intint8700,299989
  code = P2V(0x7000);code8738,301664
    stack = kalloc();stack8763,302853
    stack = kalloc();stack8777,303487
  code = P2V(0x7000);code8800,304451
static struct mp*static8830,305665
  addr = P2V(a);addr8839,305917
static struct mp*static8844,306053
  addr = P2V(a);addr8850,306168
  e = addr+len;e8851,306185
static struct mp*static8856,306316
  addr = P2V(a);addr8862,306436
  e = addr+len;e8863,306453
  sum = 0;sum8886,307508
  sum = 0;sum8896,307754
  addr = P2V(a);addr8902,307926
  e = addr+len;e8903,307943
  addr = P2V(a);addr8911,308212
  e = addr+len;e8912,308229
  addr = P2V(a);addr8922,308620
  e = addr+len;e8923,308637
voidvoid8949,309555
  bda = (uchar *) P2V(0x400);bda8962,309892
    p = ((bda[0x14]<<8)|bda[0x13])*1024;p8974,310398
  bda = (uchar *) P2V(0x400);bda8985,310814
  conf = (struct mpconf*) P2V((uint) mp->physaddr);conf9004,311558
  sum = 0;sum9029,312620
  sum = 0;sum9043,313070
  sum = 0;sum9052,313265
  conf = (struct mpconf*) P2V((uint) mp->physaddr);conf9056,313410
  ismp = 1;ismp9073,314000
  lapic = (uint*)conf->lapicaddr;lapic9074,314012
  ismp = 1;ismp9085,314473
  lapic = (uint*)conf->lapicaddr;lapic9087,314534
  ismp = 1;ismp9111,315479
  lapic = (uint*)conf->lapicaddr;lapic9112,315491
    default:default9116,315699
      ismp = 0;ismp9117,315712
static inline voidstatic9132,316114
static inline ucharstatic9139,316370
static inline voidstatic9149,316581
  lapic = (uint*)conf->lapicaddr;lapic9168,317320
      proc = (struct mpproc*)p;proc9172,317450
      proc = (struct mpproc*)p;proc9186,318072
      ioapic = (struct mpioapic*)p;ioapic9198,318529
      ioapicid = ioapic->apicno;ioapicid9199,318565
      ioapic = (struct mpioapic*)p;ioapic9207,318814
      ioapicid = ioapic->apicno;ioapicid9208,318850
    p = ((bda[0x14]<<8)|bda[0x13])*1024;p9214,319062
    p = ((bda[0x14]<<8)|bda[0x13])*1024;p9230,319546
      ismp = 0;ismp9252,320224
    default:default9266,320590
      ismp = 0;ismp9267,320603
#define IO_PIC2         0xA0    // Slave (IRQs 8-15)IO_PIC29277,320975
voidvoid9280,321102
intint9306,321937
  p = 0;p9319,322390
 bad:bad9431,326144
 bad:bad9471,327491
voidvoid9484,327805
voidvoid9505,328643
intint9597,331565
intint9749,337488
static struct proc*static9913,344054
  struct proc *p;struct9919,344229
static struct proc*static9929,344509
  struct proc *p;struct9933,344597
found:found9955,345438
found:found9966,345657
found:found9976,345876
  sp = p->kstack + KSTACKSIZE;sp9996,346525
  sp = p->kstack + KSTACKSIZE;sp10017,347084
voidvoid10100,349641
    first = 0;first10130,350653
    first = 0;first10138,350913
extern pde_t *kpgdir;extern10159,351605
voidvoid10161,351628
static inline uintstatic10189,352539
  apicid = lapicid();apicid10203,352937
  apicid = lapicid();apicid10220,353760
  apicid = lapicid();apicid10239,354562
  apicid = lapicid();apicid10254,355080
intint10284,356099
intint10297,356478
  struct proc *p;struct10319,357116
  c = mycpu();c10322,357205
  p = c->proc;p10324,357276
int alloc_test_local(struct proc *p) {int10344,357834
voidvoid10370,358671
  struct proc *p;struct10377,358879
  p = allocproc();p10380,358963
  initproc = p;initproc10384,359094
  initproc = p;initproc10402,359891
  p = allocproc();p10484,363334
  initproc = p;initproc10486,363356
intint10498,363763
  struct proc *p;struct10510,364110
  c = mycpu();c10513,364199
  p = c->proc;p10515,364270
  struct proc *curproc = myproc();struct10521,364422
  sz = curproc->sz;sz10523,364458
  struct proc *curproc = myproc();struct10529,364569
  sz = curproc->sz;sz10531,364605
  sz = curproc->sz;sz10573,366174
  struct proc *curproc = myproc();struct10589,366883
  sz = curproc->sz;sz10591,366919
intint10604,367429
  struct proc *p;struct10617,367811
  c = mycpu();c10620,367900
  p = c->proc;p10622,367971
  struct proc *np;struct10627,368124
  struct proc *curproc = myproc();struct10628,368143
  pid = np->pid;pid10738,372238
  struct proc *np;struct10766,373074
  struct proc *curproc = myproc();struct10767,373093
voidvoid10799,374292
  struct proc *p;struct10808,374589
static inline voidstatic10819,374940
voidvoid10949,379653
  struct proc *p;struct10960,379943
  c = mycpu();c10963,380032
  p = c->proc;p10965,380103
  struct proc *p = myproc();struct10972,380270
static inline uintstatic10991,381044
  intena = mycpu()->intena;intena11003,381428
  intena = mycpu()->intena;intena11012,381743
  intena = mycpu()->intena;intena11027,382345
  struct proc *p = myproc();struct11039,382743
  struct proc *p = myproc();struct11064,383632
voidvoid11092,384623
  struct proc *p;struct11105,385005
  c = mycpu();c11108,385094
  p = c->proc;p11110,385165
  struct proc *curproc = myproc();struct11115,385306
  struct proc *p;struct11116,385341
static voidstatic11172,387282
  struct proc *p;struct11175,387316
static voidstatic11191,388095
  struct proc *p;struct11194,388129
static voidstatic11237,389850
  struct proc *p;struct11240,389884
  struct proc *curproc = myproc();struct11267,390959
  struct proc *p;struct11268,390994
voidvoid11283,391407
  struct proc *p;struct11297,391855
  c = mycpu();c11300,391944
  p = c->proc;p11302,392015
voidvoid11307,392199
voidvoid11330,392955
  struct proc *p;struct11345,393473
  c = mycpu();c11348,393562
  p = c->proc;p11350,393633
voidvoid11354,393772
  struct proc *p = myproc();struct11357,393818
  struct proc *p = myproc();struct11458,397080
intint11470,397422
  struct proc *p;struct11481,397710
  c = mycpu();c11484,397799
  p = c->proc;p11486,397870
  struct proc *p;struct11491,398011
  struct proc *curproc = myproc();struct11493,398050
    havekids = 0;havekids11502,398387
      havekids = 1;havekids11516,399059
    havekids = 0;havekids11524,399317
      havekids = 1;havekids11529,399496
    havekids = 0;havekids11535,399659
      havekids = 1;havekids11564,400785
        pid = p->pid;pid11567,400857
      havekids = 1;havekids11574,401084
        pid = p->pid;pid11577,401156
        pid = p->pid;pid11588,401541
voidvoid11674,404206
static voidstatic11686,404657
  struct proc *p;struct11689,404691
static voidstatic11705,405464
  struct proc *p;struct11708,405498
voidvoid11714,405744
voidvoid11724,405995
intint11738,406397
  struct proc *p;struct11746,406658
  struct proc *p;struct11766,407541
voidvoid11825,409654
  struct proc *p;struct11851,410673
      state = states[p->state];state11865,411227
      state = "???";state11867,411268
      state = states[p->state];state11877,411657
      state = "???";state11879,411698
      state = "???";state11916,413490
intint11941,414355
static inline voidstatic11950,414561
  struct proc *p;struct11955,414655
intint12074,420139
  struct proc *p;struct12085,420429
  c = mycpu();c12088,420518
  p = c->proc;p12090,420589
voidvoid12179,423546
voidvoid12207,424486
voidvoid12224,424962
voidvoid12249,425977
voidvoid12286,427159
intint12326,428465
  r = lk->locked;r12341,428978
voidvoid12364,429753
voidvoid12376,430114
voidvoid12394,430606
  ebp = (uint*)v - 2;ebp12403,430807
voidvoid12408,430957
  ebp = (uint*)v - 2;ebp12415,431075
  ebp = (uint*)v - 2;ebp12432,431709
    ebp = (uint*)ebp[0]; // saved %ebpebp12438,431929
  ebp = (uint*)v - 2;ebp12444,432044
    ebp = (uint*)ebp[0]; // saved %ebpebp12449,432249
    ebp = (uint*)ebp[0]; // saved %ebpebp12460,432572
    ebp = (uint*)ebp[0]; // saved %ebpebp12468,432832
    ebp = (uint*)ebp[0]; // saved %ebpebp12479,433258
intint12493,433724
intint12515,434584
intint12527,434969
voidvoid12543,435483
static inline uintstatic12551,435691
static inline voidstatic12560,435882
  eflags = readeflags();eflags12567,435991
voidvoid12592,437008
intint12605,437457
  ebp = (uint*)v - 2;ebp12649,438964
  ebp = (uint*)v - 2;ebp12669,439569
  ebp = (uint*)v - 2;ebp12686,440204
    ebp = (uint*)ebp[0]; // saved %ebpebp12692,440424
  ebp = (uint*)v - 2;ebp12698,440539
    ebp = (uint*)ebp[0]; // saved %ebpebp12716,441166
    ebp = (uint*)ebp[0]; // saved %ebpebp12724,441426
    ebp = (uint*)ebp[0]; // saved %ebpebp12735,441847
intint12744,442183
voidvoid12752,442489
voidvoid12767,442874
static inline uintstatic12774,443037
static inline voidstatic12816,444630
voidvoid12835,445098
voidvoid12849,445442
intint12859,445761
voidvoid12867,446029
intint12879,446407
static inline voidstatic12944,448743
static inline voidstatic12974,449611
intint13004,450682
  s1 = v1;s113017,451148
  s2 = v2;s213018,451159
  s1 = v1;s113039,452060
  s2 = v2;s213040,452071
  s1 = v1;s113066,452711
  s2 = v2;s213067,452722
  s1 = v1;s113079,452922
  s2 = v2;s213080,452933
  s = src;s13112,453830
  d = dst;d13113,453841
  s = src;s13132,454663
  d = dst;d13133,454674
intint13211,456952
intint13249,458667
  os = s;os13306,460405
  os = s;os13335,461666
  os = s;os13366,462647
intint13397,463841
intint13408,464012
swtch:swtch13433,464732
intint13471,465750
  struct proc *curproc = myproc();struct13479,466025
  struct proc *curproc = myproc();struct13505,467061
intint13518,467599
  struct proc *curproc = myproc();struct13527,467892
  ep = (char*)curproc->sz;ep13538,468316
  ep = (char*)curproc->sz;ep13555,469019
  struct proc *curproc = myproc();struct13568,469361
  ep = (char*)curproc->sz;ep13587,469903
intint13604,470363
intint13619,470958
  struct proc *curproc = myproc();struct13622,470993
intint13629,471234
intint13634,471371
  struct proc *curproc = myproc();struct13637,471406
intint13653,472072
  struct proc *curproc = myproc();struct13665,472421
intint13678,472937
  struct proc *curproc = myproc();struct13688,473273
  struct proc *curproc = myproc();struct13728,475063
intint13742,475588
intint13768,476611
voidvoid13786,477024
  struct proc *curproc = myproc();struct13794,477237
  num = curproc->tf->eax;num13797,477330
voidvoid13800,477412
  struct proc *curproc = myproc();struct13804,477444
  num = curproc->tf->eax;num13807,477529
  num = curproc->tf->eax;num13832,478577
  num = curproc->tf->eax;num13841,478903
static struct inode*static13868,479842
static struct inode*static13885,480320
static struct inode*static13901,480765
static intstatic14143,489709
static intstatic14160,490261
intint14238,492861
intint14250,493045
intint14264,493328
  struct proc *curproc = myproc();struct14278,493669
static intstatic14290,493992
  struct proc *curproc = myproc();struct14294,494039
  struct proc *curproc = myproc();struct14305,494409
  struct proc *curproc = myproc();struct14336,495222
intint14372,496243
intint14385,496483
intint14445,498796
intint14458,499052
intint14518,501372
intint14576,503112
intint14588,503348
intint14638,505179
intint14654,505651
bad:bad14798,510686
intint14864,512787
intint14882,513220
bad:bad15021,518442
bad:bad15075,520406
bad:bad15088,520792
intint15183,523882
intint15201,524322
  struct proc *curproc = myproc();struct15270,526716
static intstatic15275,526888
  struct proc *curproc = myproc();struct15279,526935
  struct proc *curproc = myproc();struct15292,527404
    ip = create(path, T_FILE, 0, 0);ip15347,529088
    ip = create(path, T_FILE, 0, 0);ip15362,529600
  struct proc *curproc = myproc();struct15380,530186
intint15456,532580
intint15520,534742
intint15620,538236
  struct proc *curproc = myproc();struct15630,538523
  struct proc *curproc = myproc();struct15708,541575
intint15723,541987
intint15740,542422
intint15880,547308
intint15897,547741
  struct proc *curproc = myproc();struct15927,548818
  fd0 = -1;fd015935,549046
static intstatic15939,549225
  struct proc *curproc = myproc();struct15943,549272
  struct proc *curproc = myproc();struct15955,549690
  fd0 = -1;fd015962,549938
  struct proc *curproc = myproc();struct16001,551129
  fd0 = -1;fd016012,551486
static intstatic16016,551665
  struct proc *curproc = myproc();struct16020,551712
  struct proc *curproc = myproc();struct16033,552193
  fd0 = -1;fd016041,552471
  struct proc *curproc = myproc();struct16051,552832
intint16093,554014
intint16103,554210
intint16113,554389
intint16130,554835
intint16140,555015
intint16150,555194
intint16193,556540
intint16208,556946
intint16222,557232
  addr = myproc()->sz;addr16237,557672
  addr = myproc()->sz;addr16246,557884
intint16277,558863
intint16291,559144
  ticks0 = ticks;ticks016310,559770
  ticks0 = ticks;ticks016319,560000
  ticks0 = ticks;ticks016339,560719
intint16399,562767
  xticks = ticks;xticks16411,563125
int sys_cps(void)int16426,563616
int sys_cps(void)int16436,563811
int sys_plocal(void)int16445,563989
int sys_plocal(void)int16455,564189
alltraps:alltraps16464,564363
trapret:trapret16497,565197
voidvoid16516,565720
voidvoid16538,566490
uint ticks;uint16548,566735
voidvoid16550,566748
uint ticks;uint16561,567052
voidvoid16563,567065
voidvoid16614,568799
static inline voidstatic16618,568864
voidvoid16648,569823
  default:default16678,570838
static inline uintstatic16686,571175
voidvoid16920,581032
voidvoid16959,582404
  default:default16997,583590
static intstatic17020,584498
static intstatic17028,584615
static inline ucharstatic17036,584861
static intstatic17058,585558
voidvoid17077,585935
static inline voidstatic17115,587300
static int uart;    // is there a uart?static17135,587952
voidvoid17137,587993
static inline ucharstatic17171,589531
  uart = 1;uart17188,590061
voidvoid17218,591284
voidvoid17250,592304
voidvoid17260,592425
voidvoid17272,592633
voidvoid17298,593379
vector0:vector017317,593917
vector1:vector117327,594146
vector2:vector217337,594375
vector3:vector317347,594604
vector4:vector417357,594833
vector5:vector517367,595062
vector6:vector617377,595291
vector7:vector717387,595520
vector8:vector817397,595749
vector9:vector917405,595923
vector10:vector1017415,596154
vector11:vector1117423,596332
vector12:vector1217431,596510
vector13:vector1317439,596688
vector14:vector1417447,596866
vector15:vector1517455,597044
vector16:vector1617465,597277
vector17:vector1717475,597511
vector18:vector1817483,597690
vector19:vector1917493,597924
vector20:vector2017503,598158
vector21:vector2117513,598392
vector22:vector2217523,598626
vector23:vector2317533,598860
vector24:vector2417543,599094
vector25:vector2517553,599328
vector26:vector2617563,599562
vector27:vector2717573,599796
vector28:vector2817583,600030
vector29:vector2917593,600264
vector30:vector3017603,600498
vector31:vector3117613,600732
vector32:vector3217623,600966
vector33:vector3317633,601200
vector34:vector3417643,601434
vector35:vector3517653,601668
vector36:vector3617663,601902
vector37:vector3717673,602136
vector38:vector3817683,602370
vector39:vector3917693,602604
vector40:vector4017703,602838
vector41:vector4117713,603072
vector42:vector4217723,603306
vector43:vector4317733,603540
vector44:vector4417743,603774
vector45:vector4517753,604008
vector46:vector4617763,604242
vector47:vector4717773,604476
vector48:vector4817783,604710
vector49:vector4917793,604944
vector50:vector5017803,605178
vector51:vector5117813,605412
vector52:vector5217823,605646
vector53:vector5317833,605880
vector54:vector5417843,606114
vector55:vector5517853,606348
vector56:vector5617863,606582
vector57:vector5717873,606816
vector58:vector5817883,607050
vector59:vector5917893,607284
vector60:vector6017903,607518
vector61:vector6117913,607752
vector62:vector6217923,607986
vector63:vector6317933,608220
vector64:vector6417943,608454
vector65:vector6517953,608688
vector66:vector6617963,608922
vector67:vector6717973,609156
vector68:vector6817983,609390
vector69:vector6917993,609624
vector70:vector7018003,609858
vector71:vector7118013,610092
vector72:vector7218023,610326
vector73:vector7318033,610560
vector74:vector7418043,610794
vector75:vector7518053,611028
vector76:vector7618063,611262
vector77:vector7718073,611496
vector78:vector7818083,611730
vector79:vector7918093,611964
vector80:vector8018103,612198
vector81:vector8118113,612432
vector82:vector8218123,612666
vector83:vector8318133,612900
vector84:vector8418143,613134
vector85:vector8518153,613368
vector86:vector8618163,613602
vector87:vector8718173,613836
vector88:vector8818183,614070
vector89:vector8918193,614304
vector90:vector9018203,614538
vector91:vector9118213,614772
vector92:vector9218223,615006
vector93:vector9318233,615240
vector94:vector9418243,615474
vector95:vector9518253,615708
vector96:vector9618263,615942
vector97:vector9718273,616176
vector98:vector9818283,616410
vector99:vector9918293,616644
vector100:vector10018303,616880
vector101:vector10118313,617118
vector102:vector10218323,617356
vector103:vector10318333,617594
vector104:vector10418343,617832
vector105:vector10518353,618070
vector106:vector10618363,618308
vector107:vector10718373,618546
vector108:vector10818383,618784
vector109:vector10918393,619022
vector110:vector11018403,619260
vector111:vector11118413,619498
vector112:vector11218423,619736
vector113:vector11318433,619974
vector114:vector11418443,620212
vector115:vector11518453,620450
vector116:vector11618463,620688
vector117:vector11718473,620926
vector118:vector11818483,621164
vector119:vector11918493,621402
vector120:vector12018503,621640
vector121:vector12118513,621878
vector122:vector12218523,622116
vector123:vector12318533,622354
vector124:vector12418543,622592
vector125:vector12518553,622830
vector126:vector12618563,623068
vector127:vector12718573,623306
vector128:vector12818583,623544
vector129:vector12918593,623782
vector130:vector13018603,624020
vector131:vector13118613,624258
vector132:vector13218623,624496
vector133:vector13318633,624734
vector134:vector13418643,624972
vector135:vector13518653,625210
vector136:vector13618663,625448
vector137:vector13718673,625686
vector138:vector13818683,625924
vector139:vector13918693,626162
vector140:vector14018703,626400
vector141:vector14118713,626638
vector142:vector14218723,626876
vector143:vector14318733,627114
vector144:vector14418743,627352
vector145:vector14518753,627590
vector146:vector14618763,627828
vector147:vector14718773,628066
vector148:vector14818783,628304
vector149:vector14918793,628542
vector150:vector15018803,628780
vector151:vector15118813,629018
vector152:vector15218823,629256
vector153:vector15318833,629494
vector154:vector15418843,629732
vector155:vector15518853,629970
vector156:vector15618863,630208
vector157:vector15718873,630446
vector158:vector15818883,630684
vector159:vector15918893,630922
vector160:vector16018903,631160
vector161:vector16118913,631398
vector162:vector16218923,631636
vector163:vector16318933,631874
vector164:vector16418943,632112
vector165:vector16518953,632350
vector166:vector16618963,632588
vector167:vector16718973,632826
vector168:vector16818983,633064
vector169:vector16918993,633302
vector170:vector17019003,633540
vector171:vector17119013,633778
vector172:vector17219023,634016
vector173:vector17319033,634254
vector174:vector17419043,634492
vector175:vector17519053,634730
vector176:vector17619063,634968
vector177:vector17719073,635206
vector178:vector17819083,635444
vector179:vector17919093,635682
vector180:vector18019103,635920
vector181:vector18119113,636158
vector182:vector18219123,636396
vector183:vector18319133,636634
vector184:vector18419143,636872
vector185:vector18519153,637110
vector186:vector18619163,637348
vector187:vector18719173,637586
vector188:vector18819183,637824
vector189:vector18919193,638062
vector190:vector19019203,638300
vector191:vector19119213,638538
vector192:vector19219223,638776
vector193:vector19319233,639014
vector194:vector19419243,639252
vector195:vector19519253,639490
vector196:vector19619263,639728
vector197:vector19719273,639966
vector198:vector19819283,640204
vector199:vector19919293,640442
vector200:vector20019303,640680
vector201:vector20119313,640918
vector202:vector20219323,641156
vector203:vector20319333,641394
vector204:vector20419343,641632
vector205:vector20519353,641870
vector206:vector20619363,642108
vector207:vector20719373,642346
vector208:vector20819383,642584
vector209:vector20919393,642822
vector210:vector21019403,643060
vector211:vector21119413,643298
vector212:vector21219423,643536
vector213:vector21319433,643774
vector214:vector21419443,644012
vector215:vector21519453,644250
vector216:vector21619463,644488
vector217:vector21719473,644726
vector218:vector21819483,644964
vector219:vector21919493,645202
vector220:vector22019503,645440
vector221:vector22119513,645678
vector222:vector22219523,645916
vector223:vector22319533,646154
vector224:vector22419543,646392
vector225:vector22519553,646630
vector226:vector22619563,646868
vector227:vector22719573,647106
vector228:vector22819583,647344
vector229:vector22919593,647582
vector230:vector23019603,647820
vector231:vector23119613,648058
vector232:vector23219623,648296
vector233:vector23319633,648534
vector234:vector23419643,648772
vector235:vector23519653,649010
vector236:vector23619663,649248
vector237:vector23719673,649486
vector238:vector23819683,649724
vector239:vector23919693,649962
vector240:vector24019703,650200
vector241:vector24119713,650438
vector242:vector24219723,650676
vector243:vector24319733,650914
vector244:vector24419743,651152
vector245:vector24519753,651390
vector246:vector24619763,651628
vector247:vector24719773,651866
vector248:vector24819783,652104
vector249:vector24919793,652342
vector250:vector25019803,652580
vector251:vector25119813,652818
vector252:vector25219823,653056
vector253:vector25319833,653294
vector254:vector25419843,653532
vector255:vector25519853,653770
static pte_t *static19870,654366
  pde = &pgdir[PDX(va)];pde19882,654741
static pte_t *static19888,655025
  pde = &pgdir[PDX(va)];pde19895,655175
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));pgtab19900,655384
  pde = &pgdir[PDX(va)];pde19928,656500
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));pgtab19930,656545
  pde = &pgdir[PDX(va)];pde19961,657921
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));pgtab19963,657966
static intstatic19985,658746
  a = (char*)PGROUNDDOWN((uint)va);a19996,659080
static intstatic20002,659367
  a = (char*)PGROUNDDOWN((uint)va);a20010,659582
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last20011,659618
  a = (char*)PGROUNDDOWN((uint)va);a20027,660315
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last20028,660351
  a = (char*)PGROUNDDOWN((uint)va);a20054,661168
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last20055,661204
  a = (char*)PGROUNDDOWN((uint)va);a20073,661818
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last20074,661854
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last20106,662817
intint20123,663530
  a = PGROUNDUP(newsz);a20135,663863
intint20141,664192
  a = PGROUNDUP(newsz);a20149,664349
intint20155,664678
  a = PGROUNDUP(newsz);a20163,664878
    pte = walkpgdir(pgdir, (char*)a, 0);pte20170,665234
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;a20172,665288
      pa = PTE_ADDR(*pte);pa20177,665539
  a = PGROUNDUP(newsz);a20197,666253
    pte = walkpgdir(pgdir, (char*)a, 0);pte20202,666485
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;a20210,666868
  a = PGROUNDUP(newsz);a20217,667064
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;a20236,667696
      pa = PTE_ADDR(*pte);pa20238,667775
voidvoid20250,668161
  c = &cpus[cpuid()];c20261,668560
  c = &cpus[cpuid()];c20278,669481
  c = &cpus[cpuid()];c20294,670369
static inline voidstatic20297,670511
char * walkpgdir_global (pde_t *pgdir, const void *va, int alloc) {char20347,672616
  pte = (char *)walkpgdir(pgdir, va, alloc);pte20354,672850
char * walkpgdir_global (pde_t *pgdir, const void *va, int alloc) {char20365,673201
  pte = (char *)walkpgdir(pgdir, va, alloc);pte20370,673342
static inline voidstatic20378,673595
voidvoid20386,673834
voidvoid20403,674406
static inline voidstatic20482,677975
static inline voidstatic20490,678148
voidvoid20514,679104
voidvoid20545,680094
voidvoid20564,680745
  mem = kalloc();mem20573,680987
  mem = kalloc();mem20582,681212
  mem = kalloc();mem20612,682535
intint20633,683254
    pa = PTE_ADDR(*pte);pa20669,684910
      n = sz - i;n20672,685010
      n = PGSIZE;n20674,685037
    pa = PTE_ADDR(*pte);pa20681,685334
    pa = PTE_ADDR(*pte);pa20689,685646
      n = sz - i;n20694,685851
      n = PGSIZE;n20696,685878
      n = sz - i;n20714,686560
      n = PGSIZE;n20716,686587
      n = PGSIZE;n20731,687075
intint20768,688357
  a = PGROUNDUP(oldsz);a20798,689225
  a = PGROUNDUP(oldsz);a20834,690754
    mem = kalloc();mem20839,690976
  a = PGROUNDUP(oldsz);a20846,691159
    mem = kalloc();mem20848,691216
    mem = kalloc();mem20870,692095
  a = PGROUNDUP(oldsz);a20950,694747
intint20970,695393
voidvoid21004,696494
voidvoid21213,703859
  kpgdir = setupkvm();kpgdir21219,704023
voidvoid21234,704529
  pte = walkpgdir(pgdir, uva, 0);pte21240,704630
voidvoid21245,704803
  pte = walkpgdir(pgdir, uva, 0);pte21252,704958
  pte = walkpgdir(pgdir, uva, 0);pte21268,705488
voidvoid21280,705836
  pte = walkpgdir(pgdir, uva, 0);pte21287,705942
voidvoid21292,706060
  pte = walkpgdir(pgdir, uva, 0);pte21302,706318
  pte = walkpgdir(pgdir, uva, 0);pte21328,707193
    pa = PTE_ADDR(*pte);pa21372,708750
    flags = PTE_FLAGS(*pte);flags21373,708775
    pa = PTE_ADDR(*pte);pa21418,710800
    flags = PTE_FLAGS(*pte);flags21420,710874
    pa = PTE_ADDR(*pte);pa21428,711206
    flags = PTE_FLAGS(*pte);flags21430,711287
  return d;return21438,711584
bad:bad21440,711597
  return d;return21463,712378
bad:bad21465,712391
  pte = walkpgdir(pgdir, uva, 0);pte21512,713819
  pte = walkpgdir(pgdir, uva, 0);pte21524,714116
  pte = walkpgdir(pgdir, uva, 0);pte21541,714793
  pte = walkpgdir(pgdir, uva, 0);pte21553,715140
intint21570,715724
  buf = (char*)p;buf21585,716254
    va0 = (uint)PGROUNDDOWN(va);va021592,716562
    pa0 = uva2ka(pgdir, (char*)va0);pa021593,716595
    n = PGSIZE - (va - va0);n21596,716666
      n = len;n21604,717015
  buf = (char*)p;buf21621,717583
      n = len;n21625,717685
    va = va0 + PGSIZE;va21629,717767
    n = PGSIZE - (va - va0);n21631,717847
      n = len;n21633,717892
  buf = (char*)p;buf21642,718060
    va0 = (uint)PGROUNDDOWN(va);va021646,718208
    pa0 = uva2ka(pgdir, (char*)va0);pa021648,718290
  buf = (char*)p;buf21653,718411
    va0 = (uint)PGROUNDDOWN(va);va021655,718447
    pa0 = uva2ka(pgdir, (char*)va0);pa021658,718592
    va = va0 + PGSIZE;va21668,718986
  buf = (char*)p;buf21673,719082
    va0 = (uint)PGROUNDDOWN(va);va021675,719118
    pa0 = uva2ka(pgdir, (char*)va0);pa021676,719151
    va = va0 + PGSIZE;va21682,719306
    va = va0 + PGSIZE;va21696,719746
int copy_proc(struct proc *p)int21713,720224
int copy_proc(struct proc *p)int21743,721220

sign.pl,0

initcode.asm,188
Disassembly of section .text:Disassembly5,42
start:start12,125
   a:	6a 00                	push   $0x0a18,282
   c:	b8 07 00 00 00       	mov    $0x7,%eaxc20,345
exit:exit27,485

vectors.pl,0

initcode.S,74
start:start10,138
exit:exit18,272
init:init24,357
argv:argv29,425

rm.asm,6391
_rm:     file format elf32-i386_rm2,1
Disassembly of section .text:Disassembly5,35
intint11,120
   a:	55                   	push   %ebpa17,303
   b:	89 e5                	mov    %esp,%ebpb18,343
   d:	57                   	push   %edid19,388
   e:	56                   	push   %esie20,428
   f:	53                   	push   %ebxf21,468
  os = s;os111,3165
  a1:	5b                   	pop    %ebxa1124,3612
  a2:	5d                   	pop    %ebpa2125,3652
  a3:	c3                   	ret    a3126,3692
  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia4127,3728
  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%ediaa128,3778
intint132,3849
  b0:	55                   	push   %ebpb0135,3892
  b1:	89 e5                	mov    %esp,%ebpb1136,3932
  b3:	56                   	push   %esib3137,3977
  b4:	53                   	push   %ebxb4138,4017
  b5:	8b 55 08             	mov    0x8(%ebp),%edxb5139,4057
  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecxb8140,4107
  bb:	0f b6 02             	movzbl (%edx),%eaxbb142,4181
  be:	0f b6 19             	movzbl (%ecx),%ebxbe143,4228
  c1:	84 c0                	test   %al,%alc1144,4275
  c3:	75 1e                	jne    e3 <strcmp+0x33>c3145,4318
  c5:	eb 29                	jmp    f0 <strcmp+0x40>c5146,4370
  c7:	89 f6                	mov    %esi,%esic7147,4422
  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic9148,4467
  d0:	83 c2 01             	add    $0x1,%edxd0150,4538
intint153,4586
  d3:	0f b6 02             	movzbl (%edx),%eaxd3157,4653
  d6:	8d 71 01             	lea    0x1(%ecx),%esid6159,4714
intint162,4767
  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxd9166,4834
  dd:	84 c0                	test   %al,%aldd167,4884
  df:	74 0f                	je     f0 <strcmp+0x40>df168,4927
  e1:	89 f1                	mov    %esi,%ecxe1169,4979
  e3:	38 d8                	cmp    %bl,%ale3170,5024
  e5:	74 e9                	je     d0 <strcmp+0x20>e5171,5067
  e7:	29 d8                	sub    %ebx,%eaxe7174,5165
  e9:	5b                   	pop    %ebxe9176,5212
  ea:	5e                   	pop    %esiea177,5252
  eb:	5d                   	pop    %ebpeb178,5292
  ec:	c3                   	ret    ec179,5332
  ed:	8d 76 00             	lea    0x0(%esi),%esied180,5368
intint183,5421
  f0:	31 c0                	xor    %eax,%eaxf0187,5488
  f2:	29 d8                	sub    %ebx,%eaxf2190,5579
  f4:	5b                   	pop    %ebxf4192,5626
  f5:	5e                   	pop    %esif5193,5666
  f6:	5d                   	pop    %ebpf6194,5706
  f7:	c3                   	ret    f7195,5746
  f8:	90                   	nopf8196,5782
  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif9197,5814
uintuint201,5892
uintuint223,6572
static inline voidstatic261,7474
    cc = read(0, &c, 1);cc338,9824
    cc = read(0, &c, 1);cc352,10095
    cc = read(0, &c, 1);cc371,10767
intint451,12923
  fd = open(n, O_RDONLY);fd461,13145
  r = fstat(fd, st);r471,13517
  fd = open(n, O_RDONLY);fd494,14294
intint506,14586
  n = 0;n515,14797
    n = n*10 + *s++ - '0';n524,15184
  n = 0;n532,15401
    n = n*10 + *s++ - '0';n538,15636
  dst = vdst;dst561,16287
  src = vsrc;src562,16301
  dst = vdst;dst575,16728
  src = vsrc;src576,16742
  name: \name589,17084
static voidstatic742,21061
  neg = 0;neg756,21456
    neg = 1;neg765,21827
    x = -xx;x766,21840
  neg = 0;neg771,21923
    neg = 1;neg773,21955
    x = -xx;x775,22020
    x = xx;x779,22136
  i = 0;i782,22153
    x = xx;x797,22753
  i = 0;i800,22770
static voidstatic819,23473
  neg = 0;neg848,24420
    neg = 1;neg850,24452
    x = -xx;x851,24465
    x = xx;x853,24489
  neg = 0;neg860,24632
voidvoid870,24921
  state = 0;state881,25196
  ap = (uint*)(void*)&fmt + 1;ap882,25209
voidvoid888,25380
  state = 0;state895,25496
  ap = (uint*)(void*)&fmt + 1;ap896,25509
voidvoid902,25679
  state = 0;state909,25799
  ap = (uint*)(void*)&fmt + 1;ap910,25812
    c = fmt[i] & 0xff;c921,26310
        state = '%';state926,26471
  state = 0;state928,26538
  ap = (uint*)(void*)&fmt + 1;ap929,26551
    c = fmt[i] & 0xff;c931,26609
static voidstatic937,26744
  state = 0;state954,27289
  ap = (uint*)(void*)&fmt + 1;ap955,27302
    c = fmt[i] & 0xff;c960,27507
  state = 0;state965,27608
  ap = (uint*)(void*)&fmt + 1;ap966,27621
    c = fmt[i] & 0xff;c968,27679
        state = '%';state974,27883
          s = "(null)";s995,28603
static voidstatic1010,29010
  state = 0;state1032,29774
  ap = (uint*)(void*)&fmt + 1;ap1033,29787
static voidstatic1038,29915
      state = 0;state1048,30143
  state = 0;state1053,30237
  ap = (uint*)(void*)&fmt + 1;ap1054,30250
      state = 0;state1060,30433
      state = 0;state1093,31525
        s = (char*)*ap;s1107,32008
          s = "(null)";s1114,32261
static voidstatic1126,32717
          s = "(null)";s1135,32942
static voidstatic1142,33093
        s = (char*)*ap;s1150,33302
          s = "(null)";s1153,33359
      state = 0;state1164,33724
static voidstatic1171,33965
static voidstatic1193,34642
static Header base;static1211,35248
static Header *freep;static1212,35268
voidvoid1214,35291
  bp = (Header*)ap - 1;bp1220,35372
static Header base;static1223,35501
static Header *freep;static1224,35521
voidvoid1226,35544
  bp = (Header*)ap - 1;bp1236,35800
voidvoid1240,35981
  bp = (Header*)ap - 1;bp1245,36022
static Header base;static1257,36597
static Header *freep;static1258,36617
voidvoid1260,36640
  bp = (Header*)ap - 1;bp1266,36726
  bp = (Header*)ap - 1;bp1275,36988
  freep = p;freep1306,38215
  bp = (Header*)ap - 1;bp1314,38472
  freep = p;freep1338,39365
  freep = p;freep1352,39786
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1377,40383
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1386,40627
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1411,41739
      freep = prevp;freep1424,42205
    nu = 4096;nu1435,42466
  p = sbrk(nu * sizeof(Header));p1436,42481
  hp = (Header*)p;hp1445,42831
      freep = prevp;freep1456,43190
      freep = prevp;freep1486,44228
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1514,45056

swtch.S,19
swtch:swtch9,177

sysfile.c,654
argfd(int n, int *pfd, struct file **pf)argfd22,490
fdalloc(struct file *f)fdalloc41,854
sys_dup(void)sys_dup56,1070
sys_read(void)sys_read70,1231
sys_write(void)sys_write82,1408
sys_close(void)sys_close94,1587
sys_fstat(void)sys_fstat107,1739
sys_link(void)sys_link119,1970
isdirempty(struct inode *dp)isdirempty169,2711
sys_unlink(void)sys_unlink185,2998
create(char *path, short type, short major, short minor)create242,3911
sys_open(void)sys_open287,4805
sys_mkdir(void)sys_mkdir337,5633
sys_mknod(void)sys_mknod353,5851
sys_chdir(void)sys_chdir373,6164
sys_exec(void)sys_exec398,6536
sys_pipe(void)sys_pipe424,6994

ulib.c,376
strcpy(char *s, char *t)strcpy8,98
strcmp(const char *p, const char *q)strcmp19,202
strlen(char *s)strlen27,319
memset(void *dst, int c, uint n)memset37,398
strchr(const char *s, char c)strchr44,476
gets(char *buf, int max)gets53,585
stat(char *n, struct stat *st)stat71,818
atoi(const char *s)atoi85,978
memmove(void *vdst, void *vsrc, int n)memmove96,1099

bootasm.S,106
start:start12,362
start32:start3254,1774
spin:spin75,2589
gdt:gdt80,2694
gdtdesc:gdtdesc85,2859

runoff,16
pad()pad8,135

init.c,62
char *argv[] = { "sh", 0 };argv8,116
main(void)main11,149

printpcs,0

user.h,0

trap.c,201
struct gatedesc idt[256];idt12,225
struct spinlock tickslock;tickslock14,320
uint ticks;ticks15,347
tvinit(void)tvinit18,365
idtinit(void)idtinit30,585
trap(struct trapframe *tf)trap37,651

mp.c,273
struct cpu cpus[NCPU];cpus14,290
int ncpu;ncpu15,313
uchar ioapicid;ioapicid16,323
sum(uchar *addr, int len)sum19,353
mpsearch1(uint a, int len)mpsearch131,539
mpsearch(void)mpsearch49,1055
mpconfig(struct mp **pmp)mpconfig73,1662
mpinit(void)mpinit92,2050

memlayout.h,359
#define EXTMEM EXTMEM4,19
#define EXTUSE EXTUSE6,111
#define EXT64 EXT647,137
#define PHYSTOP PHYSTOP9,218
#define DEVSPACE DEVSPACE11,273
#define KERNBASE KERNBASE16,454
#define KERNLINK KERNLINK19,552
#define USERINFO USERINFO21,656
#define V2P(V2P23,692
#define P2V(P2V24,733
#define V2P_WO(V2P_WO26,777
#define P2V_WO(P2V_WO27,849

entryother.S,106
start:start24,847
start32:start3248,1604
spin:spin80,2584
gdt:gdt84,2617
gdtdesc:gdtdesc90,2708

vm.c,1310
pde_t *kpgdir;  // for use in scheduler()kpgdir11,194
seginit(void)seginit16,320
walkpgdir(pde_t *pgdir, const void *va, int alloc)walkpgdir36,1045
char * walkpgdir_global (pde_t *pgdir, const void *va, int alloc) {walkpgdir_global58,1643
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)mappages78,2093
static struct kmap {kmap122,3627
  void *virt;virt123,3648
  uint phys_start;phys_start124,3662
  uint phys_end;phys_end125,3681
  int perm;perm126,3698
} kmap[] = {kmap127,3710
setupkvm(void)setupkvm137,4133
kvmalloc(void)kvmalloc166,4811
switchkvm(void)switchkvm175,4974
switchuvm(struct proc *p)switchuvm182,5119
inituvm(pde_t *pgdir, char *init, uint sz)inituvm208,5908
loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)loaduvm223,6283
allocuvm(pde_t *pgdir, uint oldsz, uint newsz)allocuvm247,6930
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)deallocuvm281,7779
freevm(pde_t *pgdir)freevm309,8326
clearpteu(pde_t *pgdir, char *uva)clearpteu328,8691
clearptew(pde_t *pgdir, char *uva)  clearptew341,8876
copyuvm(pde_t *pgdir, uint sz)copyuvm370,9391
uva2ka(pde_t *pgdir, char *uva)uva2ka402,10056
copyout(pde_t *pgdir, uint va, void *p, uint len)copyout418,10436
int copy_proc(struct proc *p)copy_proc442,10858

entry.S,101
multiboot_header:multiboot_header30,846
_start = V2P_WO(entry)_start41,1141
entry:entry45,1229

buf.h,380
struct buf {buf1,0
  int flags;flags2,13
  uint dev;dev3,26
  uint blockno;blockno4,38
  struct sleeplock lock;lock5,54
  uint refcnt;refcnt6,79
  struct buf *prev; // LRU cache listprev7,94
  struct buf *next;next8,132
  struct buf *qnext; // disk queueqnext9,152
  uchar data[BSIZE];data10,187
#define B_VALID B_VALID12,211
#define B_DIRTY B_DIRTY13,266

bootblock.asm,886
Disassembly of section .text:Disassembly5,43
start:start12,186
start32:start3282,2751
spin:spin119,4275
voidvoid144,4903
static inline ucharstatic149,5018
voidvoid170,5613
static inline voidstatic183,5980
static inline voidstatic218,7392
voidvoid238,8068
  epa = pa + count;epa250,8468
  offset = (offset / SECTSIZE) + 1;offset261,8870
  offset = (offset / SECTSIZE) + 1;offset275,9495
void readseg(uchar*, uint, uint);void297,10324
voidvoid299,10359
  elf = (struct elfhdr*)0x10000;  // scratch spaceelf310,10669
  ph = (struct proghdr*)((uchar*)elf + elf->phoff);ph328,11321
  eph = ph + elf->phnum;eph331,11483
    pa = (uchar*)ph->paddr;pa338,11792
static inline voidstatic353,12411
  ph = (struct proghdr*)((uchar*)elf + elf->phoff);ph365,12841
  eph = ph + elf->phnum;eph366,12893
  entry = (void(*)(void))(elf->entry);entry375,13176

syscall.h,796
#define SYS_fork SYS_fork2,23
#define SYS_exit SYS_exit3,45
#define SYS_wait SYS_wait4,67
#define SYS_pipe SYS_pipe5,89
#define SYS_read SYS_read6,111
#define SYS_kill SYS_kill7,133
#define SYS_exec SYS_exec8,155
#define SYS_fstat SYS_fstat9,177
#define SYS_chdir SYS_chdir10,199
#define SYS_dup SYS_dup11,221
#define SYS_getpid SYS_getpid12,243
#define SYS_sbrk SYS_sbrk13,265
#define SYS_sleep SYS_sleep14,287
#define SYS_uptime SYS_uptime15,309
#define SYS_open SYS_open16,331
#define SYS_write SYS_write17,353
#define SYS_mknod SYS_mknod18,375
#define SYS_unlink SYS_unlink19,397
#define SYS_link SYS_link20,419
#define SYS_mkdir SYS_mkdir21,441
#define SYS_close SYS_close22,463
#define SYS_cps SYS_cps23,485
#define SYS_plocal SYS_plocal24,507

kill.c,38
main(int argc, char **argv)main6,60

ln.c,39
main(int argc, char *argv[])main6,60

ls.c,100
fmtname(char *path)fmtname7,78
ls(char *path)ls26,426
main(int argc, char *argv[])main74,1386

ps.asm,6894
_ps:     file format elf32-i386_ps2,1
Disassembly of section .text:Disassembly5,35
int main(int argc, char *argv[])int12,139
   a:	55                   	push   %ebpa17,322
   b:	89 e5                	mov    %esp,%ebpb18,362
   d:	51                   	push   %ecxd19,407
   e:	83 ec 04             	sub    $0x4,%espe20,447
  os = s;os43,1047
intint64,1731
intint85,2468
intint94,2649
intint115,3303
uintuint133,3774
  a0:	55                   	push   %ebpa0136,3797
  a1:	89 e5                	mov    %esp,%ebpa1137,3837
  a3:	8b 4d 08             	mov    0x8(%ebp),%ecxa3138,3882
  a6:	80 39 00             	cmpb   $0x0,(%ecx)a6142,3966
  a9:	74 12                	je     bd <strlen+0x1d>a9143,4013
  ab:	31 d2                	xor    %edx,%edxab144,4065
  ad:	8d 76 00             	lea    0x0(%esi),%esiad145,4110
  b0:	83 c2 01             	add    $0x1,%edxb0146,4160
  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)b3147,4205
  b7:	89 d0                	mov    %edx,%eaxb7148,4259
  b9:	75 f5                	jne    b0 <strlen+0x10>b9149,4304
  bb:	5d                   	pop    %ebpbb153,4376
  bc:	c3                   	ret    bc154,4416
uintuint155,4452
  bd:	31 c0                	xor    %eax,%eaxbd161,4509
  bf:	5d                   	pop    %ebpbf165,4574
  c0:	c3                   	ret    c0166,4614
  c1:	eb 0d                	jmp    d0 <memset>c1167,4650
  c3:	90                   	nopc3168,4697
  c4:	90                   	nopc4169,4729
  c5:	90                   	nopc5170,4761
  c6:	90                   	nopc6171,4793
  c7:	90                   	nopc7172,4825
  c8:	90                   	nopc8173,4857
  c9:	90                   	nopc9174,4889
  ca:	90                   	nopca175,4921
  cb:	90                   	nopcb176,4953
  cc:	90                   	nopcc177,4985
  cd:	90                   	nopcd178,5017
  ce:	90                   	nopce179,5049
  cf:	90                   	nopcf180,5081
  d0:	55                   	push   %ebpd0187,5175
  d1:	89 e5                	mov    %esp,%ebpd1188,5215
  d3:	57                   	push   %edid3189,5260
  d4:	8b 55 08             	mov    0x8(%ebp),%edxd4190,5300
static inline voidstatic193,5353
  d7:	8b 4d 10             	mov    0x10(%ebp),%ecxd7197,5445
  da:	8b 45 0c             	mov    0xc(%ebp),%eaxda198,5496
  dd:	89 d7                	mov    %edx,%edidd199,5546
  df:	fc                   	cld    df200,5591
  e0:	f3 aa                	rep stos %al,%es:(%edi)e0201,5627
  e2:	89 d0                	mov    %edx,%eaxe2205,5715
  e4:	5f                   	pop    %edie4206,5760
  e5:	5d                   	pop    %ebpe5207,5800
  e6:	c3                   	ret    e6208,5840
  e7:	89 f6                	mov    %esi,%esie7209,5876
  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edie9210,5921
  f0:	55                   	push   %ebpf0217,6037
  f1:	89 e5                	mov    %esp,%ebpf1218,6077
  f3:	53                   	push   %ebxf3219,6122
  f4:	8b 45 08             	mov    0x8(%ebp),%eaxf4220,6162
  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebxf7221,6212
  fa:	0f b6 10             	movzbl (%eax),%edxfa223,6279
  fd:	84 d2                	test   %dl,%dlfd224,6326
  ff:	74 1d                	je     11e <strchr+0x2e>ff225,6369
    cc = read(0, &c, 1);cc270,7703
    cc = read(0, &c, 1);cc284,7974
    cc = read(0, &c, 1);cc303,8646
intint383,10802
  fd = open(n, O_RDONLY);fd393,11024
  r = fstat(fd, st);r403,11396
  fd = open(n, O_RDONLY);fd426,12173
intint438,12465
  n = 0;n447,12676
    n = n*10 + *s++ - '0';n456,13063
  n = 0;n464,13280
    n = n*10 + *s++ - '0';n470,13515
  dst = vdst;dst493,14166
  src = vsrc;src494,14180
  dst = vdst;dst507,14607
  src = vsrc;src508,14621
  name: \name521,14963
static voidstatic674,18940
  neg = 0;neg688,19335
    neg = 1;neg697,19706
    x = -xx;x698,19719
  neg = 0;neg703,19802
    neg = 1;neg705,19834
    x = -xx;x707,19899
    x = xx;x711,20015
  i = 0;i714,20032
    x = xx;x729,20632
  i = 0;i732,20649
static voidstatic751,21352
  neg = 0;neg780,22299
    neg = 1;neg782,22331
    x = -xx;x783,22344
    x = xx;x785,22368
  neg = 0;neg792,22511
voidvoid802,22800
  state = 0;state813,23075
  ap = (uint*)(void*)&fmt + 1;ap814,23088
voidvoid820,23259
  state = 0;state827,23375
  ap = (uint*)(void*)&fmt + 1;ap828,23388
voidvoid834,23558
  state = 0;state841,23678
  ap = (uint*)(void*)&fmt + 1;ap842,23691
    c = fmt[i] & 0xff;c853,24189
        state = '%';state858,24350
  state = 0;state860,24417
  ap = (uint*)(void*)&fmt + 1;ap861,24430
    c = fmt[i] & 0xff;c863,24488
static voidstatic869,24623
  state = 0;state886,25168
  ap = (uint*)(void*)&fmt + 1;ap887,25181
    c = fmt[i] & 0xff;c892,25386
  state = 0;state897,25487
  ap = (uint*)(void*)&fmt + 1;ap898,25500
    c = fmt[i] & 0xff;c900,25558
        state = '%';state906,25762
          s = "(null)";s927,26482
static voidstatic942,26889
  state = 0;state964,27653
  ap = (uint*)(void*)&fmt + 1;ap965,27666
static voidstatic970,27794
      state = 0;state980,28022
  state = 0;state985,28116
  ap = (uint*)(void*)&fmt + 1;ap986,28129
      state = 0;state992,28312
      state = 0;state1025,29404
        s = (char*)*ap;s1039,29887
          s = "(null)";s1046,30140
static voidstatic1058,30596
          s = "(null)";s1067,30821
static voidstatic1074,30972
        s = (char*)*ap;s1082,31181
          s = "(null)";s1085,31238
      state = 0;state1096,31603
static voidstatic1103,31844
static voidstatic1125,32521
static Header base;static1143,33127
static Header *freep;static1144,33147
voidvoid1146,33170
  bp = (Header*)ap - 1;bp1152,33251
static Header base;static1155,33380
static Header *freep;static1156,33400
voidvoid1158,33423
  bp = (Header*)ap - 1;bp1168,33679
voidvoid1172,33860
  bp = (Header*)ap - 1;bp1177,33901
static Header base;static1189,34476
static Header *freep;static1190,34496
voidvoid1192,34519
  bp = (Header*)ap - 1;bp1198,34605
  bp = (Header*)ap - 1;bp1207,34867
  freep = p;freep1238,36094
  bp = (Header*)ap - 1;bp1246,36351
  freep = p;freep1270,37244
  freep = p;freep1284,37665
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1309,38262
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1318,38506
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1343,39618
      freep = prevp;freep1356,40084
    nu = 4096;nu1367,40345
  p = sbrk(nu * sizeof(Header));p1368,40360
  hp = (Header*)p;hp1377,40710
      freep = prevp;freep1388,41069
      freep = prevp;freep1418,42107
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1446,42935

wc.asm,6626
_wc:     file format elf32-i386_wc2,1
Disassembly of section .text:Disassembly5,35
intint11,131
   a:	55                   	push   %ebpa17,314
   b:	89 e5                	mov    %esp,%ebpb18,354
   d:	57                   	push   %edid19,399
   e:	56                   	push   %esie20,439
   f:	53                   	push   %ebxf21,479
intint35,916
char buf[512];char134,3669
voidvoid136,3685
  a0:	55                   	push   %ebpa0139,3715
  a1:	89 e5                	mov    %esp,%ebpa1140,3755
  a3:	57                   	push   %edia3141,3800
  a4:	56                   	push   %esia4142,3840
  a5:	53                   	push   %ebxa5143,3880
  l = w = c = 0;l147,3956
  inword = 0;inword148,3973
  a6:	31 f6                	xor    %esi,%esia6149,3987
  l = w = c = 0;l155,4093
  a8:	31 db                	xor    %ebx,%ebxa8156,4110
char buf[512];char158,4156
voidvoid160,4172
  aa:	83 ec 1c             	sub    $0x1c,%espaa163,4202
  l = w = c = 0;l167,4284
  ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)ad168,4301
  b4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)b4169,4353
  bb:	90                   	nopbb170,4405
  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esibc171,4437
  inword = 0;inword172,4494
  c0:	83 ec 04             	sub    $0x4,%espc0174,4555
  c3:	68 00 02 00 00       	push   $0x200c3175,4600
  c8:	68 80 0b 00 00       	push   $0xb80c8176,4642
  cd:	ff 75 08             	pushl  0x8(%ebp)cd177,4684
  d0:	e8 05 03 00 00       	call   3da <read>d0178,4729
  d5:	83 c4 10             	add    $0x10,%espd5179,4775
  d8:	83 f8 00             	cmp    $0x0,%eaxd8180,4821
  db:	89 45 e4             	mov    %eax,-0x1c(%ebp)db181,4866
  de:	7e 5f                	jle    13f <wc+0x9f>de182,4918
  e0:	31 ff                	xor    %edi,%edie0183,4967
  e2:	eb 0e                	jmp    f2 <wc+0x52>e2184,5012
  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie4185,5060
        inword = 0;inword191,5228
  e8:	31 f6                	xor    %esi,%esie8192,5248
  l = w = c = 0;l195,5317
  inword = 0;inword196,5334
  ea:	83 c7 01             	add    $0x1,%ediea199,5419
  ed:	39 7d e4             	cmp    %edi,-0x1c(%ebp)ed200,5464
  f0:	74 3a                	je     12c <wc+0x8c>f0201,5516
  f2:	0f be 87 80 0b 00 00 	movsbl 0xb80(%edi),%eaxf2204,5601
  f9:	31 c9                	xor    %ecx,%ecxf9206,5666
  fb:	3c 0a                	cmp    $0xa,%alfb207,5711
  fd:	0f 94 c1             	sete   %clfd208,5755
  inword = 0;inword213,5959
        inword = 0;inword225,6363
  l = w = c = 0;l233,6590
  inword = 0;inword234,6607
        inword = 0;inword241,6840
        inword = 1;inword244,6897
  l = w = c = 0;l248,6986
  inword = 0;inword249,7003
        inword = 1;inword260,7451
        inword = 1;inword286,8296
  os = s;os317,9103
intint338,9788
intint359,10527
intint368,10708
intint389,11364
uintuint407,11835
uintuint429,12515
static inline voidstatic467,13417
    cc = read(0, &c, 1);cc544,15767
    cc = read(0, &c, 1);cc558,16038
    cc = read(0, &c, 1);cc577,16710
intint657,18866
  fd = open(n, O_RDONLY);fd667,19088
  r = fstat(fd, st);r677,19460
  fd = open(n, O_RDONLY);fd700,20237
intint712,20529
  n = 0;n721,20740
    n = n*10 + *s++ - '0';n730,21127
  n = 0;n738,21344
    n = n*10 + *s++ - '0';n744,21579
  dst = vdst;dst767,22230
  src = vsrc;src768,22244
  dst = vdst;dst781,22671
  src = vsrc;src782,22685
  name: \name795,23027
static voidstatic948,27004
  neg = 0;neg962,27399
    neg = 1;neg971,27770
    x = -xx;x972,27783
  neg = 0;neg977,27866
    neg = 1;neg979,27898
    x = -xx;x981,27963
    x = xx;x985,28079
  i = 0;i988,28096
    x = xx;x1003,28696
  i = 0;i1006,28713
static voidstatic1025,29416
  neg = 0;neg1054,30363
    neg = 1;neg1056,30395
    x = -xx;x1057,30408
    x = xx;x1059,30432
  neg = 0;neg1066,30575
voidvoid1076,30864
  state = 0;state1087,31139
  ap = (uint*)(void*)&fmt + 1;ap1088,31152
voidvoid1094,31323
  state = 0;state1101,31439
  ap = (uint*)(void*)&fmt + 1;ap1102,31452
voidvoid1108,31622
  state = 0;state1115,31742
  ap = (uint*)(void*)&fmt + 1;ap1116,31755
    c = fmt[i] & 0xff;c1127,32253
        state = '%';state1132,32414
  state = 0;state1134,32481
  ap = (uint*)(void*)&fmt + 1;ap1135,32494
    c = fmt[i] & 0xff;c1137,32552
static voidstatic1143,32687
  state = 0;state1160,33232
  ap = (uint*)(void*)&fmt + 1;ap1161,33245
    c = fmt[i] & 0xff;c1166,33450
  state = 0;state1171,33551
  ap = (uint*)(void*)&fmt + 1;ap1172,33564
    c = fmt[i] & 0xff;c1174,33622
        state = '%';state1180,33826
          s = "(null)";s1201,34546
static voidstatic1216,34953
  state = 0;state1238,35717
  ap = (uint*)(void*)&fmt + 1;ap1239,35730
static voidstatic1244,35858
      state = 0;state1254,36086
  state = 0;state1259,36180
  ap = (uint*)(void*)&fmt + 1;ap1260,36193
      state = 0;state1266,36376
      state = 0;state1299,37468
        s = (char*)*ap;s1313,37951
          s = "(null)";s1320,38204
static voidstatic1332,38660
          s = "(null)";s1341,38885
static voidstatic1348,39036
        s = (char*)*ap;s1356,39245
          s = "(null)";s1359,39302
      state = 0;state1370,39667
static voidstatic1377,39908
static voidstatic1399,40585
static Header base;static1417,41191
static Header *freep;static1418,41211
voidvoid1420,41234
  bp = (Header*)ap - 1;bp1426,41315
static Header base;static1429,41444
static Header *freep;static1430,41464
voidvoid1432,41487
  bp = (Header*)ap - 1;bp1442,41743
voidvoid1446,41924
  bp = (Header*)ap - 1;bp1451,41965
static Header base;static1463,42540
static Header *freep;static1464,42560
voidvoid1466,42583
  bp = (Header*)ap - 1;bp1472,42669
  bp = (Header*)ap - 1;bp1481,42931
  freep = p;freep1512,44158
  bp = (Header*)ap - 1;bp1520,44415
  freep = p;freep1544,45308
  freep = p;freep1558,45729
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1583,46326
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1592,46570
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1617,47682
      freep = prevp;freep1630,48148
    nu = 4096;nu1641,48409
  p = sbrk(nu * sizeof(Header));p1642,48424
  hp = (Header*)p;hp1651,48774
      freep = prevp;freep1662,49133
      freep = prevp;freep1692,50171
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1720,50999

rm.c,39
main(int argc, char *argv[])main6,60

grep.c,264
char buf[1024];buf7,107
grep(char *pattern, int fd)grep11,154
main(int argc, char *argv[])main39,586
match(char *re, char *text)match73,1156
int matchhere(char *re, char *text)matchhere85,1410
int matchstar(int c, char *re, char *text)matchstar99,1756

uart.c,205
#define COM1 COM115,242
static int uart;    // is there a uart?uart17,265
uartinit(void)uartinit20,311
uartputc(int c)uartputc52,970
uartgetc(void)uartgetc64,1127
uartintr(void)uartintr74,1244

init.asm,5971
_init:     file format elf32-i386_init2,1
Disassembly of section .text:Disassembly5,37
char *argv[] = { "sh", 0 };char9,86
intint11,115
   a:	55                   	push   %ebpa17,280
   b:	89 e5                	mov    %esp,%ebpb18,320
   d:	53                   	push   %ebxd19,365
   e:	51                   	push   %ecxe20,405
   f:	83 ec 08             	sub    $0x8,%espf24,498
    pid = fork();pid50,1458
    pid = fork();pid60,1722
    pid = fork();pid91,2801
  a4:	50                   	push   %eaxa4104,3194
  a5:	50                   	push   %eaxa5105,3234
  a6:	68 a4 0a 00 00       	push   $0xaa4a6106,3274
  ab:	68 de 07 00 00       	push   $0x7deab107,3316
  b0:	e8 b5 02 00 00       	call   36a <exec>b0108,3358
  b5:	5a                   	pop    %edxb5110,3447
  b6:	59                   	pop    %ecxb6111,3487
  b7:	68 e1 07 00 00       	push   $0x7e1b7112,3527
  bc:	6a 01                	push   $0x1bc113,3569
  be:	e8 cd 03 00 00       	call   490 <printf>be114,3609
  c3:	e8 6a 02 00 00       	call   332 <exit>c3116,3671
  c8:	50                   	push   %eaxc8123,3811
  c9:	6a 01                	push   $0x1c9124,3851
  cb:	6a 01                	push   $0x1cb125,3891
  cd:	68 b0 07 00 00       	push   $0x7b0cd126,3931
  d2:	e8 a3 02 00 00       	call   37a <mknod>d2127,3973
  d7:	58                   	pop    %eaxd7129,4049
  d8:	5a                   	pop    %edxd8130,4089
  d9:	6a 02                	push   $0x2d9131,4129
  db:	68 b0 07 00 00       	push   $0x7b0db132,4169
  e0:	e8 8d 02 00 00       	call   372 <open>e0133,4211
  e5:	83 c4 10             	add    $0x10,%espe5134,4257
  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>e8135,4303
  ed:	66 90                	xchg   %ax,%axed136,4353
  ef:	90                   	nopef137,4396
  f0:	55                   	push   %ebpf0146,4517
  f1:	89 e5                	mov    %esp,%ebpf1147,4557
  f3:	53                   	push   %ebxf3148,4602
  f4:	8b 45 08             	mov    0x8(%ebp),%eaxf4149,4642
  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecxf7150,4692
  os = s;os153,4755
  fa:	89 c2                	mov    %eax,%edxfa155,4793
  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esifc156,4838
intint174,5440
intint195,6179
intint204,6360
intint225,7016
uintuint243,7487
uintuint265,8167
static inline voidstatic303,9069
    cc = read(0, &c, 1);cc380,11419
    cc = read(0, &c, 1);cc394,11690
    cc = read(0, &c, 1);cc413,12362
intint493,14518
  fd = open(n, O_RDONLY);fd503,14740
  r = fstat(fd, st);r513,15112
  fd = open(n, O_RDONLY);fd536,15889
intint548,16181
  n = 0;n557,16392
    n = n*10 + *s++ - '0';n566,16779
  n = 0;n574,16996
    n = n*10 + *s++ - '0';n580,17231
  dst = vdst;dst603,17882
  src = vsrc;src604,17896
  dst = vdst;dst617,18323
  src = vsrc;src618,18337
  name: \name631,18679
static voidstatic784,22656
  neg = 0;neg798,23051
    neg = 1;neg807,23422
    x = -xx;x808,23435
  neg = 0;neg813,23518
    neg = 1;neg815,23550
    x = -xx;x817,23615
    x = xx;x821,23731
  i = 0;i824,23748
    x = xx;x839,24348
  i = 0;i842,24365
static voidstatic861,25068
  neg = 0;neg890,26015
    neg = 1;neg892,26047
    x = -xx;x893,26060
    x = xx;x895,26084
  neg = 0;neg902,26227
voidvoid912,26516
  state = 0;state923,26791
  ap = (uint*)(void*)&fmt + 1;ap924,26804
voidvoid930,26975
  state = 0;state937,27091
  ap = (uint*)(void*)&fmt + 1;ap938,27104
voidvoid944,27274
  state = 0;state951,27394
  ap = (uint*)(void*)&fmt + 1;ap952,27407
    c = fmt[i] & 0xff;c963,27905
        state = '%';state968,28066
  state = 0;state970,28133
  ap = (uint*)(void*)&fmt + 1;ap971,28146
    c = fmt[i] & 0xff;c973,28204
static voidstatic979,28339
  state = 0;state996,28884
  ap = (uint*)(void*)&fmt + 1;ap997,28897
    c = fmt[i] & 0xff;c1002,29102
  state = 0;state1007,29203
  ap = (uint*)(void*)&fmt + 1;ap1008,29216
    c = fmt[i] & 0xff;c1010,29274
        state = '%';state1016,29478
          s = "(null)";s1037,30198
static voidstatic1052,30605
  state = 0;state1074,31369
  ap = (uint*)(void*)&fmt + 1;ap1075,31382
static voidstatic1080,31510
      state = 0;state1090,31738
  state = 0;state1095,31832
  ap = (uint*)(void*)&fmt + 1;ap1096,31845
      state = 0;state1102,32028
      state = 0;state1135,33120
        s = (char*)*ap;s1149,33603
          s = "(null)";s1156,33856
static voidstatic1168,34312
          s = "(null)";s1177,34537
static voidstatic1184,34688
        s = (char*)*ap;s1192,34897
          s = "(null)";s1195,34954
      state = 0;state1206,35319
static voidstatic1213,35560
static voidstatic1235,36237
static Header base;static1253,36843
static Header *freep;static1254,36863
voidvoid1256,36886
  bp = (Header*)ap - 1;bp1262,36967
static Header base;static1265,37096
static Header *freep;static1266,37116
voidvoid1268,37139
  bp = (Header*)ap - 1;bp1278,37395
voidvoid1282,37576
  bp = (Header*)ap - 1;bp1287,37617
static Header base;static1299,38192
static Header *freep;static1300,38212
voidvoid1302,38235
  bp = (Header*)ap - 1;bp1308,38321
  bp = (Header*)ap - 1;bp1317,38583
  freep = p;freep1348,39810
  bp = (Header*)ap - 1;bp1356,40067
  freep = p;freep1380,40960
  freep = p;freep1394,41381
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1419,41978
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1428,42222
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1453,43334
      freep = prevp;freep1466,43800
    nu = 4096;nu1477,44061
  p = sbrk(nu * sizeof(Header));p1478,44076
  hp = (Header*)p;hp1487,44426
      freep = prevp;freep1498,44785
      freep = prevp;freep1528,45823
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1556,46651

zombie.asm,6841
_zombie:     file format elf32-i386_zombie2,1
Disassembly of section .text:Disassembly5,39
intint11,124
   a:	55                   	push   %ebpa17,289
   b:	89 e5                	mov    %esp,%ebpb18,329
   d:	51                   	push   %ecxd19,374
   e:	83 ec 04             	sub    $0x4,%espe20,414
  os = s;os49,1312
intint70,1996
intint91,2733
intint100,2914
intint121,3568
  a0:	31 c0                	xor    %eax,%eaxa0125,3635
  a2:	29 d8                	sub    %ebx,%eaxa2128,3726
  a4:	5b                   	pop    %ebxa4130,3773
  a5:	5e                   	pop    %esia5131,3813
  a6:	5d                   	pop    %ebpa6132,3853
  a7:	c3                   	ret    a7133,3893
  a8:	90                   	nopa8134,3929
  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esia9135,3961
uintuint139,4039
  b0:	55                   	push   %ebpb0142,4062
  b1:	89 e5                	mov    %esp,%ebpb1143,4102
  b3:	8b 4d 08             	mov    0x8(%ebp),%ecxb3144,4147
  b6:	80 39 00             	cmpb   $0x0,(%ecx)b6148,4231
  b9:	74 12                	je     cd <strlen+0x1d>b9149,4278
  bb:	31 d2                	xor    %edx,%edxbb150,4330
  bd:	8d 76 00             	lea    0x0(%esi),%esibd151,4375
  c0:	83 c2 01             	add    $0x1,%edxc0152,4425
  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)c3153,4470
  c7:	89 d0                	mov    %edx,%eaxc7154,4524
  c9:	75 f5                	jne    c0 <strlen+0x10>c9155,4569
  cb:	5d                   	pop    %ebpcb159,4641
  cc:	c3                   	ret    cc160,4681
uintuint161,4717
  cd:	31 c0                	xor    %eax,%eaxcd167,4774
  cf:	5d                   	pop    %ebpcf171,4839
  d0:	c3                   	ret    d0172,4879
  d1:	eb 0d                	jmp    e0 <memset>d1173,4915
  d3:	90                   	nopd3174,4962
  d4:	90                   	nopd4175,4994
  d5:	90                   	nopd5176,5026
  d6:	90                   	nopd6177,5058
  d7:	90                   	nopd7178,5090
  d8:	90                   	nopd8179,5122
  d9:	90                   	nopd9180,5154
  da:	90                   	nopda181,5186
  db:	90                   	nopdb182,5218
  dc:	90                   	nopdc183,5250
  dd:	90                   	nopdd184,5282
  de:	90                   	nopde185,5314
  df:	90                   	nopdf186,5346
  e0:	55                   	push   %ebpe0193,5440
  e1:	89 e5                	mov    %esp,%ebpe1194,5480
  e3:	57                   	push   %edie3195,5525
  e4:	8b 55 08             	mov    0x8(%ebp),%edxe4196,5565
static inline voidstatic199,5618
  e7:	8b 4d 10             	mov    0x10(%ebp),%ecxe7203,5710
  ea:	8b 45 0c             	mov    0xc(%ebp),%eaxea204,5761
  ed:	89 d7                	mov    %edx,%edied205,5811
  ef:	fc                   	cld    ef206,5856
  f0:	f3 aa                	rep stos %al,%es:(%edi)f0207,5892
  f2:	89 d0                	mov    %edx,%eaxf2211,5980
  f4:	5f                   	pop    %edif4212,6025
  f5:	5d                   	pop    %ebpf5213,6065
  f6:	c3                   	ret    f6214,6105
  f7:	89 f6                	mov    %esi,%esif7215,6141
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9216,6186
    cc = read(0, &c, 1);cc276,7968
    cc = read(0, &c, 1);cc290,8239
    cc = read(0, &c, 1);cc309,8911
intint389,11067
  fd = open(n, O_RDONLY);fd399,11289
  r = fstat(fd, st);r409,11661
  fd = open(n, O_RDONLY);fd432,12438
intint444,12730
  n = 0;n453,12941
    n = n*10 + *s++ - '0';n462,13328
  n = 0;n470,13545
    n = n*10 + *s++ - '0';n476,13780
  dst = vdst;dst499,14431
  src = vsrc;src500,14445
  dst = vdst;dst513,14872
  src = vsrc;src514,14886
  name: \name527,15228
static voidstatic680,19205
  neg = 0;neg694,19600
    neg = 1;neg703,19971
    x = -xx;x704,19984
  neg = 0;neg709,20067
    neg = 1;neg711,20099
    x = -xx;x713,20164
    x = xx;x717,20280
  i = 0;i720,20297
    x = xx;x735,20897
  i = 0;i738,20914
static voidstatic757,21617
  neg = 0;neg786,22564
    neg = 1;neg788,22596
    x = -xx;x789,22609
    x = xx;x791,22633
  neg = 0;neg798,22776
voidvoid808,23065
  state = 0;state819,23340
  ap = (uint*)(void*)&fmt + 1;ap820,23353
voidvoid826,23524
  state = 0;state833,23640
  ap = (uint*)(void*)&fmt + 1;ap834,23653
voidvoid840,23823
  state = 0;state847,23943
  ap = (uint*)(void*)&fmt + 1;ap848,23956
    c = fmt[i] & 0xff;c859,24454
        state = '%';state864,24615
  state = 0;state866,24682
  ap = (uint*)(void*)&fmt + 1;ap867,24695
    c = fmt[i] & 0xff;c869,24753
static voidstatic875,24888
  state = 0;state892,25433
  ap = (uint*)(void*)&fmt + 1;ap893,25446
    c = fmt[i] & 0xff;c898,25651
  state = 0;state903,25752
  ap = (uint*)(void*)&fmt + 1;ap904,25765
    c = fmt[i] & 0xff;c906,25823
        state = '%';state912,26027
          s = "(null)";s933,26747
static voidstatic948,27154
  state = 0;state970,27918
  ap = (uint*)(void*)&fmt + 1;ap971,27931
static voidstatic976,28059
      state = 0;state986,28287
  state = 0;state991,28381
  ap = (uint*)(void*)&fmt + 1;ap992,28394
      state = 0;state998,28577
      state = 0;state1031,29669
        s = (char*)*ap;s1045,30152
          s = "(null)";s1052,30405
static voidstatic1064,30861
          s = "(null)";s1073,31086
static voidstatic1080,31237
        s = (char*)*ap;s1088,31446
          s = "(null)";s1091,31503
      state = 0;state1102,31868
static voidstatic1109,32109
static voidstatic1131,32786
static Header base;static1149,33392
static Header *freep;static1150,33412
voidvoid1152,33435
  bp = (Header*)ap - 1;bp1158,33516
static Header base;static1161,33645
static Header *freep;static1162,33665
voidvoid1164,33688
  bp = (Header*)ap - 1;bp1174,33944
voidvoid1178,34125
  bp = (Header*)ap - 1;bp1183,34166
static Header base;static1195,34741
static Header *freep;static1196,34761
voidvoid1198,34784
  bp = (Header*)ap - 1;bp1204,34870
  bp = (Header*)ap - 1;bp1213,35132
  freep = p;freep1244,36359
  bp = (Header*)ap - 1;bp1252,36616
  freep = p;freep1276,37509
  freep = p;freep1290,37930
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1315,38527
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1324,38771
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1349,39883
      freep = prevp;freep1362,40349
    nu = 4096;nu1373,40610
  p = sbrk(nu * sizeof(Header));p1374,40625
  hp = (Header*)p;hp1383,40975
      freep = prevp;freep1394,41334
      freep = prevp;freep1424,42372
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1452,43200

echo.c,39
main(int argc, char *argv[])main6,60

date.h,175
struct rtcdate {rtcdate1,0
  uint second;second2,17
  uint minute;minute3,32
  uint hour;hour4,47
  uint day;day5,60
  uint month;month6,72
  uint year;year7,86

spinlock.h,275
struct spinlock {spinlock2,26
  uint locked;       // Is the lock held?locked3,44
  char *name;        // Name of lock.name6,107
  struct cpu *cpu;   // The cpu holding the lock.cpu7,145
  uint pcs[10];      // The call stack (an array of program counters)pcs8,195

zombie.c,22
main(void)main9,124

ide.c,648
#define SECTOR_SIZE SECTOR_SIZE16,277
#define IDE_BSY IDE_BSY17,303
#define IDE_DRDY IDE_DRDY18,330
#define IDE_DF IDE_DF19,357
#define IDE_ERR IDE_ERR20,384
#define IDE_CMD_READ IDE_CMD_READ22,412
#define IDE_CMD_WRITE IDE_CMD_WRITE23,439
#define IDE_CMD_RDMUL IDE_CMD_RDMUL24,466
#define IDE_CMD_WRMUL IDE_CMD_WRMUL25,493
static struct spinlock idelock;idelock31,698
static struct buf *idequeue;idequeue32,730
static int havedisk1;havedisk134,760
idewait(int checkerr)idewait39,867
ideinit(void)ideinit51,1049
idestart(struct buf *b)idestart74,1439
ideintr(void)ideintr104,2287
iderw(struct buf *b)iderw138,2972

kbd.c,56
kbdgetc(void)kbdgetc7,76
kbdintr(void)kbdintr47,883

x86.h,1436
inb(ushort port)inb4,77
insl(int port, void *addr, int cnt)insl13,203
outb(ushort port, uchar data)outb22,420
outw(ushort port, ushort data)outw28,530
outsl(int port, const void *addr, int cnt)outsl34,641
stosb(void *addr, int data, int cnt)stosb43,856
stosl(void *addr, int data, int cnt)stosl52,1075
lgdt(struct segdesc *p, int size)lgdt63,1311
lidt(struct gatedesc *p, int size)lidt77,1518
ltr(ushort sel)ltr89,1708
readeflags(void)readeflags95,1788
loadgs(ushort v)loadgs103,1912
cli(void)cli109,1998
sti(void)sti115,2055
xchg(volatile uint *addr, uint newval)xchg121,2112
rcr2(void)rcr2134,2399
lcr3(uint val)lcr3142,2506
struct trapframe {trapframe150,2695
  uint edi;edi152,2748
  uint esi;esi153,2760
  uint ebp;ebp154,2772
  uint oesp;      // useless & ignoredoesp155,2784
  uint ebx;ebx156,2823
  uint edx;edx157,2835
  uint ecx;ecx158,2847
  uint eax;eax159,2859
  ushort gs;gs162,2896
  ushort padding1;padding1163,2909
  ushort fs;fs164,2928
  ushort padding2;padding2165,2941
  ushort es;es166,2960
  ushort padding3;padding3167,2973
  ushort ds;ds168,2992
  ushort padding4;padding4169,3005
  uint trapno;trapno170,3024
  uint err;err173,3080
  uint eip;eip174,3092
  ushort cs;cs175,3104
  ushort padding5;padding5176,3117
  uint eflags;eflags177,3136
  uint esp;esp180,3222
  ushort ss;ss181,3234
  ushort padding6;padding6182,3247

kalloc.c,492
struct run {run16,466
  struct run *next;next17,479
  struct spinlock lock;lock21,512
  int use_lock;use_lock22,536
  struct run *freelist;freelist23,552
  struct run *freelist_userinfo;freelist_userinfo24,576
} kmem;kmem25,609
kinit1(void *vstart, void *vend)kinit133,914
kinit2(void *vstart, void *vend)kinit241,1037
freerange(void *vstart, void *vend)freerange48,1128
kfree(char *v)kfree62,1497
kalloc(void)kalloc95,2173
kuinfo_alloc (void) {kuinfo_alloc113,2410

sh.c,1888
#define EXEC EXEC8,101
#define REDIR REDIR9,117
#define PIPE PIPE10,133
#define LIST LIST11,149
#define BACK BACK12,165
#define MAXARGS MAXARGS14,182
struct cmd {cmd16,202
  int type;type17,215
struct execcmd {execcmd20,231
  int type;type21,248
  char *argv[MAXARGS];argv22,260
  char *eargv[MAXARGS];eargv23,283
struct redircmd {redircmd26,311
  int type;type27,329
  struct cmd *cmd;cmd28,341
  char *file;file29,360
  char *efile;efile30,374
  int mode;mode31,389
  int fd;fd32,401
struct pipecmd {pipecmd35,415
  int type;type36,432
  struct cmd *left;left37,444
  struct cmd *right;right38,464
struct listcmd {listcmd41,489
  int type;type42,506
  struct cmd *left;left43,518
  struct cmd *right;right44,538
struct backcmd {backcmd47,563
  int type;type48,580
  struct cmd *cmd;cmd49,592
runcmd(struct cmd *cmd)runcmd58,750
getcmd(char *buf, int nbuf)getcmd134,2067
main(void)main145,2218
panic(char *s)panic175,2830
fork1(void)fork1182,2888
execcmd(void)execcmd196,3024
redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)redircmd207,3188
pipecmd(struct cmd *left, struct cmd *right)pipecmd223,3511
listcmd(struct cmd *left, struct cmd *right)listcmd236,3748
backcmd(struct cmd *subcmd)backcmd249,3985
char whitespace[] = " \t\r\n\v";whitespace262,4196
char symbols[] = "<|>&;()";symbols263,4229
gettoken(char **ps, char *es, char **q, char **eq)gettoken266,4262
peek(char **ps, char *es, char *toks)peek311,4871
parsecmd(char *s)parsecmd328,5198
parseline(char **ps, char *es)parseline345,5446
parsepipe(char **ps, char *es)parsepipe362,5739
parseredirs(struct cmd *cmd, char **ps, char *es)parseredirs375,5948
parseblock(char **ps, char *es)parseblock400,6480
parseexec(char **ps, char *es)parseexec416,6784
nulterminate(struct cmd *cmd)nulterminate450,7453

fcntl.h,123
#define O_RDONLY O_RDONLY1,0
#define O_WRONLY O_WRONLY2,24
#define O_RDWR O_RDWR3,48
#define O_CREATE O_CREATE4,72

umalloc.c,364
typedef long Align;Align9,175
union header {header11,196
    union header *ptr;ptr13,222
    uint size;size14,245
  } s;s15,260
  Align x;x16,267
typedef union header Header;Header19,282
static Header base;base21,312
static Header *freep;freep22,332
free(void *ap)free25,360
morecore(uint nu)morecore47,823
malloc(uint nbytes)malloc64,1056

traps.h,893
#define T_DIVIDE T_DIVIDE4,60
#define T_DEBUG T_DEBUG5,108
#define T_NMI T_NMI6,159
#define T_BRKPT T_BRKPT7,217
#define T_OFLOW T_OFLOW8,263
#define T_BOUND T_BOUND9,307
#define T_ILLOP T_ILLOP10,355
#define T_DEVICE T_DEVICE11,405
#define T_DBLFLT T_DBLFLT12,461
#define T_TSS T_TSS14,574
#define T_SEGNP T_SEGNP15,637
#define T_STACK T_STACK16,692
#define T_GPFLT T_GPFLT17,743
#define T_PGFLT T_PGFLT18,803
#define T_FPERR T_FPERR20,893
#define T_ALIGN T_ALIGN21,949
#define T_MCHK T_MCHK22,999
#define T_SIMDERR T_SIMDERR23,1048
#define T_SYSCALL T_SYSCALL27,1226
#define T_DEFAULT T_DEFAULT28,1273
#define T_IRQ0 T_IRQ030,1318
#define IRQ_TIMER IRQ_TIMER32,1385
#define IRQ_KBD IRQ_KBD33,1412
#define IRQ_COM1 IRQ_COM134,1439
#define IRQ_IDE IRQ_IDE35,1466
#define IRQ_ERROR IRQ_ERROR36,1493
#define IRQ_SPURIOUS IRQ_SPURIOUS37,1520

pipe.c,611
#define PIPESIZE PIPESIZE11,171
struct pipe {pipe13,193
  struct spinlock lock;lock14,207
  char data[PIPESIZE];data15,231
  uint nread;     // number of bytes readnread16,254
  uint nwrite;    // number of bytes writtennwrite17,296
  int readopen;   // read fd is still openreadopen18,341
  int writeopen;  // write fd is still openwriteopen19,384
pipealloc(struct file **f0, struct file **f1)pipealloc23,436
pipeclose(struct pipe *p, int writable)pipeclose60,1083
pipewrite(struct pipe *p, char *addr, int n)pipewrite79,1411
piperead(struct pipe *p, char *addr, int n)piperead101,1913

echo.asm,6523
_echo:     file format elf32-i386_echo2,1
Disassembly of section .text:Disassembly5,37
intint11,122
   a:	55                   	push   %ebpa17,305
   b:	89 e5                	mov    %esp,%ebpb18,345
   d:	57                   	push   %edid19,390
   e:	56                   	push   %esie20,430
   f:	53                   	push   %ebxf21,470
  os = s;os73,2350
intint94,3034
  a0:	55                   	push   %ebpa097,3077
  a1:	89 e5                	mov    %esp,%ebpa198,3117
  a3:	56                   	push   %esia399,3162
  a4:	53                   	push   %ebxa4100,3202
  a5:	8b 55 08             	mov    0x8(%ebp),%edxa5101,3242
  a8:	8b 4d 0c             	mov    0xc(%ebp),%ecxa8102,3292
  ab:	0f b6 02             	movzbl (%edx),%eaxab104,3366
  ae:	0f b6 19             	movzbl (%ecx),%ebxae105,3413
  b1:	84 c0                	test   %al,%alb1106,3460
  b3:	75 1e                	jne    d3 <strcmp+0x33>b3107,3503
  b5:	eb 29                	jmp    e0 <strcmp+0x40>b5108,3555
  b7:	89 f6                	mov    %esi,%esib7109,3607
  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib9110,3652
  c0:	83 c2 01             	add    $0x1,%edxc0112,3723
intint115,3771
  c3:	0f b6 02             	movzbl (%edx),%eaxc3119,3838
  c6:	8d 71 01             	lea    0x1(%ecx),%esic6121,3899
intint124,3952
  c9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebxc9128,4019
  cd:	84 c0                	test   %al,%alcd129,4069
  cf:	74 0f                	je     e0 <strcmp+0x40>cf130,4112
  d1:	89 f1                	mov    %esi,%ecxd1131,4164
  d3:	38 d8                	cmp    %bl,%ald3132,4209
  d5:	74 e9                	je     c0 <strcmp+0x20>d5133,4252
  d7:	29 d8                	sub    %ebx,%eaxd7136,4350
  d9:	5b                   	pop    %ebxd9138,4397
  da:	5e                   	pop    %esida139,4437
  db:	5d                   	pop    %ebpdb140,4477
  dc:	c3                   	ret    dc141,4517
  dd:	8d 76 00             	lea    0x0(%esi),%esidd142,4553
intint145,4606
  e0:	31 c0                	xor    %eax,%eaxe0149,4673
  e2:	29 d8                	sub    %ebx,%eaxe2152,4764
  e4:	5b                   	pop    %ebxe4154,4811
  e5:	5e                   	pop    %esie5155,4851
  e6:	5d                   	pop    %ebpe6156,4891
  e7:	c3                   	ret    e7157,4931
  e8:	90                   	nope8158,4967
  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esie9159,4999
uintuint163,5077
  f0:	55                   	push   %ebpf0166,5100
  f1:	89 e5                	mov    %esp,%ebpf1167,5140
  f3:	8b 4d 08             	mov    0x8(%ebp),%ecxf3168,5185
  f6:	80 39 00             	cmpb   $0x0,(%ecx)f6172,5269
  f9:	74 12                	je     10d <strlen+0x1d>f9173,5316
  fb:	31 d2                	xor    %edx,%edxfb174,5369
  fd:	8d 76 00             	lea    0x0(%esi),%esifd175,5414
uintuint185,5757
static inline voidstatic223,6659
    cc = read(0, &c, 1);cc300,9009
    cc = read(0, &c, 1);cc314,9280
    cc = read(0, &c, 1);cc333,9952
intint413,12108
  fd = open(n, O_RDONLY);fd423,12330
  r = fstat(fd, st);r433,12702
  fd = open(n, O_RDONLY);fd456,13479
intint468,13771
  n = 0;n477,13982
    n = n*10 + *s++ - '0';n486,14369
  n = 0;n494,14586
    n = n*10 + *s++ - '0';n500,14821
  dst = vdst;dst523,15472
  src = vsrc;src524,15486
  dst = vdst;dst537,15913
  src = vsrc;src538,15927
  name: \name551,16269
static voidstatic704,20246
  neg = 0;neg718,20641
    neg = 1;neg727,21012
    x = -xx;x728,21025
  neg = 0;neg733,21108
    neg = 1;neg735,21140
    x = -xx;x737,21205
    x = xx;x741,21321
  i = 0;i744,21338
    x = xx;x759,21938
  i = 0;i762,21955
static voidstatic781,22658
  neg = 0;neg810,23605
    neg = 1;neg812,23637
    x = -xx;x813,23650
    x = xx;x815,23674
  neg = 0;neg822,23817
voidvoid832,24106
  state = 0;state843,24381
  ap = (uint*)(void*)&fmt + 1;ap844,24394
voidvoid850,24565
  state = 0;state857,24681
  ap = (uint*)(void*)&fmt + 1;ap858,24694
voidvoid864,24864
  state = 0;state871,24984
  ap = (uint*)(void*)&fmt + 1;ap872,24997
    c = fmt[i] & 0xff;c883,25495
        state = '%';state888,25656
  state = 0;state890,25723
  ap = (uint*)(void*)&fmt + 1;ap891,25736
    c = fmt[i] & 0xff;c893,25794
static voidstatic899,25929
  state = 0;state916,26474
  ap = (uint*)(void*)&fmt + 1;ap917,26487
    c = fmt[i] & 0xff;c922,26692
  state = 0;state927,26793
  ap = (uint*)(void*)&fmt + 1;ap928,26806
    c = fmt[i] & 0xff;c930,26864
        state = '%';state936,27068
          s = "(null)";s957,27788
static voidstatic972,28195
  state = 0;state994,28959
  ap = (uint*)(void*)&fmt + 1;ap995,28972
static voidstatic1000,29100
      state = 0;state1010,29328
  state = 0;state1015,29422
  ap = (uint*)(void*)&fmt + 1;ap1016,29435
      state = 0;state1022,29618
      state = 0;state1055,30710
        s = (char*)*ap;s1069,31193
          s = "(null)";s1076,31446
static voidstatic1088,31902
          s = "(null)";s1097,32127
static voidstatic1104,32278
        s = (char*)*ap;s1112,32487
          s = "(null)";s1115,32544
      state = 0;state1126,32909
static voidstatic1133,33150
static voidstatic1155,33827
static Header base;static1173,34433
static Header *freep;static1174,34453
voidvoid1176,34476
  bp = (Header*)ap - 1;bp1182,34557
static Header base;static1185,34686
static Header *freep;static1186,34706
voidvoid1188,34729
  bp = (Header*)ap - 1;bp1198,34985
voidvoid1202,35166
  bp = (Header*)ap - 1;bp1207,35207
static Header base;static1219,35782
static Header *freep;static1220,35802
voidvoid1222,35825
  bp = (Header*)ap - 1;bp1228,35911
  bp = (Header*)ap - 1;bp1237,36173
  freep = p;freep1268,37400
  bp = (Header*)ap - 1;bp1276,37657
  freep = p;freep1300,38550
  freep = p;freep1314,38971
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1339,39568
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1348,39812
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1373,40924
      freep = prevp;freep1386,41390
    nu = 4096;nu1397,41651
  p = sbrk(nu * sizeof(Header));p1398,41666
  hp = (Header*)p;hp1407,42016
      freep = prevp;freep1418,42375
      freep = prevp;freep1448,43413
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1476,44241

string.c,435
memset(void *dst, int c, uint n)memset5,43
memcmp(const void *v1, const void *v2, uint n)memcmp16,228
memmove(void *dst, const void *src, uint n)memmove32,427
memcpy(void *dst, const void *src, uint n)memcpy53,730
strncmp(const char *p, const char *q, uint n)strncmp59,813
strncpy(char *s, const char *t, int n)strncpy69,981
safestrcpy(char *s, const char *t, int n)safestrcpy83,1192
strlen(const char *s)strlen97,1362

forktest.asm,3064
_forktest:     file format elf32-i386_forktest2,1
Disassembly of section .text:Disassembly5,41
intint11,123
   a:	55                   	push   %ebpa17,288
   b:	89 e5                	mov    %esp,%ebpb18,328
   d:	51                   	push   %ecxd19,373
   e:	83 ec 04             	sub    $0x4,%espe20,413
#define N  1000N31,716
voidvoid33,733
voidvoid59,1630
voidvoid74,1918
#define N  1000N78,1986
voidvoid80,2003
    pid = fork();pid97,2582
    pid = fork();pid111,2915
  a0:	e8 f5 02 00 00       	call   39a <wait>a0126,3361
  a5:	85 c0                	test   %eax,%eaxa5127,3407
  a7:	78 5e                	js     107 <forktest+0xb7>a7128,3452
  a9:	83 eb 01             	sub    $0x1,%ebxa9135,3612
  ac:	75 f2                	jne    a0 <forktest+0x50>ac136,3657
  ae:	e8 e7 02 00 00       	call   39a <wait>ae143,3797
  b3:	83 f8 ff             	cmp    $0xffffffff,%eaxb3144,3843
  b6:	75 71                	jne    129 <forktest+0xd9>b6145,3895
#define N  1000N146,3950
voidvoid148,3967
  b8:	83 ec 0c             	sub    $0xc,%espb8152,4030
  bb:	68 76 04 00 00       	push   $0x476bb153,4075
  c0:	e8 0b 01 00 00       	call   1d0 <strlen>c0154,4117
  c5:	83 c4 0c             	add    $0xc,%espc5155,4165
  c8:	50                   	push   %eaxc8156,4210
  c9:	68 76 04 00 00       	push   $0x476c9157,4250
  ce:	6a 01                	push   $0x1ce158,4292
  d0:	e8 dd 02 00 00       	call   3b2 <write>d0159,4332
  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebxd5166,4467
  d8:	c9                   	leave  d8167,4518
  d9:	c3                   	ret    d9168,4554
  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esida169,4590
#define N  1000N170,4640
voidvoid172,4657
  e0:	83 ec 0c             	sub    $0xc,%espe0176,4720
  e3:	68 84 04 00 00       	push   $0x484e3177,4765
  e8:	e8 e3 00 00 00       	call   1d0 <strlen>e8178,4807
  ed:	83 c4 0c             	add    $0xc,%esped179,4855
  f0:	50                   	push   %eaxf0180,4900
  f1:	68 84 04 00 00       	push   $0x484f1181,4940
  f6:	6a 01                	push   $0x1f6182,4982
  f8:	e8 b5 02 00 00       	call   3b2 <write>f8183,5022
  fd:	e8 90 02 00 00       	call   392 <exit>fd190,5167
    pid = fork();pid192,5235
#define N  1000N198,5359
voidvoid200,5376
#define N  1000N219,5935
voidvoid221,5952
  os = s;os258,6936
intint279,7621
intint300,8360
intint309,8541
intint330,9197
uintuint348,9668
uintuint370,10348
static inline voidstatic408,11250
    cc = read(0, &c, 1);cc485,13600
    cc = read(0, &c, 1);cc499,13871
    cc = read(0, &c, 1);cc518,14543
intint598,16699
  fd = open(n, O_RDONLY);fd608,16921
  r = fstat(fd, st);r618,17293
  fd = open(n, O_RDONLY);fd641,18070
intint653,18362
  n = 0;n662,18573
    n = n*10 + *s++ - '0';n671,18960
  n = 0;n679,19177
    n = n*10 + *s++ - '0';n685,19412
  dst = vdst;dst708,20063
  src = vsrc;src709,20077
  dst = vdst;dst722,20504
  src = vsrc;src723,20518
  name: \name736,20860

cat.asm,5957
_cat:     file format elf32-i386_cat2,1
Disassembly of section .text:Disassembly5,36
intint11,91
   a:	55                   	push   %ebpa17,274
   b:	89 e5                	mov    %esp,%ebpb18,314
   d:	57                   	push   %edid19,359
   e:	56                   	push   %esie20,399
   f:	53                   	push   %ebxf21,439
intint35,835
char buf[512];char126,3224
voidvoid128,3240
  a0:	83 ec 04             	sub    $0x4,%espa0142,3664
  a3:	53                   	push   %ebxa3143,3709
  a4:	68 00 0b 00 00       	push   $0xb00a4144,3749
  a9:	6a 01                	push   $0x1a9145,3791
  ab:	e8 c2 02 00 00       	call   372 <write>ab146,3831
  b0:	83 c4 10             	add    $0x10,%espb0147,3878
  b3:	39 c3                	cmp    %eax,%ebxb3148,3924
  b5:	75 26                	jne    dd <cat+0x4d>b5149,3969
voidvoid150,4018
  b7:	83 ec 04             	sub    $0x4,%espb7156,4095
  ba:	68 00 02 00 00       	push   $0x200ba157,4140
  bf:	68 00 0b 00 00       	push   $0xb00bf158,4182
  c4:	56                   	push   %esic4159,4224
  c5:	e8 a0 02 00 00       	call   36a <read>c5160,4264
  ca:	83 c4 10             	add    $0x10,%espca161,4310
  cd:	83 f8 00             	cmp    $0x0,%eaxcd162,4356
  d0:	89 c3                	mov    %eax,%ebxd0163,4401
  d2:	7f cc                	jg     a0 <cat+0x10>d2164,4446
  d4:	75 1b                	jne    f1 <cat+0x61>d4171,4604
  d6:	8d 65 f8             	lea    -0x8(%ebp),%espd6176,4707
  d9:	5b                   	pop    %ebxd9177,4758
  da:	5e                   	pop    %esida178,4798
  db:	5d                   	pop    %ebpdb179,4838
  dc:	c3                   	ret    dc180,4878
  dd:	83 ec 08             	sub    $0x8,%espdd187,5046
  e0:	68 d0 07 00 00       	push   $0x7d0e0188,5091
  e5:	6a 01                	push   $0x1e5189,5133
  e7:	e8 c4 03 00 00       	call   4b0 <printf>e7190,5173
  ec:	e8 61 02 00 00       	call   352 <exit>ec192,5235
  f1:	83 ec 08             	sub    $0x8,%espf1197,5340
  f4:	68 e2 07 00 00       	push   $0x7e2f4198,5385
  f9:	6a 01                	push   $0x1f9199,5427
  fb:	e8 b0 03 00 00       	call   4b0 <printf>fb200,5467
  os = s;os224,6147
intint245,6832
intint266,7571
intint275,7752
intint296,8408
uintuint314,8879
uintuint336,9559
static inline voidstatic374,10461
    cc = read(0, &c, 1);cc451,12811
    cc = read(0, &c, 1);cc465,13082
    cc = read(0, &c, 1);cc484,13754
intint564,15910
  fd = open(n, O_RDONLY);fd574,16132
  r = fstat(fd, st);r584,16504
  fd = open(n, O_RDONLY);fd607,17281
intint619,17573
  n = 0;n628,17784
    n = n*10 + *s++ - '0';n637,18171
  n = 0;n645,18388
    n = n*10 + *s++ - '0';n651,18623
  dst = vdst;dst674,19274
  src = vsrc;src675,19288
  dst = vdst;dst688,19715
  src = vsrc;src689,19729
  name: \name702,20071
static voidstatic855,24048
  neg = 0;neg869,24443
    neg = 1;neg878,24814
    x = -xx;x879,24827
  neg = 0;neg884,24910
    neg = 1;neg886,24942
    x = -xx;x888,25007
    x = xx;x892,25123
  i = 0;i895,25140
    x = xx;x910,25740
  i = 0;i913,25757
static voidstatic932,26460
  neg = 0;neg961,27407
    neg = 1;neg963,27439
    x = -xx;x964,27452
    x = xx;x966,27476
  neg = 0;neg973,27619
voidvoid983,27908
  state = 0;state994,28183
  ap = (uint*)(void*)&fmt + 1;ap995,28196
voidvoid1001,28367
  state = 0;state1008,28483
  ap = (uint*)(void*)&fmt + 1;ap1009,28496
voidvoid1015,28666
  state = 0;state1022,28786
  ap = (uint*)(void*)&fmt + 1;ap1023,28799
    c = fmt[i] & 0xff;c1034,29297
        state = '%';state1039,29458
  state = 0;state1041,29525
  ap = (uint*)(void*)&fmt + 1;ap1042,29538
    c = fmt[i] & 0xff;c1044,29596
static voidstatic1050,29731
  state = 0;state1067,30276
  ap = (uint*)(void*)&fmt + 1;ap1068,30289
    c = fmt[i] & 0xff;c1073,30494
  state = 0;state1078,30595
  ap = (uint*)(void*)&fmt + 1;ap1079,30608
    c = fmt[i] & 0xff;c1081,30666
        state = '%';state1087,30870
          s = "(null)";s1108,31590
static voidstatic1123,31997
  state = 0;state1145,32761
  ap = (uint*)(void*)&fmt + 1;ap1146,32774
static voidstatic1151,32902
      state = 0;state1161,33130
  state = 0;state1166,33224
  ap = (uint*)(void*)&fmt + 1;ap1167,33237
      state = 0;state1173,33420
      state = 0;state1206,34512
        s = (char*)*ap;s1220,34995
          s = "(null)";s1227,35248
static voidstatic1239,35704
          s = "(null)";s1248,35929
static voidstatic1255,36080
        s = (char*)*ap;s1263,36289
          s = "(null)";s1266,36346
      state = 0;state1277,36711
static voidstatic1284,36952
static voidstatic1306,37629
static Header base;static1324,38235
static Header *freep;static1325,38255
voidvoid1327,38278
  bp = (Header*)ap - 1;bp1333,38359
static Header base;static1336,38488
static Header *freep;static1337,38508
voidvoid1339,38531
  bp = (Header*)ap - 1;bp1349,38787
voidvoid1353,38968
  bp = (Header*)ap - 1;bp1358,39009
static Header base;static1370,39584
static Header *freep;static1371,39604
voidvoid1373,39627
  bp = (Header*)ap - 1;bp1379,39713
  bp = (Header*)ap - 1;bp1388,39975
  freep = p;freep1419,41202
  bp = (Header*)ap - 1;bp1427,41459
  freep = p;freep1451,42352
  freep = p;freep1465,42773
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1490,43370
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1499,43614
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1524,44726
      freep = prevp;freep1537,45192
    nu = 4096;nu1548,45453
  p = sbrk(nu * sizeof(Header));p1549,45468
  hp = (Header*)p;hp1558,45818
      freep = prevp;freep1569,46177
      freep = prevp;freep1599,47215
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1627,48043

spinp,0

.dir-locals.el,0

lapic.c,1731
#define ID ID14,340
#define VER VER15,375
#define TPR TPR16,415
#define EOI EOI17,461
#define SVR SVR18,497
  #define ENABLE ENABLE19,555
#define ESR ESR20,604
#define ICRLO ICRLO21,649
  #define INIT INIT22,699
  #define STARTUP STARTUP23,747
  #define DELIVS DELIVS24,796
  #define ASSERT ASSERT25,849
  #define DEASSERT DEASSERT26,917
  #define LEVEL LEVEL27,949
  #define BCAST BCAST28,1002
  #define BUSY BUSY29,1074
  #define FIXED FIXED30,1106
#define ICRHI ICRHI31,1138
#define TIMER TIMER32,1196
  #define X1 X133,1257
  #define PERIODIC PERIODIC34,1313
#define PCINT PCINT35,1359
#define LINT0 LINT036,1415
#define LINT1 LINT137,1476
#define ERROR ERROR38,1537
  #define MASKED MASKED39,1598
#define TICR TICR40,1652
#define TCCR TCCR41,1704
#define TDCR TDCR42,1756
volatile uint *lapic;  // Initialized in mp.clapic44,1816
lapicw(int index, int value)lapicw48,1888
lapicinit(void)lapicinit55,2005
lapicid(void)lapicid101,3215
lapiceoi(void)lapiceoi110,3319
microdelay(int us)microdelay119,3477
#define CMOS_PORT CMOS_PORT123,3501
#define CMOS_RETURN CMOS_RETURN124,3527
lapicstartap(uchar apicid, uint addr)lapicstartap129,3668
#define CMOS_STATA CMOS_STATA163,4823
#define CMOS_STATB CMOS_STATB164,4849
#define CMOS_UIP CMOS_UIP165,4875
#define SECS SECS167,4938
#define MINS MINS168,4959
#define HOURS HOURS169,4980
#define DAY DAY170,5001
#define MONTH MONTH171,5022
#define YEAR YEAR172,5043
static uint cmos_read(uint reg)cmos_read174,5065
static void fill_rtcdate(struct rtcdate *r)fill_rtcdate182,5174
void cmostime(struct rtcdate *r)cmostime193,5474
#define    CONV(CONV214,5871
#undef     CONVCONV221,6045

stat.h,346
#define T_DIR T_DIR1,0
#define T_FILE T_FILE2,32
#define T_DEV T_DEV3,59
struct stat {stat5,89
  short type;  // Type of filetype6,103
  int dev;     // File system's disk devicedev7,134
  uint ino;    // Inode numberino8,178
  short nlink; // Number of links to filenlink9,209
  uint size;   // Size of file in bytessize10,251

types.h,153
typedef unsigned int   uint;uint1,0
typedef unsigned short ushort;ushort2,29
typedef unsigned char  uchar;uchar3,60
typedef uint pde_t;pde_t4,90
